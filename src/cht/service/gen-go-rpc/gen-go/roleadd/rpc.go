// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package roleadd

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - RoleName
//  - Remark
//  - ChengHuiTongTraceLog
type RoleAddRequestStruct struct {
  RoleName string `thrift:"role_name,1" db:"role_name" json:"role_name"`
  Remark string `thrift:"remark,2" db:"remark" json:"remark"`
  ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,3" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

func NewRoleAddRequestStruct() *RoleAddRequestStruct {
  return &RoleAddRequestStruct{}
}


func (p *RoleAddRequestStruct) GetRoleName() string {
  return p.RoleName
}

func (p *RoleAddRequestStruct) GetRemark() string {
  return p.Remark
}

func (p *RoleAddRequestStruct) GetChengHuiTongTraceLog() string {
  return p.ChengHuiTongTraceLog
}
func (p *RoleAddRequestStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RoleAddRequestStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RoleName = v
}
  return nil
}

func (p *RoleAddRequestStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Remark = v
}
  return nil
}

func (p *RoleAddRequestStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChengHuiTongTraceLog = v
}
  return nil
}

func (p *RoleAddRequestStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RoleAddRequestStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RoleAddRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("role_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:role_name: ", p), err) }
  if err := oprot.WriteString(string(p.RoleName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.role_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:role_name: ", p), err) }
  return err
}

func (p *RoleAddRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("remark", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:remark: ", p), err) }
  if err := oprot.WriteString(string(p.Remark)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remark (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:remark: ", p), err) }
  return err
}

func (p *RoleAddRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chengHuiTongTraceLog: ", p), err) }
  if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chengHuiTongTraceLog: ", p), err) }
  return err
}

func (p *RoleAddRequestStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RoleAddRequestStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
type RoleAddResponseStruct struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Msg string `thrift:"msg,2" db:"msg" json:"msg"`
}

func NewRoleAddResponseStruct() *RoleAddResponseStruct {
  return &RoleAddResponseStruct{}
}


func (p *RoleAddResponseStruct) GetStatus() int32 {
  return p.Status
}

func (p *RoleAddResponseStruct) GetMsg() string {
  return p.Msg
}
func (p *RoleAddResponseStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RoleAddResponseStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *RoleAddResponseStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *RoleAddResponseStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RoleAddResponseStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RoleAddResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *RoleAddResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err) }
  return err
}

func (p *RoleAddResponseStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RoleAddResponseStruct(%+v)", *p)
}

type RoleAddThriftService interface {
  // Parameters:
  //  - RequestObj
  AddRole(requestObj *RoleAddRequestStruct) (r *RoleAddResponseStruct, err error)
}

type RoleAddThriftServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewRoleAddThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RoleAddThriftServiceClient {
  return &RoleAddThriftServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewRoleAddThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RoleAddThriftServiceClient {
  return &RoleAddThriftServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - RequestObj
func (p *RoleAddThriftServiceClient) AddRole(requestObj *RoleAddRequestStruct) (r *RoleAddResponseStruct, err error) {
  if err = p.sendAddRole(requestObj); err != nil { return }
  return p.recvAddRole()
}

func (p *RoleAddThriftServiceClient) sendAddRole(requestObj *RoleAddRequestStruct)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("addRole", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := RoleAddThriftServiceAddRoleArgs{
  RequestObj : requestObj,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *RoleAddThriftServiceClient) recvAddRole() (value *RoleAddResponseStruct, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "addRole" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addRole failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addRole failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addRole failed: invalid message type")
    return
  }
  result := RoleAddThriftServiceAddRoleResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type RoleAddThriftServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RoleAddThriftService
}

func (p *RoleAddThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RoleAddThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RoleAddThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRoleAddThriftServiceProcessor(handler RoleAddThriftService) *RoleAddThriftServiceProcessor {

  self2 := &RoleAddThriftServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["addRole"] = &roleAddThriftServiceProcessorAddRole{handler:handler}
return self2
}

func (p *RoleAddThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x3

}

type roleAddThriftServiceProcessorAddRole struct {
  handler RoleAddThriftService
}

func (p *roleAddThriftServiceProcessorAddRole) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RoleAddThriftServiceAddRoleArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addRole", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RoleAddThriftServiceAddRoleResult{}
var retval *RoleAddResponseStruct
  var err2 error
  if retval, err2 = p.handler.AddRole(args.RequestObj); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addRole: " + err2.Error())
    oprot.WriteMessageBegin("addRole", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("addRole", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type RoleAddThriftServiceAddRoleArgs struct {
  RequestObj *RoleAddRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewRoleAddThriftServiceAddRoleArgs() *RoleAddThriftServiceAddRoleArgs {
  return &RoleAddThriftServiceAddRoleArgs{}
}

var RoleAddThriftServiceAddRoleArgs_RequestObj_DEFAULT *RoleAddRequestStruct
func (p *RoleAddThriftServiceAddRoleArgs) GetRequestObj() *RoleAddRequestStruct {
  if !p.IsSetRequestObj() {
    return RoleAddThriftServiceAddRoleArgs_RequestObj_DEFAULT
  }
return p.RequestObj
}
func (p *RoleAddThriftServiceAddRoleArgs) IsSetRequestObj() bool {
  return p.RequestObj != nil
}

func (p *RoleAddThriftServiceAddRoleArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RoleAddThriftServiceAddRoleArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestObj = &RoleAddRequestStruct{}
  if err := p.RequestObj.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
  }
  return nil
}

func (p *RoleAddThriftServiceAddRoleArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addRole_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RoleAddThriftServiceAddRoleArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err) }
  if err := p.RequestObj.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err) }
  return err
}

func (p *RoleAddThriftServiceAddRoleArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RoleAddThriftServiceAddRoleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RoleAddThriftServiceAddRoleResult struct {
  Success *RoleAddResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRoleAddThriftServiceAddRoleResult() *RoleAddThriftServiceAddRoleResult {
  return &RoleAddThriftServiceAddRoleResult{}
}

var RoleAddThriftServiceAddRoleResult_Success_DEFAULT *RoleAddResponseStruct
func (p *RoleAddThriftServiceAddRoleResult) GetSuccess() *RoleAddResponseStruct {
  if !p.IsSetSuccess() {
    return RoleAddThriftServiceAddRoleResult_Success_DEFAULT
  }
return p.Success
}
func (p *RoleAddThriftServiceAddRoleResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RoleAddThriftServiceAddRoleResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RoleAddThriftServiceAddRoleResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RoleAddResponseStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RoleAddThriftServiceAddRoleResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addRole_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RoleAddThriftServiceAddRoleResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RoleAddThriftServiceAddRoleResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RoleAddThriftServiceAddRoleResult(%+v)", *p)
}


