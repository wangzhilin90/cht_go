// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package kefudutydetails

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - ID
//  - ChengHuiTongTraceLog
type KefuDutyDetailsRequestStruct struct {
	ID                   int32  `thrift:"id,1" db:"id" json:"id"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,2" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewKefuDutyDetailsRequestStruct() *KefuDutyDetailsRequestStruct {
//   return &KefuDutyDetailsRequestStruct{}
// }

func (p *KefuDutyDetailsRequestStruct) GetID() int32 {
	return p.ID
}

func (p *KefuDutyDetailsRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *KefuDutyDetailsRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KefuDutyDetailsRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *KefuDutyDetailsRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *KefuDutyDetailsRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("KefuDutyDetailsRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KefuDutyDetailsRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *KefuDutyDetailsRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *KefuDutyDetailsRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KefuDutyDetailsRequestStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - Customer
//  - DutyTime
//  - HolidayUser
//  - IsRest
//  - Starttime
//  - Endtime
type KefuDutyDetailsStruct struct {
	ID          int32  `thrift:"id,1" db:"id" json:"id"`
	Customer    string `thrift:"customer,2" db:"customer" json:"customer"`
	DutyTime    int32  `thrift:"duty_time,3" db:"duty_time" json:"duty_time"`
	HolidayUser string `thrift:"holiday_user,4" db:"holiday_user" json:"holiday_user"`
	IsRest      int32  `thrift:"is_rest,5" db:"is_rest" json:"is_rest"`
	Starttime   int32  `thrift:"starttime,6" db:"starttime" json:"starttime"`
	Endtime     int32  `thrift:"endtime,7" db:"endtime" json:"endtime"`
}

func NewKefuDutyDetailsStruct() *KefuDutyDetailsStruct {
	return &KefuDutyDetailsStruct{}
}

func (p *KefuDutyDetailsStruct) GetID() int32 {
	return p.ID
}

func (p *KefuDutyDetailsStruct) GetCustomer() string {
	return p.Customer
}

func (p *KefuDutyDetailsStruct) GetDutyTime() int32 {
	return p.DutyTime
}

func (p *KefuDutyDetailsStruct) GetHolidayUser() string {
	return p.HolidayUser
}

func (p *KefuDutyDetailsStruct) GetIsRest() int32 {
	return p.IsRest
}

func (p *KefuDutyDetailsStruct) GetStarttime() int32 {
	return p.Starttime
}

func (p *KefuDutyDetailsStruct) GetEndtime() int32 {
	return p.Endtime
}
func (p *KefuDutyDetailsStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KefuDutyDetailsStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *KefuDutyDetailsStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Customer = v
	}
	return nil
}

func (p *KefuDutyDetailsStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.DutyTime = v
	}
	return nil
}

func (p *KefuDutyDetailsStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.HolidayUser = v
	}
	return nil
}

func (p *KefuDutyDetailsStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IsRest = v
	}
	return nil
}

func (p *KefuDutyDetailsStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Starttime = v
	}
	return nil
}

func (p *KefuDutyDetailsStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Endtime = v
	}
	return nil
}

func (p *KefuDutyDetailsStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("KefuDutyDetailsStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KefuDutyDetailsStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *KefuDutyDetailsStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("customer", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:customer: ", p), err)
	}
	if err := oprot.WriteString(string(p.Customer)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.customer (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:customer: ", p), err)
	}
	return err
}

func (p *KefuDutyDetailsStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("duty_time", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:duty_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DutyTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.duty_time (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:duty_time: ", p), err)
	}
	return err
}

func (p *KefuDutyDetailsStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("holiday_user", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:holiday_user: ", p), err)
	}
	if err := oprot.WriteString(string(p.HolidayUser)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.holiday_user (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:holiday_user: ", p), err)
	}
	return err
}

func (p *KefuDutyDetailsStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_rest", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:is_rest: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsRest)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_rest (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:is_rest: ", p), err)
	}
	return err
}

func (p *KefuDutyDetailsStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("starttime", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:starttime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Starttime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.starttime (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:starttime: ", p), err)
	}
	return err
}

func (p *KefuDutyDetailsStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endtime", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:endtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Endtime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endtime (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:endtime: ", p), err)
	}
	return err
}

func (p *KefuDutyDetailsStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KefuDutyDetailsStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
//  - KefuDutyDetails
type KefuDutyDetailsResponseStruct struct {
	Status          int32                  `thrift:"status,1" db:"status" json:"status"`
	Msg             string                 `thrift:"msg,2" db:"msg" json:"msg"`
	KefuDutyDetails *KefuDutyDetailsStruct `thrift:"KefuDutyDetails,3" db:"KefuDutyDetails" json:"KefuDutyDetails"`
}

func NewKefuDutyDetailsResponseStruct() *KefuDutyDetailsResponseStruct {
	return &KefuDutyDetailsResponseStruct{}
}

func (p *KefuDutyDetailsResponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *KefuDutyDetailsResponseStruct) GetMsg() string {
	return p.Msg
}

var KefuDutyDetailsResponseStruct_KefuDutyDetails_DEFAULT *KefuDutyDetailsStruct

func (p *KefuDutyDetailsResponseStruct) GetKefuDutyDetails() *KefuDutyDetailsStruct {
	if !p.IsSetKefuDutyDetails() {
		return KefuDutyDetailsResponseStruct_KefuDutyDetails_DEFAULT
	}
	return p.KefuDutyDetails
}
func (p *KefuDutyDetailsResponseStruct) IsSetKefuDutyDetails() bool {
	return p.KefuDutyDetails != nil
}

func (p *KefuDutyDetailsResponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KefuDutyDetailsResponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *KefuDutyDetailsResponseStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *KefuDutyDetailsResponseStruct) ReadField3(iprot thrift.TProtocol) error {
	p.KefuDutyDetails = &KefuDutyDetailsStruct{}
	if err := p.KefuDutyDetails.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.KefuDutyDetails), err)
	}
	return nil
}

func (p *KefuDutyDetailsResponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("KefuDutyDetailsResponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KefuDutyDetailsResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *KefuDutyDetailsResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *KefuDutyDetailsResponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("KefuDutyDetails", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:KefuDutyDetails: ", p), err)
	}
	if err := p.KefuDutyDetails.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.KefuDutyDetails), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:KefuDutyDetails: ", p), err)
	}
	return err
}

func (p *KefuDutyDetailsResponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KefuDutyDetailsResponseStruct(%+v)", *p)
}

type KefuDutyDetailsThriftService interface {
	// Parameters:
	//  - RequestObj
	GetKefuDutyDetails(requestObj *KefuDutyDetailsRequestStruct) (r *KefuDutyDetailsResponseStruct, err error)
}

type KefuDutyDetailsThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewKefuDutyDetailsThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *KefuDutyDetailsThriftServiceClient {
	return &KefuDutyDetailsThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewKefuDutyDetailsThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *KefuDutyDetailsThriftServiceClient {
	return &KefuDutyDetailsThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RequestObj
func (p *KefuDutyDetailsThriftServiceClient) GetKefuDutyDetails(requestObj *KefuDutyDetailsRequestStruct) (r *KefuDutyDetailsResponseStruct, err error) {
	if err = p.sendGetKefuDutyDetails(requestObj); err != nil {
		return
	}
	return p.recvGetKefuDutyDetails()
}

func (p *KefuDutyDetailsThriftServiceClient) sendGetKefuDutyDetails(requestObj *KefuDutyDetailsRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getKefuDutyDetails", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := KefuDutyDetailsThriftServiceGetKefuDutyDetailsArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *KefuDutyDetailsThriftServiceClient) recvGetKefuDutyDetails() (value *KefuDutyDetailsResponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getKefuDutyDetails" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getKefuDutyDetails failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getKefuDutyDetails failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getKefuDutyDetails failed: invalid message type")
		return
	}
	result := KefuDutyDetailsThriftServiceGetKefuDutyDetailsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type KefuDutyDetailsThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      KefuDutyDetailsThriftService
}

func (p *KefuDutyDetailsThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *KefuDutyDetailsThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *KefuDutyDetailsThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewKefuDutyDetailsThriftServiceProcessor(handler KefuDutyDetailsThriftService) *KefuDutyDetailsThriftServiceProcessor {

	self2 := &KefuDutyDetailsThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self2.processorMap["getKefuDutyDetails"] = &kefuDutyDetailsThriftServiceProcessorGetKefuDutyDetails{handler: handler}
	return self2
}

func (p *KefuDutyDetailsThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x3.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x3

}

type kefuDutyDetailsThriftServiceProcessorGetKefuDutyDetails struct {
	handler KefuDutyDetailsThriftService
}

func (p *kefuDutyDetailsThriftServiceProcessorGetKefuDutyDetails) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := KefuDutyDetailsThriftServiceGetKefuDutyDetailsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getKefuDutyDetails", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := KefuDutyDetailsThriftServiceGetKefuDutyDetailsResult{}
	var retval *KefuDutyDetailsResponseStruct
	var err2 error
	if retval, err2 = p.handler.GetKefuDutyDetails(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getKefuDutyDetails: "+err2.Error())
		oprot.WriteMessageBegin("getKefuDutyDetails", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getKefuDutyDetails", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type KefuDutyDetailsThriftServiceGetKefuDutyDetailsArgs struct {
	RequestObj *KefuDutyDetailsRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewKefuDutyDetailsThriftServiceGetKefuDutyDetailsArgs() *KefuDutyDetailsThriftServiceGetKefuDutyDetailsArgs {
	return &KefuDutyDetailsThriftServiceGetKefuDutyDetailsArgs{}
}

var KefuDutyDetailsThriftServiceGetKefuDutyDetailsArgs_RequestObj_DEFAULT *KefuDutyDetailsRequestStruct

func (p *KefuDutyDetailsThriftServiceGetKefuDutyDetailsArgs) GetRequestObj() *KefuDutyDetailsRequestStruct {
	if !p.IsSetRequestObj() {
		return KefuDutyDetailsThriftServiceGetKefuDutyDetailsArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *KefuDutyDetailsThriftServiceGetKefuDutyDetailsArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *KefuDutyDetailsThriftServiceGetKefuDutyDetailsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KefuDutyDetailsThriftServiceGetKefuDutyDetailsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &KefuDutyDetailsRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *KefuDutyDetailsThriftServiceGetKefuDutyDetailsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getKefuDutyDetails_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KefuDutyDetailsThriftServiceGetKefuDutyDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *KefuDutyDetailsThriftServiceGetKefuDutyDetailsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KefuDutyDetailsThriftServiceGetKefuDutyDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type KefuDutyDetailsThriftServiceGetKefuDutyDetailsResult struct {
	Success *KefuDutyDetailsResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewKefuDutyDetailsThriftServiceGetKefuDutyDetailsResult() *KefuDutyDetailsThriftServiceGetKefuDutyDetailsResult {
	return &KefuDutyDetailsThriftServiceGetKefuDutyDetailsResult{}
}

var KefuDutyDetailsThriftServiceGetKefuDutyDetailsResult_Success_DEFAULT *KefuDutyDetailsResponseStruct

func (p *KefuDutyDetailsThriftServiceGetKefuDutyDetailsResult) GetSuccess() *KefuDutyDetailsResponseStruct {
	if !p.IsSetSuccess() {
		return KefuDutyDetailsThriftServiceGetKefuDutyDetailsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *KefuDutyDetailsThriftServiceGetKefuDutyDetailsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KefuDutyDetailsThriftServiceGetKefuDutyDetailsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KefuDutyDetailsThriftServiceGetKefuDutyDetailsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &KefuDutyDetailsResponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *KefuDutyDetailsThriftServiceGetKefuDutyDetailsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getKefuDutyDetails_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KefuDutyDetailsThriftServiceGetKefuDutyDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *KefuDutyDetailsThriftServiceGetKefuDutyDetailsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KefuDutyDetailsThriftServiceGetKefuDutyDetailsResult(%+v)", *p)
}
