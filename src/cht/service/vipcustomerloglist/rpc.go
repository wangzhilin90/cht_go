// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package vipcustomerloglist

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - StartTime
//  - EndTime
//  - Keywords
//  - Type
//  - LimitOffset
//  - LimitNum
//  - ChengHuiTongTraceLog
type VipCustomerLogListRequestStruct struct {
	StartTime            int32  `thrift:"start_time,1" db:"start_time" json:"start_time"`
	EndTime              int32  `thrift:"end_time,2" db:"end_time" json:"end_time"`
	Keywords             string `thrift:"keywords,3" db:"keywords" json:"keywords"`
	Type                 int32  `thrift:"type,4" db:"type" json:"type"`
	LimitOffset          int32  `thrift:"limitOffset,5" db:"limitOffset" json:"limitOffset"`
	LimitNum             int32  `thrift:"limitNum,6" db:"limitNum" json:"limitNum"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,7" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewVipCustomerLogListRequestStruct() *VipCustomerLogListRequestStruct {
//   return &VipCustomerLogListRequestStruct{}
// }

func (p *VipCustomerLogListRequestStruct) GetStartTime() int32 {
	return p.StartTime
}

func (p *VipCustomerLogListRequestStruct) GetEndTime() int32 {
	return p.EndTime
}

func (p *VipCustomerLogListRequestStruct) GetKeywords() string {
	return p.Keywords
}

func (p *VipCustomerLogListRequestStruct) GetType() int32 {
	return p.Type
}

func (p *VipCustomerLogListRequestStruct) GetLimitOffset() int32 {
	return p.LimitOffset
}

func (p *VipCustomerLogListRequestStruct) GetLimitNum() int32 {
	return p.LimitNum
}

func (p *VipCustomerLogListRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *VipCustomerLogListRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VipCustomerLogListRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *VipCustomerLogListRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *VipCustomerLogListRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Keywords = v
	}
	return nil
}

func (p *VipCustomerLogListRequestStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *VipCustomerLogListRequestStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.LimitOffset = v
	}
	return nil
}

func (p *VipCustomerLogListRequestStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.LimitNum = v
	}
	return nil
}

func (p *VipCustomerLogListRequestStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *VipCustomerLogListRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VipCustomerLogListRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VipCustomerLogListRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_time", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_time (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start_time: ", p), err)
	}
	return err
}

func (p *VipCustomerLogListRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end_time", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:end_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.end_time (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:end_time: ", p), err)
	}
	return err
}

func (p *VipCustomerLogListRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keywords", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:keywords: ", p), err)
	}
	if err := oprot.WriteString(string(p.Keywords)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keywords (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:keywords: ", p), err)
	}
	return err
}

func (p *VipCustomerLogListRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err)
	}
	return err
}

func (p *VipCustomerLogListRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limitOffset", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:limitOffset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitOffset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limitOffset (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:limitOffset: ", p), err)
	}
	return err
}

func (p *VipCustomerLogListRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limitNum", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:limitNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limitNum (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:limitNum: ", p), err)
	}
	return err
}

func (p *VipCustomerLogListRequestStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *VipCustomerLogListRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VipCustomerLogListRequestStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserID
//  - Username
//  - Email
//  - Realname
//  - Phone
//  - ScenePasstime
//  - VipStatus
//  - VipPasstime
//  - VipVerifytime
//  - OldCustomer
//  - NewCustomer_
//  - Updatetime
//  - Remark
type VipCustomerDetailsStruct struct {
	ID            int32  `thrift:"id,1" db:"id" json:"id"`
	UserID        int32  `thrift:"user_id,2" db:"user_id" json:"user_id"`
	Username      string `thrift:"username,3" db:"username" json:"username"`
	Email         string `thrift:"email,4" db:"email" json:"email"`
	Realname      string `thrift:"realname,5" db:"realname" json:"realname"`
	Phone         string `thrift:"phone,6" db:"phone" json:"phone"`
	ScenePasstime int32  `thrift:"scene_passtime,7" db:"scene_passtime" json:"scene_passtime"`
	VipStatus     int32  `thrift:"vip_status,8" db:"vip_status" json:"vip_status"`
	VipPasstime   int32  `thrift:"vip_passtime,9" db:"vip_passtime" json:"vip_passtime"`
	VipVerifytime int32  `thrift:"vip_verifytime,10" db:"vip_verifytime" json:"vip_verifytime"`
	OldCustomer   int32  `thrift:"old_customer,11" db:"old_customer" json:"old_customer"`
	NewCustomer_  int32  `thrift:"new_customer,12" db:"new_customer" json:"new_customer"`
	Updatetime    int32  `thrift:"updatetime,13" db:"updatetime" json:"updatetime"`
	Remark        string `thrift:"remark,14" db:"remark" json:"remark"`
}

func NewVipCustomerDetailsStruct() *VipCustomerDetailsStruct {
	return &VipCustomerDetailsStruct{}
}

func (p *VipCustomerDetailsStruct) GetID() int32 {
	return p.ID
}

func (p *VipCustomerDetailsStruct) GetUserID() int32 {
	return p.UserID
}

func (p *VipCustomerDetailsStruct) GetUsername() string {
	return p.Username
}

func (p *VipCustomerDetailsStruct) GetEmail() string {
	return p.Email
}

func (p *VipCustomerDetailsStruct) GetRealname() string {
	return p.Realname
}

func (p *VipCustomerDetailsStruct) GetPhone() string {
	return p.Phone
}

func (p *VipCustomerDetailsStruct) GetScenePasstime() int32 {
	return p.ScenePasstime
}

func (p *VipCustomerDetailsStruct) GetVipStatus() int32 {
	return p.VipStatus
}

func (p *VipCustomerDetailsStruct) GetVipPasstime() int32 {
	return p.VipPasstime
}

func (p *VipCustomerDetailsStruct) GetVipVerifytime() int32 {
	return p.VipVerifytime
}

func (p *VipCustomerDetailsStruct) GetOldCustomer() int32 {
	return p.OldCustomer
}

func (p *VipCustomerDetailsStruct) GetNewCustomer_() int32 {
	return p.NewCustomer_
}

func (p *VipCustomerDetailsStruct) GetUpdatetime() int32 {
	return p.Updatetime
}

func (p *VipCustomerDetailsStruct) GetRemark() string {
	return p.Remark
}
func (p *VipCustomerDetailsStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VipCustomerDetailsStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *VipCustomerDetailsStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *VipCustomerDetailsStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *VipCustomerDetailsStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *VipCustomerDetailsStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Realname = v
	}
	return nil
}

func (p *VipCustomerDetailsStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *VipCustomerDetailsStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ScenePasstime = v
	}
	return nil
}

func (p *VipCustomerDetailsStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.VipStatus = v
	}
	return nil
}

func (p *VipCustomerDetailsStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.VipPasstime = v
	}
	return nil
}

func (p *VipCustomerDetailsStruct) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.VipVerifytime = v
	}
	return nil
}

func (p *VipCustomerDetailsStruct) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.OldCustomer = v
	}
	return nil
}

func (p *VipCustomerDetailsStruct) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.NewCustomer_ = v
	}
	return nil
}

func (p *VipCustomerDetailsStruct) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Updatetime = v
	}
	return nil
}

func (p *VipCustomerDetailsStruct) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Remark = v
	}
	return nil
}

func (p *VipCustomerDetailsStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VipCustomerDetailsStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VipCustomerDetailsStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *VipCustomerDetailsStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err)
	}
	return err
}

func (p *VipCustomerDetailsStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:username: ", p), err)
	}
	return err
}

func (p *VipCustomerDetailsStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.email (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:email: ", p), err)
	}
	return err
}

func (p *VipCustomerDetailsStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("realname", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:realname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Realname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.realname (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:realname: ", p), err)
	}
	return err
}

func (p *VipCustomerDetailsStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:phone: ", p), err)
	}
	return err
}

func (p *VipCustomerDetailsStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scene_passtime", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:scene_passtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ScenePasstime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.scene_passtime (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:scene_passtime: ", p), err)
	}
	return err
}

func (p *VipCustomerDetailsStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vip_status", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:vip_status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VipStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vip_status (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:vip_status: ", p), err)
	}
	return err
}

func (p *VipCustomerDetailsStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vip_passtime", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:vip_passtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VipPasstime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vip_passtime (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:vip_passtime: ", p), err)
	}
	return err
}

func (p *VipCustomerDetailsStruct) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vip_verifytime", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:vip_verifytime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VipVerifytime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vip_verifytime (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:vip_verifytime: ", p), err)
	}
	return err
}

func (p *VipCustomerDetailsStruct) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("old_customer", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:old_customer: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OldCustomer)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.old_customer (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:old_customer: ", p), err)
	}
	return err
}

func (p *VipCustomerDetailsStruct) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("new_customer", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:new_customer: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NewCustomer_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.new_customer (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:new_customer: ", p), err)
	}
	return err
}

func (p *VipCustomerDetailsStruct) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updatetime", thrift.I32, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:updatetime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Updatetime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updatetime (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:updatetime: ", p), err)
	}
	return err
}

func (p *VipCustomerDetailsStruct) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("remark", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:remark: ", p), err)
	}
	if err := oprot.WriteString(string(p.Remark)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.remark (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:remark: ", p), err)
	}
	return err
}

func (p *VipCustomerDetailsStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VipCustomerDetailsStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - VipCustomerLogList
//  - TotalNum
//  - Msg
type VipCustomerLogListResponseStruct struct {
	Status             int32                       `thrift:"status,1" db:"status" json:"status"`
	VipCustomerLogList []*VipCustomerDetailsStruct `thrift:"VipCustomerLogList,2" db:"VipCustomerLogList" json:"VipCustomerLogList"`
	TotalNum           int32                       `thrift:"total_num,3" db:"total_num" json:"total_num"`
	Msg                string                      `thrift:"msg,4" db:"msg" json:"msg"`
}

func NewVipCustomerLogListResponseStruct() *VipCustomerLogListResponseStruct {
	return &VipCustomerLogListResponseStruct{}
}

func (p *VipCustomerLogListResponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *VipCustomerLogListResponseStruct) GetVipCustomerLogList() []*VipCustomerDetailsStruct {
	return p.VipCustomerLogList
}

func (p *VipCustomerLogListResponseStruct) GetTotalNum() int32 {
	return p.TotalNum
}

func (p *VipCustomerLogListResponseStruct) GetMsg() string {
	return p.Msg
}
func (p *VipCustomerLogListResponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VipCustomerLogListResponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *VipCustomerLogListResponseStruct) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*VipCustomerDetailsStruct, 0, size)
	p.VipCustomerLogList = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &VipCustomerDetailsStruct{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.VipCustomerLogList = append(p.VipCustomerLogList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *VipCustomerLogListResponseStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalNum = v
	}
	return nil
}

func (p *VipCustomerLogListResponseStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *VipCustomerLogListResponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VipCustomerLogListResponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VipCustomerLogListResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *VipCustomerLogListResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VipCustomerLogList", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:VipCustomerLogList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VipCustomerLogList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VipCustomerLogList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:VipCustomerLogList: ", p), err)
	}
	return err
}

func (p *VipCustomerLogListResponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_num", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total_num: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_num (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total_num: ", p), err)
	}
	return err
}

func (p *VipCustomerLogListResponseStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:msg: ", p), err)
	}
	return err
}

func (p *VipCustomerLogListResponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VipCustomerLogListResponseStruct(%+v)", *p)
}

type VipCustomerLogListThriftService interface {
	// Parameters:
	//  - RequestObj
	GetVipCustomerLogList(requestObj *VipCustomerLogListRequestStruct) (r *VipCustomerLogListResponseStruct, err error)
}

type VipCustomerLogListThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewVipCustomerLogListThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *VipCustomerLogListThriftServiceClient {
	return &VipCustomerLogListThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewVipCustomerLogListThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *VipCustomerLogListThriftServiceClient {
	return &VipCustomerLogListThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RequestObj
func (p *VipCustomerLogListThriftServiceClient) GetVipCustomerLogList(requestObj *VipCustomerLogListRequestStruct) (r *VipCustomerLogListResponseStruct, err error) {
	if err = p.sendGetVipCustomerLogList(requestObj); err != nil {
		return
	}
	return p.recvGetVipCustomerLogList()
}

func (p *VipCustomerLogListThriftServiceClient) sendGetVipCustomerLogList(requestObj *VipCustomerLogListRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getVipCustomerLogList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := VipCustomerLogListThriftServiceGetVipCustomerLogListArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VipCustomerLogListThriftServiceClient) recvGetVipCustomerLogList() (value *VipCustomerLogListResponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getVipCustomerLogList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getVipCustomerLogList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getVipCustomerLogList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error2 error
		error2, err = error1.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error2
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getVipCustomerLogList failed: invalid message type")
		return
	}
	result := VipCustomerLogListThriftServiceGetVipCustomerLogListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type VipCustomerLogListThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      VipCustomerLogListThriftService
}

func (p *VipCustomerLogListThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *VipCustomerLogListThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *VipCustomerLogListThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewVipCustomerLogListThriftServiceProcessor(handler VipCustomerLogListThriftService) *VipCustomerLogListThriftServiceProcessor {

	self3 := &VipCustomerLogListThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self3.processorMap["getVipCustomerLogList"] = &vipCustomerLogListThriftServiceProcessorGetVipCustomerLogList{handler: handler}
	return self3
}

func (p *VipCustomerLogListThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x4

}

type vipCustomerLogListThriftServiceProcessorGetVipCustomerLogList struct {
	handler VipCustomerLogListThriftService
}

func (p *vipCustomerLogListThriftServiceProcessorGetVipCustomerLogList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VipCustomerLogListThriftServiceGetVipCustomerLogListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getVipCustomerLogList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := VipCustomerLogListThriftServiceGetVipCustomerLogListResult{}
	var retval *VipCustomerLogListResponseStruct
	var err2 error
	if retval, err2 = p.handler.GetVipCustomerLogList(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVipCustomerLogList: "+err2.Error())
		oprot.WriteMessageBegin("getVipCustomerLogList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getVipCustomerLogList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type VipCustomerLogListThriftServiceGetVipCustomerLogListArgs struct {
	RequestObj *VipCustomerLogListRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewVipCustomerLogListThriftServiceGetVipCustomerLogListArgs() *VipCustomerLogListThriftServiceGetVipCustomerLogListArgs {
	return &VipCustomerLogListThriftServiceGetVipCustomerLogListArgs{}
}

var VipCustomerLogListThriftServiceGetVipCustomerLogListArgs_RequestObj_DEFAULT *VipCustomerLogListRequestStruct

func (p *VipCustomerLogListThriftServiceGetVipCustomerLogListArgs) GetRequestObj() *VipCustomerLogListRequestStruct {
	if !p.IsSetRequestObj() {
		return VipCustomerLogListThriftServiceGetVipCustomerLogListArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *VipCustomerLogListThriftServiceGetVipCustomerLogListArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *VipCustomerLogListThriftServiceGetVipCustomerLogListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VipCustomerLogListThriftServiceGetVipCustomerLogListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &VipCustomerLogListRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *VipCustomerLogListThriftServiceGetVipCustomerLogListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getVipCustomerLogList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VipCustomerLogListThriftServiceGetVipCustomerLogListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *VipCustomerLogListThriftServiceGetVipCustomerLogListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VipCustomerLogListThriftServiceGetVipCustomerLogListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type VipCustomerLogListThriftServiceGetVipCustomerLogListResult struct {
	Success *VipCustomerLogListResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewVipCustomerLogListThriftServiceGetVipCustomerLogListResult() *VipCustomerLogListThriftServiceGetVipCustomerLogListResult {
	return &VipCustomerLogListThriftServiceGetVipCustomerLogListResult{}
}

var VipCustomerLogListThriftServiceGetVipCustomerLogListResult_Success_DEFAULT *VipCustomerLogListResponseStruct

func (p *VipCustomerLogListThriftServiceGetVipCustomerLogListResult) GetSuccess() *VipCustomerLogListResponseStruct {
	if !p.IsSetSuccess() {
		return VipCustomerLogListThriftServiceGetVipCustomerLogListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VipCustomerLogListThriftServiceGetVipCustomerLogListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VipCustomerLogListThriftServiceGetVipCustomerLogListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VipCustomerLogListThriftServiceGetVipCustomerLogListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &VipCustomerLogListResponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *VipCustomerLogListThriftServiceGetVipCustomerLogListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getVipCustomerLogList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VipCustomerLogListThriftServiceGetVipCustomerLogListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *VipCustomerLogListThriftServiceGetVipCustomerLogListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VipCustomerLogListThriftServiceGetVipCustomerLogListResult(%+v)", *p)
}
