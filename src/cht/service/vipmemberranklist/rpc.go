// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package vipmemberranklist

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - Type
//  - Keywords
//  - LimitOffset
//  - LimitNum
//  - ChengHuiTongTraceLog
type VipMemberRankListRequestStruct struct {
	Type                 int32  `thrift:"type,1" db:"type" json:"type"`
	Keywords             string `thrift:"keywords,2" db:"keywords" json:"keywords"`
	LimitOffset          int32  `thrift:"limitOffset,3" db:"limitOffset" json:"limitOffset"`
	LimitNum             int32  `thrift:"limitNum,4" db:"limitNum" json:"limitNum"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,5" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewVipMemberRankListRequestStruct() *VipMemberRankListRequestStruct {
//   return &VipMemberRankListRequestStruct{}
// }

func (p *VipMemberRankListRequestStruct) GetType() int32 {
	return p.Type
}

func (p *VipMemberRankListRequestStruct) GetKeywords() string {
	return p.Keywords
}

func (p *VipMemberRankListRequestStruct) GetLimitOffset() int32 {
	return p.LimitOffset
}

func (p *VipMemberRankListRequestStruct) GetLimitNum() int32 {
	return p.LimitNum
}

func (p *VipMemberRankListRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *VipMemberRankListRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VipMemberRankListRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *VipMemberRankListRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Keywords = v
	}
	return nil
}

func (p *VipMemberRankListRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LimitOffset = v
	}
	return nil
}

func (p *VipMemberRankListRequestStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.LimitNum = v
	}
	return nil
}

func (p *VipMemberRankListRequestStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *VipMemberRankListRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VipMemberRankListRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VipMemberRankListRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *VipMemberRankListRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keywords", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keywords: ", p), err)
	}
	if err := oprot.WriteString(string(p.Keywords)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keywords (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keywords: ", p), err)
	}
	return err
}

func (p *VipMemberRankListRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limitOffset", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limitOffset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitOffset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limitOffset (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limitOffset: ", p), err)
	}
	return err
}

func (p *VipMemberRankListRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limitNum", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:limitNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limitNum (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:limitNum: ", p), err)
	}
	return err
}

func (p *VipMemberRankListRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *VipMemberRankListRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VipMemberRankListRequestStruct(%+v)", *p)
}

// Attributes:
//  - UserID
//  - Money
//  - MoneyFreeze
//  - MoneyUsable
//  - MoneyWait
//  - CashTime
//  - ReturnMoney
//  - VipLevel
//  - VipWaitMoney
//  - HsreturnMoney
//  - HsmoneyFreeze
//  - HsmoneyWait
//  - Username
//  - Realname
//  - Addtime
type VipMemberRankDetailsStruct struct {
	UserID        int32  `thrift:"user_id,1" db:"user_id" json:"user_id"`
	Money         string `thrift:"money,2" db:"money" json:"money"`
	MoneyFreeze   string `thrift:"money_freeze,3" db:"money_freeze" json:"money_freeze"`
	MoneyUsable   string `thrift:"money_usable,4" db:"money_usable" json:"money_usable"`
	MoneyWait     string `thrift:"money_wait,5" db:"money_wait" json:"money_wait"`
	CashTime      int32  `thrift:"cash_time,6" db:"cash_time" json:"cash_time"`
	ReturnMoney   string `thrift:"return_money,7" db:"return_money" json:"return_money"`
	VipLevel      int32  `thrift:"vip_level,8" db:"vip_level" json:"vip_level"`
	VipWaitMoney  string `thrift:"vip_wait_money,9" db:"vip_wait_money" json:"vip_wait_money"`
	HsreturnMoney string `thrift:"hsreturn_money,10" db:"hsreturn_money" json:"hsreturn_money"`
	HsmoneyFreeze string `thrift:"hsmoney_freeze,11" db:"hsmoney_freeze" json:"hsmoney_freeze"`
	HsmoneyWait   string `thrift:"hsmoney_wait,12" db:"hsmoney_wait" json:"hsmoney_wait"`
	Username      string `thrift:"username,13" db:"username" json:"username"`
	Realname      string `thrift:"realname,14" db:"realname" json:"realname"`
	Addtime       int32  `thrift:"addtime,15" db:"addtime" json:"addtime"`
}

func NewVipMemberRankDetailsStruct() *VipMemberRankDetailsStruct {
	return &VipMemberRankDetailsStruct{}
}

func (p *VipMemberRankDetailsStruct) GetUserID() int32 {
	return p.UserID
}

func (p *VipMemberRankDetailsStruct) GetMoney() string {
	return p.Money
}

func (p *VipMemberRankDetailsStruct) GetMoneyFreeze() string {
	return p.MoneyFreeze
}

func (p *VipMemberRankDetailsStruct) GetMoneyUsable() string {
	return p.MoneyUsable
}

func (p *VipMemberRankDetailsStruct) GetMoneyWait() string {
	return p.MoneyWait
}

func (p *VipMemberRankDetailsStruct) GetCashTime() int32 {
	return p.CashTime
}

func (p *VipMemberRankDetailsStruct) GetReturnMoney() string {
	return p.ReturnMoney
}

func (p *VipMemberRankDetailsStruct) GetVipLevel() int32 {
	return p.VipLevel
}

func (p *VipMemberRankDetailsStruct) GetVipWaitMoney() string {
	return p.VipWaitMoney
}

func (p *VipMemberRankDetailsStruct) GetHsreturnMoney() string {
	return p.HsreturnMoney
}

func (p *VipMemberRankDetailsStruct) GetHsmoneyFreeze() string {
	return p.HsmoneyFreeze
}

func (p *VipMemberRankDetailsStruct) GetHsmoneyWait() string {
	return p.HsmoneyWait
}

func (p *VipMemberRankDetailsStruct) GetUsername() string {
	return p.Username
}

func (p *VipMemberRankDetailsStruct) GetRealname() string {
	return p.Realname
}

func (p *VipMemberRankDetailsStruct) GetAddtime() int32 {
	return p.Addtime
}
func (p *VipMemberRankDetailsStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Money = v
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MoneyFreeze = v
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MoneyUsable = v
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.MoneyWait = v
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CashTime = v
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ReturnMoney = v
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.VipLevel = v
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.VipWaitMoney = v
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.HsreturnMoney = v
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.HsmoneyFreeze = v
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.HsmoneyWait = v
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Realname = v
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Addtime = v
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VipMemberRankDetailsStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VipMemberRankDetailsStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err)
	}
	return err
}

func (p *VipMemberRankDetailsStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("money", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:money: ", p), err)
	}
	if err := oprot.WriteString(string(p.Money)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.money (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:money: ", p), err)
	}
	return err
}

func (p *VipMemberRankDetailsStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("money_freeze", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:money_freeze: ", p), err)
	}
	if err := oprot.WriteString(string(p.MoneyFreeze)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.money_freeze (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:money_freeze: ", p), err)
	}
	return err
}

func (p *VipMemberRankDetailsStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("money_usable", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:money_usable: ", p), err)
	}
	if err := oprot.WriteString(string(p.MoneyUsable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.money_usable (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:money_usable: ", p), err)
	}
	return err
}

func (p *VipMemberRankDetailsStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("money_wait", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:money_wait: ", p), err)
	}
	if err := oprot.WriteString(string(p.MoneyWait)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.money_wait (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:money_wait: ", p), err)
	}
	return err
}

func (p *VipMemberRankDetailsStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cash_time", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:cash_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CashTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cash_time (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:cash_time: ", p), err)
	}
	return err
}

func (p *VipMemberRankDetailsStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("return_money", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:return_money: ", p), err)
	}
	if err := oprot.WriteString(string(p.ReturnMoney)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.return_money (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:return_money: ", p), err)
	}
	return err
}

func (p *VipMemberRankDetailsStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vip_level", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:vip_level: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.VipLevel)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vip_level (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:vip_level: ", p), err)
	}
	return err
}

func (p *VipMemberRankDetailsStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vip_wait_money", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:vip_wait_money: ", p), err)
	}
	if err := oprot.WriteString(string(p.VipWaitMoney)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.vip_wait_money (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:vip_wait_money: ", p), err)
	}
	return err
}

func (p *VipMemberRankDetailsStruct) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hsreturn_money", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:hsreturn_money: ", p), err)
	}
	if err := oprot.WriteString(string(p.HsreturnMoney)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hsreturn_money (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:hsreturn_money: ", p), err)
	}
	return err
}

func (p *VipMemberRankDetailsStruct) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hsmoney_freeze", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:hsmoney_freeze: ", p), err)
	}
	if err := oprot.WriteString(string(p.HsmoneyFreeze)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hsmoney_freeze (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:hsmoney_freeze: ", p), err)
	}
	return err
}

func (p *VipMemberRankDetailsStruct) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hsmoney_wait", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:hsmoney_wait: ", p), err)
	}
	if err := oprot.WriteString(string(p.HsmoneyWait)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hsmoney_wait (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:hsmoney_wait: ", p), err)
	}
	return err
}

func (p *VipMemberRankDetailsStruct) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:username: ", p), err)
	}
	return err
}

func (p *VipMemberRankDetailsStruct) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("realname", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:realname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Realname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.realname (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:realname: ", p), err)
	}
	return err
}

func (p *VipMemberRankDetailsStruct) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addtime", thrift.I32, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:addtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Addtime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addtime (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:addtime: ", p), err)
	}
	return err
}

func (p *VipMemberRankDetailsStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VipMemberRankDetailsStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - VipMemberRankList
//  - TotalNum
//  - Msg
type VipMemberRankListReponseStruct struct {
	Status            int32                         `thrift:"status,1" db:"status" json:"status"`
	VipMemberRankList []*VipMemberRankDetailsStruct `thrift:"VipMemberRankList,2" db:"VipMemberRankList" json:"VipMemberRankList"`
	TotalNum          int32                         `thrift:"total_num,3" db:"total_num" json:"total_num"`
	Msg               string                        `thrift:"msg,4" db:"msg" json:"msg"`
}

func NewVipMemberRankListReponseStruct() *VipMemberRankListReponseStruct {
	return &VipMemberRankListReponseStruct{}
}

func (p *VipMemberRankListReponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *VipMemberRankListReponseStruct) GetVipMemberRankList() []*VipMemberRankDetailsStruct {
	return p.VipMemberRankList
}

func (p *VipMemberRankListReponseStruct) GetTotalNum() int32 {
	return p.TotalNum
}

func (p *VipMemberRankListReponseStruct) GetMsg() string {
	return p.Msg
}
func (p *VipMemberRankListReponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VipMemberRankListReponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *VipMemberRankListReponseStruct) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*VipMemberRankDetailsStruct, 0, size)
	p.VipMemberRankList = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &VipMemberRankDetailsStruct{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.VipMemberRankList = append(p.VipMemberRankList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *VipMemberRankListReponseStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalNum = v
	}
	return nil
}

func (p *VipMemberRankListReponseStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *VipMemberRankListReponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VipMemberRankListReponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VipMemberRankListReponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *VipMemberRankListReponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VipMemberRankList", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:VipMemberRankList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VipMemberRankList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VipMemberRankList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:VipMemberRankList: ", p), err)
	}
	return err
}

func (p *VipMemberRankListReponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_num", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total_num: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_num (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total_num: ", p), err)
	}
	return err
}

func (p *VipMemberRankListReponseStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:msg: ", p), err)
	}
	return err
}

func (p *VipMemberRankListReponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VipMemberRankListReponseStruct(%+v)", *p)
}

type VipMemberRankListThriftService interface {
	// Parameters:
	//  - RequestObj
	GetVipMemberRankList(requestObj *VipMemberRankListRequestStruct) (r *VipMemberRankListReponseStruct, err error)
}

type VipMemberRankListThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewVipMemberRankListThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *VipMemberRankListThriftServiceClient {
	return &VipMemberRankListThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewVipMemberRankListThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *VipMemberRankListThriftServiceClient {
	return &VipMemberRankListThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RequestObj
func (p *VipMemberRankListThriftServiceClient) GetVipMemberRankList(requestObj *VipMemberRankListRequestStruct) (r *VipMemberRankListReponseStruct, err error) {
	if err = p.sendGetVipMemberRankList(requestObj); err != nil {
		return
	}
	return p.recvGetVipMemberRankList()
}

func (p *VipMemberRankListThriftServiceClient) sendGetVipMemberRankList(requestObj *VipMemberRankListRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getVipMemberRankList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := VipMemberRankListThriftServiceGetVipMemberRankListArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *VipMemberRankListThriftServiceClient) recvGetVipMemberRankList() (value *VipMemberRankListReponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getVipMemberRankList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getVipMemberRankList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getVipMemberRankList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error2 error
		error2, err = error1.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error2
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getVipMemberRankList failed: invalid message type")
		return
	}
	result := VipMemberRankListThriftServiceGetVipMemberRankListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type VipMemberRankListThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      VipMemberRankListThriftService
}

func (p *VipMemberRankListThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *VipMemberRankListThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *VipMemberRankListThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewVipMemberRankListThriftServiceProcessor(handler VipMemberRankListThriftService) *VipMemberRankListThriftServiceProcessor {

	self3 := &VipMemberRankListThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self3.processorMap["getVipMemberRankList"] = &vipMemberRankListThriftServiceProcessorGetVipMemberRankList{handler: handler}
	return self3
}

func (p *VipMemberRankListThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x4

}

type vipMemberRankListThriftServiceProcessorGetVipMemberRankList struct {
	handler VipMemberRankListThriftService
}

func (p *vipMemberRankListThriftServiceProcessorGetVipMemberRankList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VipMemberRankListThriftServiceGetVipMemberRankListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getVipMemberRankList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := VipMemberRankListThriftServiceGetVipMemberRankListResult{}
	var retval *VipMemberRankListReponseStruct
	var err2 error
	if retval, err2 = p.handler.GetVipMemberRankList(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVipMemberRankList: "+err2.Error())
		oprot.WriteMessageBegin("getVipMemberRankList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getVipMemberRankList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type VipMemberRankListThriftServiceGetVipMemberRankListArgs struct {
	RequestObj *VipMemberRankListRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewVipMemberRankListThriftServiceGetVipMemberRankListArgs() *VipMemberRankListThriftServiceGetVipMemberRankListArgs {
	return &VipMemberRankListThriftServiceGetVipMemberRankListArgs{}
}

var VipMemberRankListThriftServiceGetVipMemberRankListArgs_RequestObj_DEFAULT *VipMemberRankListRequestStruct

func (p *VipMemberRankListThriftServiceGetVipMemberRankListArgs) GetRequestObj() *VipMemberRankListRequestStruct {
	if !p.IsSetRequestObj() {
		return VipMemberRankListThriftServiceGetVipMemberRankListArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *VipMemberRankListThriftServiceGetVipMemberRankListArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *VipMemberRankListThriftServiceGetVipMemberRankListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VipMemberRankListThriftServiceGetVipMemberRankListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &VipMemberRankListRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *VipMemberRankListThriftServiceGetVipMemberRankListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getVipMemberRankList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VipMemberRankListThriftServiceGetVipMemberRankListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *VipMemberRankListThriftServiceGetVipMemberRankListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VipMemberRankListThriftServiceGetVipMemberRankListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type VipMemberRankListThriftServiceGetVipMemberRankListResult struct {
	Success *VipMemberRankListReponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewVipMemberRankListThriftServiceGetVipMemberRankListResult() *VipMemberRankListThriftServiceGetVipMemberRankListResult {
	return &VipMemberRankListThriftServiceGetVipMemberRankListResult{}
}

var VipMemberRankListThriftServiceGetVipMemberRankListResult_Success_DEFAULT *VipMemberRankListReponseStruct

func (p *VipMemberRankListThriftServiceGetVipMemberRankListResult) GetSuccess() *VipMemberRankListReponseStruct {
	if !p.IsSetSuccess() {
		return VipMemberRankListThriftServiceGetVipMemberRankListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VipMemberRankListThriftServiceGetVipMemberRankListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VipMemberRankListThriftServiceGetVipMemberRankListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VipMemberRankListThriftServiceGetVipMemberRankListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &VipMemberRankListReponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *VipMemberRankListThriftServiceGetVipMemberRankListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getVipMemberRankList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VipMemberRankListThriftServiceGetVipMemberRankListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *VipMemberRankListThriftServiceGetVipMemberRankListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VipMemberRankListThriftServiceGetVipMemberRankListResult(%+v)", *p)
}
