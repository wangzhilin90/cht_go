// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package phoneattestationthriftservice

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - Phone
//  - ChengHuiTongTraceLog
type CheckPhoneUseRequestStruct struct {
  Phone string `thrift:"phone,1" db:"phone" json:"phone"`
  ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,2" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

func NewCheckPhoneUseRequestStruct() *CheckPhoneUseRequestStruct {
  return &CheckPhoneUseRequestStruct{}
}


func (p *CheckPhoneUseRequestStruct) GetPhone() string {
  return p.Phone
}

func (p *CheckPhoneUseRequestStruct) GetChengHuiTongTraceLog() string {
  return p.ChengHuiTongTraceLog
}
func (p *CheckPhoneUseRequestStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CheckPhoneUseRequestStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *CheckPhoneUseRequestStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChengHuiTongTraceLog = v
}
  return nil
}

func (p *CheckPhoneUseRequestStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CheckPhoneUseRequestStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CheckPhoneUseRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phone: ", p), err) }
  return err
}

func (p *CheckPhoneUseRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chengHuiTongTraceLog: ", p), err) }
  if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chengHuiTongTraceLog: ", p), err) }
  return err
}

func (p *CheckPhoneUseRequestStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckPhoneUseRequestStruct(%+v)", *p)
}

// Attributes:
//  - Hsid
//  - ChengHuiTongTraceLog
type GetUserIdByhsidRequestStruct struct {
  Hsid string `thrift:"hsid,1" db:"hsid" json:"hsid"`
  ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,2" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

func NewGetUserIdByhsidRequestStruct() *GetUserIdByhsidRequestStruct {
  return &GetUserIdByhsidRequestStruct{}
}


func (p *GetUserIdByhsidRequestStruct) GetHsid() string {
  return p.Hsid
}

func (p *GetUserIdByhsidRequestStruct) GetChengHuiTongTraceLog() string {
  return p.ChengHuiTongTraceLog
}
func (p *GetUserIdByhsidRequestStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetUserIdByhsidRequestStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hsid = v
}
  return nil
}

func (p *GetUserIdByhsidRequestStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChengHuiTongTraceLog = v
}
  return nil
}

func (p *GetUserIdByhsidRequestStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetUserIdByhsidRequestStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetUserIdByhsidRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hsid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hsid: ", p), err) }
  if err := oprot.WriteString(string(p.Hsid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hsid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hsid: ", p), err) }
  return err
}

func (p *GetUserIdByhsidRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chengHuiTongTraceLog: ", p), err) }
  if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chengHuiTongTraceLog: ", p), err) }
  return err
}

func (p *GetUserIdByhsidRequestStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetUserIdByhsidRequestStruct(%+v)", *p)
}

// Attributes:
//  - Phone
//  - UserID
//  - ChengHuiTongTraceLog
type UpdatePhoneRequestStruct struct {
  Phone string `thrift:"phone,1" db:"phone" json:"phone"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,3" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

func NewUpdatePhoneRequestStruct() *UpdatePhoneRequestStruct {
  return &UpdatePhoneRequestStruct{}
}


func (p *UpdatePhoneRequestStruct) GetPhone() string {
  return p.Phone
}

func (p *UpdatePhoneRequestStruct) GetUserID() int32 {
  return p.UserID
}

func (p *UpdatePhoneRequestStruct) GetChengHuiTongTraceLog() string {
  return p.ChengHuiTongTraceLog
}
func (p *UpdatePhoneRequestStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdatePhoneRequestStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *UpdatePhoneRequestStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UpdatePhoneRequestStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChengHuiTongTraceLog = v
}
  return nil
}

func (p *UpdatePhoneRequestStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdatePhoneRequestStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdatePhoneRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phone: ", p), err) }
  return err
}

func (p *UpdatePhoneRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *UpdatePhoneRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chengHuiTongTraceLog: ", p), err) }
  if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chengHuiTongTraceLog: ", p), err) }
  return err
}

func (p *UpdatePhoneRequestStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdatePhoneRequestStruct(%+v)", *p)
}

type PhoneAttestationThriftService interface {
  // Parameters:
  //  - RequestObj
  CheckPhoneUse(requestObj *CheckPhoneUseRequestStruct) (r string, err error)
  // Parameters:
  //  - RequestObj
  GetUserIdByhsid(requestObj *GetUserIdByhsidRequestStruct) (r int32, err error)
  // Parameters:
  //  - RequestObj
  UpdatePhone(requestObj *UpdatePhoneRequestStruct) (r string, err error)
}

type PhoneAttestationThriftServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewPhoneAttestationThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PhoneAttestationThriftServiceClient {
  return &PhoneAttestationThriftServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewPhoneAttestationThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PhoneAttestationThriftServiceClient {
  return &PhoneAttestationThriftServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - RequestObj
func (p *PhoneAttestationThriftServiceClient) CheckPhoneUse(requestObj *CheckPhoneUseRequestStruct) (r string, err error) {
  if err = p.sendCheckPhoneUse(requestObj); err != nil { return }
  return p.recvCheckPhoneUse()
}

func (p *PhoneAttestationThriftServiceClient) sendCheckPhoneUse(requestObj *CheckPhoneUseRequestStruct)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("checkPhoneUse", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PhoneAttestationThriftServiceCheckPhoneUseArgs{
  RequestObj : requestObj,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PhoneAttestationThriftServiceClient) recvCheckPhoneUse() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "checkPhoneUse" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "checkPhoneUse failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "checkPhoneUse failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "checkPhoneUse failed: invalid message type")
    return
  }
  result := PhoneAttestationThriftServiceCheckPhoneUseResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - RequestObj
func (p *PhoneAttestationThriftServiceClient) GetUserIdByhsid(requestObj *GetUserIdByhsidRequestStruct) (r int32, err error) {
  if err = p.sendGetUserIdByhsid(requestObj); err != nil { return }
  return p.recvGetUserIdByhsid()
}

func (p *PhoneAttestationThriftServiceClient) sendGetUserIdByhsid(requestObj *GetUserIdByhsidRequestStruct)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUserIdByhsid", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PhoneAttestationThriftServiceGetUserIdByhsidArgs{
  RequestObj : requestObj,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PhoneAttestationThriftServiceClient) recvGetUserIdByhsid() (value int32, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUserIdByhsid" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserIdByhsid failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserIdByhsid failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserIdByhsid failed: invalid message type")
    return
  }
  result := PhoneAttestationThriftServiceGetUserIdByhsidResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - RequestObj
func (p *PhoneAttestationThriftServiceClient) UpdatePhone(requestObj *UpdatePhoneRequestStruct) (r string, err error) {
  if err = p.sendUpdatePhone(requestObj); err != nil { return }
  return p.recvUpdatePhone()
}

func (p *PhoneAttestationThriftServiceClient) sendUpdatePhone(requestObj *UpdatePhoneRequestStruct)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updatePhone", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PhoneAttestationThriftServiceUpdatePhoneArgs{
  RequestObj : requestObj,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PhoneAttestationThriftServiceClient) recvUpdatePhone() (value string, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updatePhone" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updatePhone failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updatePhone failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updatePhone failed: invalid message type")
    return
  }
  result := PhoneAttestationThriftServiceUpdatePhoneResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type PhoneAttestationThriftServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler PhoneAttestationThriftService
}

func (p *PhoneAttestationThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *PhoneAttestationThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *PhoneAttestationThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewPhoneAttestationThriftServiceProcessor(handler PhoneAttestationThriftService) *PhoneAttestationThriftServiceProcessor {

  self6 := &PhoneAttestationThriftServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self6.processorMap["checkPhoneUse"] = &phoneAttestationThriftServiceProcessorCheckPhoneUse{handler:handler}
  self6.processorMap["getUserIdByhsid"] = &phoneAttestationThriftServiceProcessorGetUserIdByhsid{handler:handler}
  self6.processorMap["updatePhone"] = &phoneAttestationThriftServiceProcessorUpdatePhone{handler:handler}
return self6
}

func (p *PhoneAttestationThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x7.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x7

}

type phoneAttestationThriftServiceProcessorCheckPhoneUse struct {
  handler PhoneAttestationThriftService
}

func (p *phoneAttestationThriftServiceProcessorCheckPhoneUse) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PhoneAttestationThriftServiceCheckPhoneUseArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("checkPhoneUse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PhoneAttestationThriftServiceCheckPhoneUseResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.CheckPhoneUse(args.RequestObj); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkPhoneUse: " + err2.Error())
    oprot.WriteMessageBegin("checkPhoneUse", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("checkPhoneUse", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type phoneAttestationThriftServiceProcessorGetUserIdByhsid struct {
  handler PhoneAttestationThriftService
}

func (p *phoneAttestationThriftServiceProcessorGetUserIdByhsid) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PhoneAttestationThriftServiceGetUserIdByhsidArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserIdByhsid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PhoneAttestationThriftServiceGetUserIdByhsidResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.GetUserIdByhsid(args.RequestObj); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserIdByhsid: " + err2.Error())
    oprot.WriteMessageBegin("getUserIdByhsid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getUserIdByhsid", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type phoneAttestationThriftServiceProcessorUpdatePhone struct {
  handler PhoneAttestationThriftService
}

func (p *phoneAttestationThriftServiceProcessorUpdatePhone) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PhoneAttestationThriftServiceUpdatePhoneArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updatePhone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PhoneAttestationThriftServiceUpdatePhoneResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.UpdatePhone(args.RequestObj); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updatePhone: " + err2.Error())
    oprot.WriteMessageBegin("updatePhone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updatePhone", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type PhoneAttestationThriftServiceCheckPhoneUseArgs struct {
  RequestObj *CheckPhoneUseRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewPhoneAttestationThriftServiceCheckPhoneUseArgs() *PhoneAttestationThriftServiceCheckPhoneUseArgs {
  return &PhoneAttestationThriftServiceCheckPhoneUseArgs{}
}

var PhoneAttestationThriftServiceCheckPhoneUseArgs_RequestObj_DEFAULT *CheckPhoneUseRequestStruct
func (p *PhoneAttestationThriftServiceCheckPhoneUseArgs) GetRequestObj() *CheckPhoneUseRequestStruct {
  if !p.IsSetRequestObj() {
    return PhoneAttestationThriftServiceCheckPhoneUseArgs_RequestObj_DEFAULT
  }
return p.RequestObj
}
func (p *PhoneAttestationThriftServiceCheckPhoneUseArgs) IsSetRequestObj() bool {
  return p.RequestObj != nil
}

func (p *PhoneAttestationThriftServiceCheckPhoneUseArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhoneAttestationThriftServiceCheckPhoneUseArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestObj = &CheckPhoneUseRequestStruct{}
  if err := p.RequestObj.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
  }
  return nil
}

func (p *PhoneAttestationThriftServiceCheckPhoneUseArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkPhoneUse_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhoneAttestationThriftServiceCheckPhoneUseArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err) }
  if err := p.RequestObj.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err) }
  return err
}

func (p *PhoneAttestationThriftServiceCheckPhoneUseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhoneAttestationThriftServiceCheckPhoneUseArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PhoneAttestationThriftServiceCheckPhoneUseResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPhoneAttestationThriftServiceCheckPhoneUseResult() *PhoneAttestationThriftServiceCheckPhoneUseResult {
  return &PhoneAttestationThriftServiceCheckPhoneUseResult{}
}

var PhoneAttestationThriftServiceCheckPhoneUseResult_Success_DEFAULT string
func (p *PhoneAttestationThriftServiceCheckPhoneUseResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return PhoneAttestationThriftServiceCheckPhoneUseResult_Success_DEFAULT
  }
return *p.Success
}
func (p *PhoneAttestationThriftServiceCheckPhoneUseResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PhoneAttestationThriftServiceCheckPhoneUseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhoneAttestationThriftServiceCheckPhoneUseResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *PhoneAttestationThriftServiceCheckPhoneUseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkPhoneUse_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhoneAttestationThriftServiceCheckPhoneUseResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PhoneAttestationThriftServiceCheckPhoneUseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhoneAttestationThriftServiceCheckPhoneUseResult(%+v)", *p)
}

// Attributes:
//  - RequestObj
type PhoneAttestationThriftServiceGetUserIdByhsidArgs struct {
  RequestObj *GetUserIdByhsidRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewPhoneAttestationThriftServiceGetUserIdByhsidArgs() *PhoneAttestationThriftServiceGetUserIdByhsidArgs {
  return &PhoneAttestationThriftServiceGetUserIdByhsidArgs{}
}

var PhoneAttestationThriftServiceGetUserIdByhsidArgs_RequestObj_DEFAULT *GetUserIdByhsidRequestStruct
func (p *PhoneAttestationThriftServiceGetUserIdByhsidArgs) GetRequestObj() *GetUserIdByhsidRequestStruct {
  if !p.IsSetRequestObj() {
    return PhoneAttestationThriftServiceGetUserIdByhsidArgs_RequestObj_DEFAULT
  }
return p.RequestObj
}
func (p *PhoneAttestationThriftServiceGetUserIdByhsidArgs) IsSetRequestObj() bool {
  return p.RequestObj != nil
}

func (p *PhoneAttestationThriftServiceGetUserIdByhsidArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhoneAttestationThriftServiceGetUserIdByhsidArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestObj = &GetUserIdByhsidRequestStruct{}
  if err := p.RequestObj.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
  }
  return nil
}

func (p *PhoneAttestationThriftServiceGetUserIdByhsidArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserIdByhsid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhoneAttestationThriftServiceGetUserIdByhsidArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err) }
  if err := p.RequestObj.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err) }
  return err
}

func (p *PhoneAttestationThriftServiceGetUserIdByhsidArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhoneAttestationThriftServiceGetUserIdByhsidArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PhoneAttestationThriftServiceGetUserIdByhsidResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPhoneAttestationThriftServiceGetUserIdByhsidResult() *PhoneAttestationThriftServiceGetUserIdByhsidResult {
  return &PhoneAttestationThriftServiceGetUserIdByhsidResult{}
}

var PhoneAttestationThriftServiceGetUserIdByhsidResult_Success_DEFAULT int32
func (p *PhoneAttestationThriftServiceGetUserIdByhsidResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return PhoneAttestationThriftServiceGetUserIdByhsidResult_Success_DEFAULT
  }
return *p.Success
}
func (p *PhoneAttestationThriftServiceGetUserIdByhsidResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PhoneAttestationThriftServiceGetUserIdByhsidResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhoneAttestationThriftServiceGetUserIdByhsidResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *PhoneAttestationThriftServiceGetUserIdByhsidResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserIdByhsid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhoneAttestationThriftServiceGetUserIdByhsidResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PhoneAttestationThriftServiceGetUserIdByhsidResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhoneAttestationThriftServiceGetUserIdByhsidResult(%+v)", *p)
}

// Attributes:
//  - RequestObj
type PhoneAttestationThriftServiceUpdatePhoneArgs struct {
  RequestObj *UpdatePhoneRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewPhoneAttestationThriftServiceUpdatePhoneArgs() *PhoneAttestationThriftServiceUpdatePhoneArgs {
  return &PhoneAttestationThriftServiceUpdatePhoneArgs{}
}

var PhoneAttestationThriftServiceUpdatePhoneArgs_RequestObj_DEFAULT *UpdatePhoneRequestStruct
func (p *PhoneAttestationThriftServiceUpdatePhoneArgs) GetRequestObj() *UpdatePhoneRequestStruct {
  if !p.IsSetRequestObj() {
    return PhoneAttestationThriftServiceUpdatePhoneArgs_RequestObj_DEFAULT
  }
return p.RequestObj
}
func (p *PhoneAttestationThriftServiceUpdatePhoneArgs) IsSetRequestObj() bool {
  return p.RequestObj != nil
}

func (p *PhoneAttestationThriftServiceUpdatePhoneArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhoneAttestationThriftServiceUpdatePhoneArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestObj = &UpdatePhoneRequestStruct{}
  if err := p.RequestObj.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
  }
  return nil
}

func (p *PhoneAttestationThriftServiceUpdatePhoneArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updatePhone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhoneAttestationThriftServiceUpdatePhoneArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err) }
  if err := p.RequestObj.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err) }
  return err
}

func (p *PhoneAttestationThriftServiceUpdatePhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhoneAttestationThriftServiceUpdatePhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PhoneAttestationThriftServiceUpdatePhoneResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPhoneAttestationThriftServiceUpdatePhoneResult() *PhoneAttestationThriftServiceUpdatePhoneResult {
  return &PhoneAttestationThriftServiceUpdatePhoneResult{}
}

var PhoneAttestationThriftServiceUpdatePhoneResult_Success_DEFAULT string
func (p *PhoneAttestationThriftServiceUpdatePhoneResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return PhoneAttestationThriftServiceUpdatePhoneResult_Success_DEFAULT
  }
return *p.Success
}
func (p *PhoneAttestationThriftServiceUpdatePhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PhoneAttestationThriftServiceUpdatePhoneResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhoneAttestationThriftServiceUpdatePhoneResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *PhoneAttestationThriftServiceUpdatePhoneResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updatePhone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhoneAttestationThriftServiceUpdatePhoneResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PhoneAttestationThriftServiceUpdatePhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhoneAttestationThriftServiceUpdatePhoneResult(%+v)", *p)
}


