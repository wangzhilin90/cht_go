// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package userrechargerecordlist

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - UserID
//  - StartTime
//  - EndTime
//  - QueryTime
//  - RechargeStatus
//  - LimitOffset
//  - LimitNum
//  - ChengHuiTongTraceLog
type UserRechargeRecordListRequestStruct struct {
  UserID int32 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  StartTime int32 `thrift:"start_time,2" db:"start_time" json:"start_time"`
  EndTime int32 `thrift:"end_time,3" db:"end_time" json:"end_time"`
  QueryTime int32 `thrift:"query_time,4" db:"query_time" json:"query_time"`
  RechargeStatus int32 `thrift:"recharge_status,5" db:"recharge_status" json:"recharge_status"`
  LimitOffset int32 `thrift:"limit_offset,6" db:"limit_offset" json:"limit_offset"`
  LimitNum int32 `thrift:"limit_num,7" db:"limit_num" json:"limit_num"`
  ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,8" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

func NewUserRechargeRecordListRequestStruct() *UserRechargeRecordListRequestStruct {
  return &UserRechargeRecordListRequestStruct{}
}


func (p *UserRechargeRecordListRequestStruct) GetUserID() int32 {
  return p.UserID
}

func (p *UserRechargeRecordListRequestStruct) GetStartTime() int32 {
  return p.StartTime
}

func (p *UserRechargeRecordListRequestStruct) GetEndTime() int32 {
  return p.EndTime
}

func (p *UserRechargeRecordListRequestStruct) GetQueryTime() int32 {
  return p.QueryTime
}

func (p *UserRechargeRecordListRequestStruct) GetRechargeStatus() int32 {
  return p.RechargeStatus
}

func (p *UserRechargeRecordListRequestStruct) GetLimitOffset() int32 {
  return p.LimitOffset
}

func (p *UserRechargeRecordListRequestStruct) GetLimitNum() int32 {
  return p.LimitNum
}

func (p *UserRechargeRecordListRequestStruct) GetChengHuiTongTraceLog() string {
  return p.ChengHuiTongTraceLog
}
func (p *UserRechargeRecordListRequestStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserRechargeRecordListRequestStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserRechargeRecordListRequestStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *UserRechargeRecordListRequestStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *UserRechargeRecordListRequestStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.QueryTime = v
}
  return nil
}

func (p *UserRechargeRecordListRequestStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RechargeStatus = v
}
  return nil
}

func (p *UserRechargeRecordListRequestStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LimitOffset = v
}
  return nil
}

func (p *UserRechargeRecordListRequestStruct)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LimitNum = v
}
  return nil
}

func (p *UserRechargeRecordListRequestStruct)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ChengHuiTongTraceLog = v
}
  return nil
}

func (p *UserRechargeRecordListRequestStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserRechargeRecordListRequestStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserRechargeRecordListRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *UserRechargeRecordListRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start_time: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start_time: ", p), err) }
  return err
}

func (p *UserRechargeRecordListRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("end_time", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:end_time: ", p), err) }
  if err := oprot.WriteI32(int32(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.end_time (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:end_time: ", p), err) }
  return err
}

func (p *UserRechargeRecordListRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query_time", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:query_time: ", p), err) }
  if err := oprot.WriteI32(int32(p.QueryTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query_time (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:query_time: ", p), err) }
  return err
}

func (p *UserRechargeRecordListRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recharge_status", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:recharge_status: ", p), err) }
  if err := oprot.WriteI32(int32(p.RechargeStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recharge_status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:recharge_status: ", p), err) }
  return err
}

func (p *UserRechargeRecordListRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit_offset", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:limit_offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.LimitOffset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit_offset (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:limit_offset: ", p), err) }
  return err
}

func (p *UserRechargeRecordListRequestStruct) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit_num", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:limit_num: ", p), err) }
  if err := oprot.WriteI32(int32(p.LimitNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit_num (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:limit_num: ", p), err) }
  return err
}

func (p *UserRechargeRecordListRequestStruct) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:chengHuiTongTraceLog: ", p), err) }
  if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:chengHuiTongTraceLog: ", p), err) }
  return err
}

func (p *UserRechargeRecordListRequestStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserRechargeRecordListRequestStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserID
//  - OrderSn
//  - Money
//  - Addtime
//  - Status
//  - DealTime
//  - PayType
//  - PayWay
//  - FailResult_
type UserRechargeRecordDetailsStruct struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  OrderSn string `thrift:"order_sn,3" db:"order_sn" json:"order_sn"`
  Money string `thrift:"money,4" db:"money" json:"money"`
  Addtime int32 `thrift:"addtime,5" db:"addtime" json:"addtime"`
  Status int32 `thrift:"status,6" db:"status" json:"status"`
  DealTime int32 `thrift:"deal_time,7" db:"deal_time" json:"deal_time"`
  PayType int32 `thrift:"pay_type,8" db:"pay_type" json:"pay_type"`
  PayWay int32 `thrift:"pay_way,9" db:"pay_way" json:"pay_way"`
  FailResult_ string `thrift:"fail_result,10" db:"fail_result" json:"fail_result"`
}

func NewUserRechargeRecordDetailsStruct() *UserRechargeRecordDetailsStruct {
  return &UserRechargeRecordDetailsStruct{}
}


func (p *UserRechargeRecordDetailsStruct) GetID() int32 {
  return p.ID
}

func (p *UserRechargeRecordDetailsStruct) GetUserID() int32 {
  return p.UserID
}

func (p *UserRechargeRecordDetailsStruct) GetOrderSn() string {
  return p.OrderSn
}

func (p *UserRechargeRecordDetailsStruct) GetMoney() string {
  return p.Money
}

func (p *UserRechargeRecordDetailsStruct) GetAddtime() int32 {
  return p.Addtime
}

func (p *UserRechargeRecordDetailsStruct) GetStatus() int32 {
  return p.Status
}

func (p *UserRechargeRecordDetailsStruct) GetDealTime() int32 {
  return p.DealTime
}

func (p *UserRechargeRecordDetailsStruct) GetPayType() int32 {
  return p.PayType
}

func (p *UserRechargeRecordDetailsStruct) GetPayWay() int32 {
  return p.PayWay
}

func (p *UserRechargeRecordDetailsStruct) GetFailResult_() string {
  return p.FailResult_
}
func (p *UserRechargeRecordDetailsStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserRechargeRecordDetailsStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *UserRechargeRecordDetailsStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserRechargeRecordDetailsStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OrderSn = v
}
  return nil
}

func (p *UserRechargeRecordDetailsStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Money = v
}
  return nil
}

func (p *UserRechargeRecordDetailsStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Addtime = v
}
  return nil
}

func (p *UserRechargeRecordDetailsStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *UserRechargeRecordDetailsStruct)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DealTime = v
}
  return nil
}

func (p *UserRechargeRecordDetailsStruct)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.PayType = v
}
  return nil
}

func (p *UserRechargeRecordDetailsStruct)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.PayWay = v
}
  return nil
}

func (p *UserRechargeRecordDetailsStruct)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.FailResult_ = v
}
  return nil
}

func (p *UserRechargeRecordDetailsStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserRechargeRecordDetailsStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserRechargeRecordDetailsStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *UserRechargeRecordDetailsStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *UserRechargeRecordDetailsStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_sn", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:order_sn: ", p), err) }
  if err := oprot.WriteString(string(p.OrderSn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_sn (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:order_sn: ", p), err) }
  return err
}

func (p *UserRechargeRecordDetailsStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("money", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:money: ", p), err) }
  if err := oprot.WriteString(string(p.Money)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.money (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:money: ", p), err) }
  return err
}

func (p *UserRechargeRecordDetailsStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("addtime", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:addtime: ", p), err) }
  if err := oprot.WriteI32(int32(p.Addtime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.addtime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:addtime: ", p), err) }
  return err
}

func (p *UserRechargeRecordDetailsStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:status: ", p), err) }
  return err
}

func (p *UserRechargeRecordDetailsStruct) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deal_time", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:deal_time: ", p), err) }
  if err := oprot.WriteI32(int32(p.DealTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deal_time (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:deal_time: ", p), err) }
  return err
}

func (p *UserRechargeRecordDetailsStruct) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pay_type", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:pay_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.PayType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pay_type (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:pay_type: ", p), err) }
  return err
}

func (p *UserRechargeRecordDetailsStruct) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pay_way", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:pay_way: ", p), err) }
  if err := oprot.WriteI32(int32(p.PayWay)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pay_way (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:pay_way: ", p), err) }
  return err
}

func (p *UserRechargeRecordDetailsStruct) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fail_result", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:fail_result: ", p), err) }
  if err := oprot.WriteString(string(p.FailResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fail_result (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:fail_result: ", p), err) }
  return err
}

func (p *UserRechargeRecordDetailsStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserRechargeRecordDetailsStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
//  - Totalnum
//  - TotalHsRechargeMoney
//  - UserRechargeRecordList
type UserRechargeRecordListResponseStruct struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Msg string `thrift:"Msg,2" db:"Msg" json:"Msg"`
  Totalnum int32 `thrift:"totalnum,3" db:"totalnum" json:"totalnum"`
  TotalHsRechargeMoney string `thrift:"totalHsRechargeMoney,4" db:"totalHsRechargeMoney" json:"totalHsRechargeMoney"`
  UserRechargeRecordList []*UserRechargeRecordDetailsStruct `thrift:"UserRechargeRecordList,5" db:"UserRechargeRecordList" json:"UserRechargeRecordList"`
}

func NewUserRechargeRecordListResponseStruct() *UserRechargeRecordListResponseStruct {
  return &UserRechargeRecordListResponseStruct{}
}


func (p *UserRechargeRecordListResponseStruct) GetStatus() int32 {
  return p.Status
}

func (p *UserRechargeRecordListResponseStruct) GetMsg() string {
  return p.Msg
}

func (p *UserRechargeRecordListResponseStruct) GetTotalnum() int32 {
  return p.Totalnum
}

func (p *UserRechargeRecordListResponseStruct) GetTotalHsRechargeMoney() string {
  return p.TotalHsRechargeMoney
}

func (p *UserRechargeRecordListResponseStruct) GetUserRechargeRecordList() []*UserRechargeRecordDetailsStruct {
  return p.UserRechargeRecordList
}
func (p *UserRechargeRecordListResponseStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserRechargeRecordListResponseStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *UserRechargeRecordListResponseStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *UserRechargeRecordListResponseStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Totalnum = v
}
  return nil
}

func (p *UserRechargeRecordListResponseStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TotalHsRechargeMoney = v
}
  return nil
}

func (p *UserRechargeRecordListResponseStruct)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UserRechargeRecordDetailsStruct, 0, size)
  p.UserRechargeRecordList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &UserRechargeRecordDetailsStruct{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.UserRechargeRecordList = append(p.UserRechargeRecordList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserRechargeRecordListResponseStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserRechargeRecordListResponseStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserRechargeRecordListResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *UserRechargeRecordListResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("Msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Msg: ", p), err) }
  return err
}

func (p *UserRechargeRecordListResponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalnum", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalnum: ", p), err) }
  if err := oprot.WriteI32(int32(p.Totalnum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalnum (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalnum: ", p), err) }
  return err
}

func (p *UserRechargeRecordListResponseStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalHsRechargeMoney", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalHsRechargeMoney: ", p), err) }
  if err := oprot.WriteString(string(p.TotalHsRechargeMoney)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalHsRechargeMoney (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalHsRechargeMoney: ", p), err) }
  return err
}

func (p *UserRechargeRecordListResponseStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserRechargeRecordList", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:UserRechargeRecordList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UserRechargeRecordList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UserRechargeRecordList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:UserRechargeRecordList: ", p), err) }
  return err
}

func (p *UserRechargeRecordListResponseStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserRechargeRecordListResponseStruct(%+v)", *p)
}

type UserRechargeRecordListThriftService interface {
  // Parameters:
  //  - RequestObj
  GetUserRechargeRecordList(requestObj *UserRechargeRecordListRequestStruct) (r *UserRechargeRecordListResponseStruct, err error)
}

type UserRechargeRecordListThriftServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewUserRechargeRecordListThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserRechargeRecordListThriftServiceClient {
  return &UserRechargeRecordListThriftServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewUserRechargeRecordListThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserRechargeRecordListThriftServiceClient {
  return &UserRechargeRecordListThriftServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - RequestObj
func (p *UserRechargeRecordListThriftServiceClient) GetUserRechargeRecordList(requestObj *UserRechargeRecordListRequestStruct) (r *UserRechargeRecordListResponseStruct, err error) {
  if err = p.sendGetUserRechargeRecordList(requestObj); err != nil { return }
  return p.recvGetUserRechargeRecordList()
}

func (p *UserRechargeRecordListThriftServiceClient) sendGetUserRechargeRecordList(requestObj *UserRechargeRecordListRequestStruct)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUserRechargeRecordList", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := UserRechargeRecordListThriftServiceGetUserRechargeRecordListArgs{
  RequestObj : requestObj,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *UserRechargeRecordListThriftServiceClient) recvGetUserRechargeRecordList() (value *UserRechargeRecordListResponseStruct, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUserRechargeRecordList" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserRechargeRecordList failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserRechargeRecordList failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error2 error
    error2, err = error1.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error2
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserRechargeRecordList failed: invalid message type")
    return
  }
  result := UserRechargeRecordListThriftServiceGetUserRechargeRecordListResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type UserRechargeRecordListThriftServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserRechargeRecordListThriftService
}

func (p *UserRechargeRecordListThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserRechargeRecordListThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserRechargeRecordListThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserRechargeRecordListThriftServiceProcessor(handler UserRechargeRecordListThriftService) *UserRechargeRecordListThriftServiceProcessor {

  self3 := &UserRechargeRecordListThriftServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self3.processorMap["getUserRechargeRecordList"] = &userRechargeRecordListThriftServiceProcessorGetUserRechargeRecordList{handler:handler}
return self3
}

func (p *UserRechargeRecordListThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x4.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x4

}

type userRechargeRecordListThriftServiceProcessorGetUserRechargeRecordList struct {
  handler UserRechargeRecordListThriftService
}

func (p *userRechargeRecordListThriftServiceProcessorGetUserRechargeRecordList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserRechargeRecordListThriftServiceGetUserRechargeRecordListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserRechargeRecordList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserRechargeRecordListThriftServiceGetUserRechargeRecordListResult{}
var retval *UserRechargeRecordListResponseStruct
  var err2 error
  if retval, err2 = p.handler.GetUserRechargeRecordList(args.RequestObj); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserRechargeRecordList: " + err2.Error())
    oprot.WriteMessageBegin("getUserRechargeRecordList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserRechargeRecordList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type UserRechargeRecordListThriftServiceGetUserRechargeRecordListArgs struct {
  RequestObj *UserRechargeRecordListRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewUserRechargeRecordListThriftServiceGetUserRechargeRecordListArgs() *UserRechargeRecordListThriftServiceGetUserRechargeRecordListArgs {
  return &UserRechargeRecordListThriftServiceGetUserRechargeRecordListArgs{}
}

var UserRechargeRecordListThriftServiceGetUserRechargeRecordListArgs_RequestObj_DEFAULT *UserRechargeRecordListRequestStruct
func (p *UserRechargeRecordListThriftServiceGetUserRechargeRecordListArgs) GetRequestObj() *UserRechargeRecordListRequestStruct {
  if !p.IsSetRequestObj() {
    return UserRechargeRecordListThriftServiceGetUserRechargeRecordListArgs_RequestObj_DEFAULT
  }
return p.RequestObj
}
func (p *UserRechargeRecordListThriftServiceGetUserRechargeRecordListArgs) IsSetRequestObj() bool {
  return p.RequestObj != nil
}

func (p *UserRechargeRecordListThriftServiceGetUserRechargeRecordListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserRechargeRecordListThriftServiceGetUserRechargeRecordListArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestObj = &UserRechargeRecordListRequestStruct{}
  if err := p.RequestObj.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
  }
  return nil
}

func (p *UserRechargeRecordListThriftServiceGetUserRechargeRecordListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserRechargeRecordList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserRechargeRecordListThriftServiceGetUserRechargeRecordListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err) }
  if err := p.RequestObj.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err) }
  return err
}

func (p *UserRechargeRecordListThriftServiceGetUserRechargeRecordListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserRechargeRecordListThriftServiceGetUserRechargeRecordListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserRechargeRecordListThriftServiceGetUserRechargeRecordListResult struct {
  Success *UserRechargeRecordListResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserRechargeRecordListThriftServiceGetUserRechargeRecordListResult() *UserRechargeRecordListThriftServiceGetUserRechargeRecordListResult {
  return &UserRechargeRecordListThriftServiceGetUserRechargeRecordListResult{}
}

var UserRechargeRecordListThriftServiceGetUserRechargeRecordListResult_Success_DEFAULT *UserRechargeRecordListResponseStruct
func (p *UserRechargeRecordListThriftServiceGetUserRechargeRecordListResult) GetSuccess() *UserRechargeRecordListResponseStruct {
  if !p.IsSetSuccess() {
    return UserRechargeRecordListThriftServiceGetUserRechargeRecordListResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserRechargeRecordListThriftServiceGetUserRechargeRecordListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserRechargeRecordListThriftServiceGetUserRechargeRecordListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserRechargeRecordListThriftServiceGetUserRechargeRecordListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UserRechargeRecordListResponseStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserRechargeRecordListThriftServiceGetUserRechargeRecordListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserRechargeRecordList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserRechargeRecordListThriftServiceGetUserRechargeRecordListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserRechargeRecordListThriftServiceGetUserRechargeRecordListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserRechargeRecordListThriftServiceGetUserRechargeRecordListResult(%+v)", *p)
}


