// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rechargerecordthriftservice

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - UserID
//  - StartTime
//  - EndTime
//  - QueryTime
//  - RechargeStatus
//  - LimitOffset
//  - LimitNum
//  - ChengHuiTongTraceLog
type RechargeRecordRequestStruct struct {
	UserID               int32  `thrift:"user_id,1" db:"user_id" json:"user_id"`
	StartTime            int32  `thrift:"start_time,2" db:"start_time" json:"start_time"`
	EndTime              int32  `thrift:"end_time,3" db:"end_time" json:"end_time"`
	QueryTime            int32  `thrift:"query_time,4" db:"query_time" json:"query_time"`
	RechargeStatus       int32  `thrift:"recharge_status,5" db:"recharge_status" json:"recharge_status"`
	LimitOffset          int32  `thrift:"limit_offset,6" db:"limit_offset" json:"limit_offset"`
	LimitNum             int32  `thrift:"limit_num,7" db:"limit_num" json:"limit_num"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,8" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewRechargeRecordRequestStruct() *RechargeRecordRequestStruct {
// 	return &RechargeRecordRequestStruct{}
// }

func (p *RechargeRecordRequestStruct) GetUserID() int32 {
	return p.UserID
}

func (p *RechargeRecordRequestStruct) GetStartTime() int32 {
	return p.StartTime
}

func (p *RechargeRecordRequestStruct) GetEndTime() int32 {
	return p.EndTime
}

func (p *RechargeRecordRequestStruct) GetQueryTime() int32 {
	return p.QueryTime
}

func (p *RechargeRecordRequestStruct) GetRechargeStatus() int32 {
	return p.RechargeStatus
}

func (p *RechargeRecordRequestStruct) GetLimitOffset() int32 {
	return p.LimitOffset
}

func (p *RechargeRecordRequestStruct) GetLimitNum() int32 {
	return p.LimitNum
}

func (p *RechargeRecordRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *RechargeRecordRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RechargeRecordRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *RechargeRecordRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *RechargeRecordRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *RechargeRecordRequestStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.QueryTime = v
	}
	return nil
}

func (p *RechargeRecordRequestStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.RechargeStatus = v
	}
	return nil
}

func (p *RechargeRecordRequestStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.LimitOffset = v
	}
	return nil
}

func (p *RechargeRecordRequestStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.LimitNum = v
	}
	return nil
}

func (p *RechargeRecordRequestStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *RechargeRecordRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RechargeRecordRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RechargeRecordRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err)
	}
	return err
}

func (p *RechargeRecordRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_time", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_time (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start_time: ", p), err)
	}
	return err
}

func (p *RechargeRecordRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end_time", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:end_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.end_time (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:end_time: ", p), err)
	}
	return err
}

func (p *RechargeRecordRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query_time", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:query_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.QueryTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query_time (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:query_time: ", p), err)
	}
	return err
}

func (p *RechargeRecordRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recharge_status", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:recharge_status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RechargeStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.recharge_status (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:recharge_status: ", p), err)
	}
	return err
}

func (p *RechargeRecordRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit_offset", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:limit_offset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitOffset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limit_offset (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:limit_offset: ", p), err)
	}
	return err
}

func (p *RechargeRecordRequestStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit_num", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:limit_num: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limit_num (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:limit_num: ", p), err)
	}
	return err
}

func (p *RechargeRecordRequestStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *RechargeRecordRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeRecordRequestStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserID
//  - OrderSn
//  - Money
//  - Addtime
//  - Status
//  - DealTime
//  - PayType
//  - PayWay
//  - FailResult
type RechargeRecordStruct struct {
	ID         int32  `thrift:"id,1" db:"id" json:"id"`
	UserID     int32  `thrift:"user_id,2" db:"user_id" json:"user_id"`
	OrderSn    string `thrift:"order_sn,3" db:"order_sn" json:"order_sn"`
	Money      string `thrift:"money,4" db:"money" json:"money"`
	Addtime    int32  `thrift:"addtime,5" db:"addtime" json:"addtime"`
	Status     int32  `thrift:"status,6" db:"status" json:"status"`
	DealTime   int32  `thrift:"deal_time,7" db:"deal_time" json:"deal_time"`
	PayType    int32  `thrift:"pay_type,8" db:"pay_type" json:"pay_type"`
	PayWay     int32  `thrift:"pay_way,9" db:"pay_way" json:"pay_way"`
	FailResult string `thrift:"fail_result,10" db:"fail_result" json:"fail_result"`
}

func NewRechargeRecordStruct() *RechargeRecordStruct {
	return &RechargeRecordStruct{}
}

func (p *RechargeRecordStruct) GetID() int32 {
	return p.ID
}

func (p *RechargeRecordStruct) GetUserID() int32 {
	return p.UserID
}

func (p *RechargeRecordStruct) GetOrderSn() string {
	return p.OrderSn
}

func (p *RechargeRecordStruct) GetMoney() string {
	return p.Money
}

func (p *RechargeRecordStruct) GetAddtime() int32 {
	return p.Addtime
}

func (p *RechargeRecordStruct) GetStatus() int32 {
	return p.Status
}

func (p *RechargeRecordStruct) GetDealTime() int32 {
	return p.DealTime
}

func (p *RechargeRecordStruct) GetPayType() int32 {
	return p.PayType
}

func (p *RechargeRecordStruct) GetPayWay() int32 {
	return p.PayWay
}

func (p *RechargeRecordStruct) GetFailResult() string {
	return p.FailResult
}
func (p *RechargeRecordStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RechargeRecordStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *RechargeRecordStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *RechargeRecordStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OrderSn = v
	}
	return nil
}

func (p *RechargeRecordStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Money = v
	}
	return nil
}

func (p *RechargeRecordStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Addtime = v
	}
	return nil
}

func (p *RechargeRecordStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *RechargeRecordStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.DealTime = v
	}
	return nil
}

func (p *RechargeRecordStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.PayType = v
	}
	return nil
}

func (p *RechargeRecordStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.PayWay = v
	}
	return nil
}

func (p *RechargeRecordStruct) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.FailResult = v
	}
	return nil
}

func (p *RechargeRecordStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RechargeRecordStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RechargeRecordStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *RechargeRecordStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err)
	}
	return err
}

func (p *RechargeRecordStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("order_sn", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:order_sn: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderSn)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.order_sn (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:order_sn: ", p), err)
	}
	return err
}

func (p *RechargeRecordStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("money", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:money: ", p), err)
	}
	if err := oprot.WriteString(string(p.Money)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.money (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:money: ", p), err)
	}
	return err
}

func (p *RechargeRecordStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addtime", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:addtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Addtime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addtime (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:addtime: ", p), err)
	}
	return err
}

func (p *RechargeRecordStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:status: ", p), err)
	}
	return err
}

func (p *RechargeRecordStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deal_time", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:deal_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DealTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deal_time (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:deal_time: ", p), err)
	}
	return err
}

func (p *RechargeRecordStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pay_type", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:pay_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PayType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pay_type (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:pay_type: ", p), err)
	}
	return err
}

func (p *RechargeRecordStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pay_way", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:pay_way: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PayWay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pay_way (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:pay_way: ", p), err)
	}
	return err
}

func (p *RechargeRecordStruct) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fail_result", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:fail_result: ", p), err)
	}
	if err := oprot.WriteString(string(p.FailResult)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fail_result (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:fail_result: ", p), err)
	}
	return err
}

func (p *RechargeRecordStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeRecordStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
//  - Totalnum
//  - TotalHsRechargeMoney
//  - RechargeRecordList
type RechargeRecordResponseStruct struct {
	Status               int32                   `thrift:"status,1" db:"status" json:"status"`
	Msg                  string                  `thrift:"Msg,2" db:"Msg" json:"Msg"`
	Totalnum             int32                   `thrift:"totalnum,3" db:"totalnum" json:"totalnum"`
	TotalHsRechargeMoney string                  `thrift:"totalHsRechargeMoney,4" db:"totalHsRechargeMoney" json:"totalHsRechargeMoney"`
	RechargeRecordList   []*RechargeRecordStruct `thrift:"rechargeRecordList,5" db:"rechargeRecordList" json:"rechargeRecordList"`
}

func NewRechargeRecordResponseStruct() *RechargeRecordResponseStruct {
	return &RechargeRecordResponseStruct{}
}

func (p *RechargeRecordResponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *RechargeRecordResponseStruct) GetMsg() string {
	return p.Msg
}

func (p *RechargeRecordResponseStruct) GetTotalnum() int32 {
	return p.Totalnum
}

func (p *RechargeRecordResponseStruct) GetTotalHsRechargeMoney() string {
	return p.TotalHsRechargeMoney
}

func (p *RechargeRecordResponseStruct) GetRechargeRecordList() []*RechargeRecordStruct {
	return p.RechargeRecordList
}
func (p *RechargeRecordResponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RechargeRecordResponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *RechargeRecordResponseStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *RechargeRecordResponseStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Totalnum = v
	}
	return nil
}

func (p *RechargeRecordResponseStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TotalHsRechargeMoney = v
	}
	return nil
}

func (p *RechargeRecordResponseStruct) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RechargeRecordStruct, 0, size)
	p.RechargeRecordList = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &RechargeRecordStruct{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.RechargeRecordList = append(p.RechargeRecordList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RechargeRecordResponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RechargeRecordResponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RechargeRecordResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *RechargeRecordResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Msg: ", p), err)
	}
	return err
}

func (p *RechargeRecordResponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalnum", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalnum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Totalnum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalnum (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalnum: ", p), err)
	}
	return err
}

func (p *RechargeRecordResponseStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalHsRechargeMoney", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalHsRechargeMoney: ", p), err)
	}
	if err := oprot.WriteString(string(p.TotalHsRechargeMoney)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalHsRechargeMoney (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalHsRechargeMoney: ", p), err)
	}
	return err
}

func (p *RechargeRecordResponseStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rechargeRecordList", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:rechargeRecordList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RechargeRecordList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RechargeRecordList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:rechargeRecordList: ", p), err)
	}
	return err
}

func (p *RechargeRecordResponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeRecordResponseStruct(%+v)", *p)
}

type RechargeRecordThriftService interface {
	// Parameters:
	//  - RequestObj
	GetRechargeRecord(requestObj *RechargeRecordRequestStruct) (r *RechargeRecordResponseStruct, err error)
}

type RechargeRecordThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewRechargeRecordThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RechargeRecordThriftServiceClient {
	return &RechargeRecordThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewRechargeRecordThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RechargeRecordThriftServiceClient {
	return &RechargeRecordThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RequestObj
func (p *RechargeRecordThriftServiceClient) GetRechargeRecord(requestObj *RechargeRecordRequestStruct) (r *RechargeRecordResponseStruct, err error) {
	if err = p.sendGetRechargeRecord(requestObj); err != nil {
		return
	}
	return p.recvGetRechargeRecord()
}

func (p *RechargeRecordThriftServiceClient) sendGetRechargeRecord(requestObj *RechargeRecordRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getRechargeRecord", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RechargeRecordThriftServiceGetRechargeRecordArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RechargeRecordThriftServiceClient) recvGetRechargeRecord() (value *RechargeRecordResponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getRechargeRecord" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getRechargeRecord failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getRechargeRecord failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error2 error
		error2, err = error1.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error2
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getRechargeRecord failed: invalid message type")
		return
	}
	result := RechargeRecordThriftServiceGetRechargeRecordResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type RechargeRecordThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      RechargeRecordThriftService
}

func (p *RechargeRecordThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *RechargeRecordThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *RechargeRecordThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewRechargeRecordThriftServiceProcessor(handler RechargeRecordThriftService) *RechargeRecordThriftServiceProcessor {

	self3 := &RechargeRecordThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self3.processorMap["getRechargeRecord"] = &rechargeRecordThriftServiceProcessorGetRechargeRecord{handler: handler}
	return self3
}

func (p *RechargeRecordThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x4

}

type rechargeRecordThriftServiceProcessorGetRechargeRecord struct {
	handler RechargeRecordThriftService
}

func (p *rechargeRecordThriftServiceProcessorGetRechargeRecord) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RechargeRecordThriftServiceGetRechargeRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRechargeRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RechargeRecordThriftServiceGetRechargeRecordResult{}
	var retval *RechargeRecordResponseStruct
	var err2 error
	if retval, err2 = p.handler.GetRechargeRecord(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRechargeRecord: "+err2.Error())
		oprot.WriteMessageBegin("getRechargeRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRechargeRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type RechargeRecordThriftServiceGetRechargeRecordArgs struct {
	RequestObj *RechargeRecordRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewRechargeRecordThriftServiceGetRechargeRecordArgs() *RechargeRecordThriftServiceGetRechargeRecordArgs {
	return &RechargeRecordThriftServiceGetRechargeRecordArgs{}
}

var RechargeRecordThriftServiceGetRechargeRecordArgs_RequestObj_DEFAULT *RechargeRecordRequestStruct

func (p *RechargeRecordThriftServiceGetRechargeRecordArgs) GetRequestObj() *RechargeRecordRequestStruct {
	if !p.IsSetRequestObj() {
		return RechargeRecordThriftServiceGetRechargeRecordArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *RechargeRecordThriftServiceGetRechargeRecordArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *RechargeRecordThriftServiceGetRechargeRecordArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RechargeRecordThriftServiceGetRechargeRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &RechargeRecordRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *RechargeRecordThriftServiceGetRechargeRecordArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRechargeRecord_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RechargeRecordThriftServiceGetRechargeRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *RechargeRecordThriftServiceGetRechargeRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeRecordThriftServiceGetRechargeRecordArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RechargeRecordThriftServiceGetRechargeRecordResult struct {
	Success *RechargeRecordResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRechargeRecordThriftServiceGetRechargeRecordResult() *RechargeRecordThriftServiceGetRechargeRecordResult {
	return &RechargeRecordThriftServiceGetRechargeRecordResult{}
}

var RechargeRecordThriftServiceGetRechargeRecordResult_Success_DEFAULT *RechargeRecordResponseStruct

func (p *RechargeRecordThriftServiceGetRechargeRecordResult) GetSuccess() *RechargeRecordResponseStruct {
	if !p.IsSetSuccess() {
		return RechargeRecordThriftServiceGetRechargeRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *RechargeRecordThriftServiceGetRechargeRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RechargeRecordThriftServiceGetRechargeRecordResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RechargeRecordThriftServiceGetRechargeRecordResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RechargeRecordResponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RechargeRecordThriftServiceGetRechargeRecordResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRechargeRecord_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RechargeRecordThriftServiceGetRechargeRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RechargeRecordThriftServiceGetRechargeRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RechargeRecordThriftServiceGetRechargeRecordResult(%+v)", *p)
}
