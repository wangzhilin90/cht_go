// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package kefudutydelete

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - Idstr
//  - ChengHuiTongTraceLog
type KefuDutyDeleteRequestStruct struct {
	Idstr                string `thrift:"idstr,1" db:"idstr" json:"idstr"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,2" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewKefuDutyDeleteRequestStruct() *KefuDutyDeleteRequestStruct {
//   return &KefuDutyDeleteRequestStruct{}
// }

func (p *KefuDutyDeleteRequestStruct) GetIdstr() string {
	return p.Idstr
}

func (p *KefuDutyDeleteRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *KefuDutyDeleteRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KefuDutyDeleteRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Idstr = v
	}
	return nil
}

func (p *KefuDutyDeleteRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *KefuDutyDeleteRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("KefuDutyDeleteRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KefuDutyDeleteRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idstr", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:idstr: ", p), err)
	}
	if err := oprot.WriteString(string(p.Idstr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.idstr (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:idstr: ", p), err)
	}
	return err
}

func (p *KefuDutyDeleteRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *KefuDutyDeleteRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KefuDutyDeleteRequestStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
type KefuDutyDeleteResponseStruct struct {
	Status int32  `thrift:"status,1" db:"status" json:"status"`
	Msg    string `thrift:"msg,2" db:"msg" json:"msg"`
}

func NewKefuDutyDeleteResponseStruct() *KefuDutyDeleteResponseStruct {
	return &KefuDutyDeleteResponseStruct{}
}

func (p *KefuDutyDeleteResponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *KefuDutyDeleteResponseStruct) GetMsg() string {
	return p.Msg
}
func (p *KefuDutyDeleteResponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KefuDutyDeleteResponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *KefuDutyDeleteResponseStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *KefuDutyDeleteResponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("KefuDutyDeleteResponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KefuDutyDeleteResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *KefuDutyDeleteResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *KefuDutyDeleteResponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KefuDutyDeleteResponseStruct(%+v)", *p)
}

type KefuDutyDeleteThriftService interface {
	// Parameters:
	//  - RequestObj
	DeleteKefuDuty(requestObj *KefuDutyDeleteRequestStruct) (r *KefuDutyDeleteResponseStruct, err error)
}

type KefuDutyDeleteThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewKefuDutyDeleteThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *KefuDutyDeleteThriftServiceClient {
	return &KefuDutyDeleteThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewKefuDutyDeleteThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *KefuDutyDeleteThriftServiceClient {
	return &KefuDutyDeleteThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RequestObj
func (p *KefuDutyDeleteThriftServiceClient) DeleteKefuDuty(requestObj *KefuDutyDeleteRequestStruct) (r *KefuDutyDeleteResponseStruct, err error) {
	if err = p.sendDeleteKefuDuty(requestObj); err != nil {
		return
	}
	return p.recvDeleteKefuDuty()
}

func (p *KefuDutyDeleteThriftServiceClient) sendDeleteKefuDuty(requestObj *KefuDutyDeleteRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteKefuDuty", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := KefuDutyDeleteThriftServiceDeleteKefuDutyArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *KefuDutyDeleteThriftServiceClient) recvDeleteKefuDuty() (value *KefuDutyDeleteResponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteKefuDuty" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteKefuDuty failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteKefuDuty failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteKefuDuty failed: invalid message type")
		return
	}
	result := KefuDutyDeleteThriftServiceDeleteKefuDutyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type KefuDutyDeleteThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      KefuDutyDeleteThriftService
}

func (p *KefuDutyDeleteThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *KefuDutyDeleteThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *KefuDutyDeleteThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewKefuDutyDeleteThriftServiceProcessor(handler KefuDutyDeleteThriftService) *KefuDutyDeleteThriftServiceProcessor {

	self2 := &KefuDutyDeleteThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self2.processorMap["deleteKefuDuty"] = &kefuDutyDeleteThriftServiceProcessorDeleteKefuDuty{handler: handler}
	return self2
}

func (p *KefuDutyDeleteThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x3.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x3

}

type kefuDutyDeleteThriftServiceProcessorDeleteKefuDuty struct {
	handler KefuDutyDeleteThriftService
}

func (p *kefuDutyDeleteThriftServiceProcessorDeleteKefuDuty) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := KefuDutyDeleteThriftServiceDeleteKefuDutyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteKefuDuty", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := KefuDutyDeleteThriftServiceDeleteKefuDutyResult{}
	var retval *KefuDutyDeleteResponseStruct
	var err2 error
	if retval, err2 = p.handler.DeleteKefuDuty(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteKefuDuty: "+err2.Error())
		oprot.WriteMessageBegin("deleteKefuDuty", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("deleteKefuDuty", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type KefuDutyDeleteThriftServiceDeleteKefuDutyArgs struct {
	RequestObj *KefuDutyDeleteRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewKefuDutyDeleteThriftServiceDeleteKefuDutyArgs() *KefuDutyDeleteThriftServiceDeleteKefuDutyArgs {
	return &KefuDutyDeleteThriftServiceDeleteKefuDutyArgs{}
}

var KefuDutyDeleteThriftServiceDeleteKefuDutyArgs_RequestObj_DEFAULT *KefuDutyDeleteRequestStruct

func (p *KefuDutyDeleteThriftServiceDeleteKefuDutyArgs) GetRequestObj() *KefuDutyDeleteRequestStruct {
	if !p.IsSetRequestObj() {
		return KefuDutyDeleteThriftServiceDeleteKefuDutyArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *KefuDutyDeleteThriftServiceDeleteKefuDutyArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *KefuDutyDeleteThriftServiceDeleteKefuDutyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KefuDutyDeleteThriftServiceDeleteKefuDutyArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &KefuDutyDeleteRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *KefuDutyDeleteThriftServiceDeleteKefuDutyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteKefuDuty_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KefuDutyDeleteThriftServiceDeleteKefuDutyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *KefuDutyDeleteThriftServiceDeleteKefuDutyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KefuDutyDeleteThriftServiceDeleteKefuDutyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type KefuDutyDeleteThriftServiceDeleteKefuDutyResult struct {
	Success *KefuDutyDeleteResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewKefuDutyDeleteThriftServiceDeleteKefuDutyResult() *KefuDutyDeleteThriftServiceDeleteKefuDutyResult {
	return &KefuDutyDeleteThriftServiceDeleteKefuDutyResult{}
}

var KefuDutyDeleteThriftServiceDeleteKefuDutyResult_Success_DEFAULT *KefuDutyDeleteResponseStruct

func (p *KefuDutyDeleteThriftServiceDeleteKefuDutyResult) GetSuccess() *KefuDutyDeleteResponseStruct {
	if !p.IsSetSuccess() {
		return KefuDutyDeleteThriftServiceDeleteKefuDutyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *KefuDutyDeleteThriftServiceDeleteKefuDutyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *KefuDutyDeleteThriftServiceDeleteKefuDutyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KefuDutyDeleteThriftServiceDeleteKefuDutyResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &KefuDutyDeleteResponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *KefuDutyDeleteThriftServiceDeleteKefuDutyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteKefuDuty_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KefuDutyDeleteThriftServiceDeleteKefuDutyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *KefuDutyDeleteThriftServiceDeleteKefuDutyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KefuDutyDeleteThriftServiceDeleteKefuDutyResult(%+v)", *p)
}
