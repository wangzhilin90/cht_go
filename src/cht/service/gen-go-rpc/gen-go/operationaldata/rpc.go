// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package operationaldata

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - StartMonth
//  - Start
//  - ChengHuiTongTraceLog
type OperationalDataRequestStruct struct {
  StartMonth int32 `thrift:"startMonth,1" db:"startMonth" json:"startMonth"`
  Start int32 `thrift:"start,2" db:"start" json:"start"`
  ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,3" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

func NewOperationalDataRequestStruct() *OperationalDataRequestStruct {
  return &OperationalDataRequestStruct{}
}


func (p *OperationalDataRequestStruct) GetStartMonth() int32 {
  return p.StartMonth
}

func (p *OperationalDataRequestStruct) GetStart() int32 {
  return p.Start
}

func (p *OperationalDataRequestStruct) GetChengHuiTongTraceLog() string {
  return p.ChengHuiTongTraceLog
}
func (p *OperationalDataRequestStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OperationalDataRequestStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StartMonth = v
}
  return nil
}

func (p *OperationalDataRequestStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Start = v
}
  return nil
}

func (p *OperationalDataRequestStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChengHuiTongTraceLog = v
}
  return nil
}

func (p *OperationalDataRequestStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OperationalDataRequestStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OperationalDataRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startMonth", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startMonth: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartMonth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startMonth (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startMonth: ", p), err) }
  return err
}

func (p *OperationalDataRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start: ", p), err) }
  if err := oprot.WriteI32(int32(p.Start)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start: ", p), err) }
  return err
}

func (p *OperationalDataRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chengHuiTongTraceLog: ", p), err) }
  if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chengHuiTongTraceLog: ", p), err) }
  return err
}

func (p *OperationalDataRequestStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OperationalDataRequestStruct(%+v)", *p)
}

// Attributes:
//  - Money
//  - Username
type ThirtyDaysResultStruct struct {
  Money string `thrift:"money,1" db:"money" json:"money"`
  Username string `thrift:"username,2" db:"username" json:"username"`
}

func NewThirtyDaysResultStruct() *ThirtyDaysResultStruct {
  return &ThirtyDaysResultStruct{}
}


func (p *ThirtyDaysResultStruct) GetMoney() string {
  return p.Money
}

func (p *ThirtyDaysResultStruct) GetUsername() string {
  return p.Username
}
func (p *ThirtyDaysResultStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThirtyDaysResultStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Money = v
}
  return nil
}

func (p *ThirtyDaysResultStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *ThirtyDaysResultStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ThirtyDaysResultStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThirtyDaysResultStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("money", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:money: ", p), err) }
  if err := oprot.WriteString(string(p.Money)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.money (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:money: ", p), err) }
  return err
}

func (p *ThirtyDaysResultStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *ThirtyDaysResultStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThirtyDaysResultStruct(%+v)", *p)
}

// Attributes:
//  - Category
//  - Account
type TwelveMonthResultStruct struct {
  Category string `thrift:"category,1" db:"category" json:"category"`
  Account string `thrift:"account,2" db:"account" json:"account"`
}

func NewTwelveMonthResultStruct() *TwelveMonthResultStruct {
  return &TwelveMonthResultStruct{}
}


func (p *TwelveMonthResultStruct) GetCategory() string {
  return p.Category
}

func (p *TwelveMonthResultStruct) GetAccount() string {
  return p.Account
}
func (p *TwelveMonthResultStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TwelveMonthResultStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Category = v
}
  return nil
}

func (p *TwelveMonthResultStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *TwelveMonthResultStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TwelveMonthResultStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TwelveMonthResultStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("category", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:category: ", p), err) }
  if err := oprot.WriteString(string(p.Category)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:category: ", p), err) }
  return err
}

func (p *TwelveMonthResultStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:account: ", p), err) }
  return err
}

func (p *TwelveMonthResultStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TwelveMonthResultStruct(%+v)", *p)
}

// Attributes:
//  - Category
//  - Account
type OneMonthResultStruct struct {
  Category string `thrift:"category,1" db:"category" json:"category"`
  Account string `thrift:"account,2" db:"account" json:"account"`
}

func NewOneMonthResultStruct() *OneMonthResultStruct {
  return &OneMonthResultStruct{}
}


func (p *OneMonthResultStruct) GetCategory() string {
  return p.Category
}

func (p *OneMonthResultStruct) GetAccount() string {
  return p.Account
}
func (p *OneMonthResultStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OneMonthResultStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Category = v
}
  return nil
}

func (p *OneMonthResultStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *OneMonthResultStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OneMonthResultStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OneMonthResultStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("category", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:category: ", p), err) }
  if err := oprot.WriteString(string(p.Category)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:category: ", p), err) }
  return err
}

func (p *OneMonthResultStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:account: ", p), err) }
  if err := oprot.WriteString(string(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:account: ", p), err) }
  return err
}

func (p *OneMonthResultStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OneMonthResultStruct(%+v)", *p)
}

// Attributes:
//  - Category
//  - Column_1
type PeriodResultStruct struct {
  Category string `thrift:"category,1" db:"category" json:"category"`
  Column_1 string `thrift:"column_1,2" db:"column_1" json:"column_1"`
}

func NewPeriodResultStruct() *PeriodResultStruct {
  return &PeriodResultStruct{}
}


func (p *PeriodResultStruct) GetCategory() string {
  return p.Category
}

func (p *PeriodResultStruct) GetColumn_1() string {
  return p.Column_1
}
func (p *PeriodResultStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PeriodResultStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Category = v
}
  return nil
}

func (p *PeriodResultStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Column_1 = v
}
  return nil
}

func (p *PeriodResultStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PeriodResultStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PeriodResultStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("category", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:category: ", p), err) }
  if err := oprot.WriteString(string(p.Category)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:category: ", p), err) }
  return err
}

func (p *PeriodResultStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("column_1", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:column_1: ", p), err) }
  if err := oprot.WriteString(string(p.Column_1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.column_1 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:column_1: ", p), err) }
  return err
}

func (p *PeriodResultStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PeriodResultStruct(%+v)", *p)
}

// Attributes:
//  - A1
//  - A2
//  - A3
//  - A4
//  - A5
type InvestResultStruct struct {
  A1 string `thrift:"a1,1" db:"a1" json:"a1"`
  A2 string `thrift:"a2,2" db:"a2" json:"a2"`
  A3 string `thrift:"a3,3" db:"a3" json:"a3"`
  A4 string `thrift:"a4,4" db:"a4" json:"a4"`
  A5 string `thrift:"a5,5" db:"a5" json:"a5"`
}

func NewInvestResultStruct() *InvestResultStruct {
  return &InvestResultStruct{}
}


func (p *InvestResultStruct) GetA1() string {
  return p.A1
}

func (p *InvestResultStruct) GetA2() string {
  return p.A2
}

func (p *InvestResultStruct) GetA3() string {
  return p.A3
}

func (p *InvestResultStruct) GetA4() string {
  return p.A4
}

func (p *InvestResultStruct) GetA5() string {
  return p.A5
}
func (p *InvestResultStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InvestResultStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.A1 = v
}
  return nil
}

func (p *InvestResultStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.A2 = v
}
  return nil
}

func (p *InvestResultStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.A3 = v
}
  return nil
}

func (p *InvestResultStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.A4 = v
}
  return nil
}

func (p *InvestResultStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.A5 = v
}
  return nil
}

func (p *InvestResultStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InvestResultStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvestResultStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("a1", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:a1: ", p), err) }
  if err := oprot.WriteString(string(p.A1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.a1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:a1: ", p), err) }
  return err
}

func (p *InvestResultStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("a2", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:a2: ", p), err) }
  if err := oprot.WriteString(string(p.A2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.a2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:a2: ", p), err) }
  return err
}

func (p *InvestResultStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("a3", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:a3: ", p), err) }
  if err := oprot.WriteString(string(p.A3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.a3 (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:a3: ", p), err) }
  return err
}

func (p *InvestResultStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("a4", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:a4: ", p), err) }
  if err := oprot.WriteString(string(p.A4)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.a4 (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:a4: ", p), err) }
  return err
}

func (p *InvestResultStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("a5", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:a5: ", p), err) }
  if err := oprot.WriteString(string(p.A5)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.a5 (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:a5: ", p), err) }
  return err
}

func (p *InvestResultStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvestResultStruct(%+v)", *p)
}

// Attributes:
//  - BorrowType
//  - Number
type BidResultStruct struct {
  BorrowType int32 `thrift:"borrow_type,1" db:"borrow_type" json:"borrow_type"`
  Number string `thrift:"number,2" db:"number" json:"number"`
}

func NewBidResultStruct() *BidResultStruct {
  return &BidResultStruct{}
}


func (p *BidResultStruct) GetBorrowType() int32 {
  return p.BorrowType
}

func (p *BidResultStruct) GetNumber() string {
  return p.Number
}
func (p *BidResultStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BidResultStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.BorrowType = v
}
  return nil
}

func (p *BidResultStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Number = v
}
  return nil
}

func (p *BidResultStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BidResultStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BidResultStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("borrow_type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:borrow_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.BorrowType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.borrow_type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:borrow_type: ", p), err) }
  return err
}

func (p *BidResultStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("number", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:number: ", p), err) }
  if err := oprot.WriteString(string(p.Number)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.number (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:number: ", p), err) }
  return err
}

func (p *BidResultStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BidResultStruct(%+v)", *p)
}

// Attributes:
//  - Money
//  - Username
type WaitResultStruct struct {
  Money string `thrift:"money,1" db:"money" json:"money"`
  Username string `thrift:"username,2" db:"username" json:"username"`
}

func NewWaitResultStruct() *WaitResultStruct {
  return &WaitResultStruct{}
}


func (p *WaitResultStruct) GetMoney() string {
  return p.Money
}

func (p *WaitResultStruct) GetUsername() string {
  return p.Username
}
func (p *WaitResultStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WaitResultStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Money = v
}
  return nil
}

func (p *WaitResultStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Username = v
}
  return nil
}

func (p *WaitResultStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("WaitResultStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WaitResultStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("money", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:money: ", p), err) }
  if err := oprot.WriteString(string(p.Money)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.money (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:money: ", p), err) }
  return err
}

func (p *WaitResultStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("username", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:username: ", p), err) }
  if err := oprot.WriteString(string(p.Username)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.username (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:username: ", p), err) }
  return err
}

func (p *WaitResultStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WaitResultStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
//  - ThirtyDaysList
//  - TwelveMonthList
//  - OneMonthList
//  - OldSum
//  - Repayment
//  - PeriodList
//  - InvestAccount
//  - BidList
//  - WaitList
type OperationalDataResponseStruct struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Msg string `thrift:"msg,2" db:"msg" json:"msg"`
  ThirtyDaysList []*ThirtyDaysResultStruct `thrift:"ThirtyDaysList,3" db:"ThirtyDaysList" json:"ThirtyDaysList"`
  TwelveMonthList []*TwelveMonthResultStruct `thrift:"TwelveMonthList,4" db:"TwelveMonthList" json:"TwelveMonthList"`
  OneMonthList []*OneMonthResultStruct `thrift:"OneMonthList,5" db:"OneMonthList" json:"OneMonthList"`
  OldSum string `thrift:"oldSum,6" db:"oldSum" json:"oldSum"`
  Repayment string `thrift:"repayment,7" db:"repayment" json:"repayment"`
  PeriodList []*PeriodResultStruct `thrift:"PeriodList,8" db:"PeriodList" json:"PeriodList"`
  InvestAccount *InvestResultStruct `thrift:"InvestAccount,9" db:"InvestAccount" json:"InvestAccount"`
  BidList []*BidResultStruct `thrift:"BidList,10" db:"BidList" json:"BidList"`
  WaitList []*WaitResultStruct `thrift:"WaitList,11" db:"WaitList" json:"WaitList"`
}

func NewOperationalDataResponseStruct() *OperationalDataResponseStruct {
  return &OperationalDataResponseStruct{}
}


func (p *OperationalDataResponseStruct) GetStatus() int32 {
  return p.Status
}

func (p *OperationalDataResponseStruct) GetMsg() string {
  return p.Msg
}

func (p *OperationalDataResponseStruct) GetThirtyDaysList() []*ThirtyDaysResultStruct {
  return p.ThirtyDaysList
}

func (p *OperationalDataResponseStruct) GetTwelveMonthList() []*TwelveMonthResultStruct {
  return p.TwelveMonthList
}

func (p *OperationalDataResponseStruct) GetOneMonthList() []*OneMonthResultStruct {
  return p.OneMonthList
}

func (p *OperationalDataResponseStruct) GetOldSum() string {
  return p.OldSum
}

func (p *OperationalDataResponseStruct) GetRepayment() string {
  return p.Repayment
}

func (p *OperationalDataResponseStruct) GetPeriodList() []*PeriodResultStruct {
  return p.PeriodList
}
var OperationalDataResponseStruct_InvestAccount_DEFAULT *InvestResultStruct
func (p *OperationalDataResponseStruct) GetInvestAccount() *InvestResultStruct {
  if !p.IsSetInvestAccount() {
    return OperationalDataResponseStruct_InvestAccount_DEFAULT
  }
return p.InvestAccount
}

func (p *OperationalDataResponseStruct) GetBidList() []*BidResultStruct {
  return p.BidList
}

func (p *OperationalDataResponseStruct) GetWaitList() []*WaitResultStruct {
  return p.WaitList
}
func (p *OperationalDataResponseStruct) IsSetInvestAccount() bool {
  return p.InvestAccount != nil
}

func (p *OperationalDataResponseStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OperationalDataResponseStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *OperationalDataResponseStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *OperationalDataResponseStruct)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ThirtyDaysResultStruct, 0, size)
  p.ThirtyDaysList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &ThirtyDaysResultStruct{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.ThirtyDaysList = append(p.ThirtyDaysList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OperationalDataResponseStruct)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TwelveMonthResultStruct, 0, size)
  p.TwelveMonthList =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &TwelveMonthResultStruct{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.TwelveMonthList = append(p.TwelveMonthList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OperationalDataResponseStruct)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*OneMonthResultStruct, 0, size)
  p.OneMonthList =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &OneMonthResultStruct{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.OneMonthList = append(p.OneMonthList, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OperationalDataResponseStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.OldSum = v
}
  return nil
}

func (p *OperationalDataResponseStruct)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Repayment = v
}
  return nil
}

func (p *OperationalDataResponseStruct)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PeriodResultStruct, 0, size)
  p.PeriodList =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &PeriodResultStruct{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.PeriodList = append(p.PeriodList, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OperationalDataResponseStruct)  ReadField9(iprot thrift.TProtocol) error {
  p.InvestAccount = &InvestResultStruct{}
  if err := p.InvestAccount.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InvestAccount), err)
  }
  return nil
}

func (p *OperationalDataResponseStruct)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*BidResultStruct, 0, size)
  p.BidList =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &BidResultStruct{}
    if err := _elem4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.BidList = append(p.BidList, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OperationalDataResponseStruct)  ReadField11(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*WaitResultStruct, 0, size)
  p.WaitList =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &WaitResultStruct{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.WaitList = append(p.WaitList, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OperationalDataResponseStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OperationalDataResponseStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OperationalDataResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *OperationalDataResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err) }
  return err
}

func (p *OperationalDataResponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ThirtyDaysList", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ThirtyDaysList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ThirtyDaysList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ThirtyDaysList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ThirtyDaysList: ", p), err) }
  return err
}

func (p *OperationalDataResponseStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("TwelveMonthList", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:TwelveMonthList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TwelveMonthList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TwelveMonthList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:TwelveMonthList: ", p), err) }
  return err
}

func (p *OperationalDataResponseStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("OneMonthList", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:OneMonthList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OneMonthList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.OneMonthList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:OneMonthList: ", p), err) }
  return err
}

func (p *OperationalDataResponseStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oldSum", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:oldSum: ", p), err) }
  if err := oprot.WriteString(string(p.OldSum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldSum (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:oldSum: ", p), err) }
  return err
}

func (p *OperationalDataResponseStruct) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("repayment", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:repayment: ", p), err) }
  if err := oprot.WriteString(string(p.Repayment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.repayment (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:repayment: ", p), err) }
  return err
}

func (p *OperationalDataResponseStruct) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("PeriodList", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:PeriodList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PeriodList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PeriodList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:PeriodList: ", p), err) }
  return err
}

func (p *OperationalDataResponseStruct) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("InvestAccount", thrift.STRUCT, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:InvestAccount: ", p), err) }
  if err := p.InvestAccount.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InvestAccount), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:InvestAccount: ", p), err) }
  return err
}

func (p *OperationalDataResponseStruct) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("BidList", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:BidList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BidList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.BidList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:BidList: ", p), err) }
  return err
}

func (p *OperationalDataResponseStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("WaitList", thrift.LIST, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:WaitList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.WaitList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.WaitList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:WaitList: ", p), err) }
  return err
}

func (p *OperationalDataResponseStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OperationalDataResponseStruct(%+v)", *p)
}

type OperationalDataThriftService interface {
  // Parameters:
  //  - RequestObj
  GetOperationalData(requestObj *OperationalDataRequestStruct) (r *OperationalDataResponseStruct, err error)
}

type OperationalDataThriftServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewOperationalDataThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *OperationalDataThriftServiceClient {
  return &OperationalDataThriftServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewOperationalDataThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *OperationalDataThriftServiceClient {
  return &OperationalDataThriftServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - RequestObj
func (p *OperationalDataThriftServiceClient) GetOperationalData(requestObj *OperationalDataRequestStruct) (r *OperationalDataResponseStruct, err error) {
  if err = p.sendGetOperationalData(requestObj); err != nil { return }
  return p.recvGetOperationalData()
}

func (p *OperationalDataThriftServiceClient) sendGetOperationalData(requestObj *OperationalDataRequestStruct)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getOperationalData", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := OperationalDataThriftServiceGetOperationalDataArgs{
  RequestObj : requestObj,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *OperationalDataThriftServiceClient) recvGetOperationalData() (value *OperationalDataResponseStruct, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getOperationalData" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getOperationalData failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getOperationalData failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getOperationalData failed: invalid message type")
    return
  }
  result := OperationalDataThriftServiceGetOperationalDataResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type OperationalDataThriftServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler OperationalDataThriftService
}

func (p *OperationalDataThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *OperationalDataThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *OperationalDataThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewOperationalDataThriftServiceProcessor(handler OperationalDataThriftService) *OperationalDataThriftServiceProcessor {

  self8 := &OperationalDataThriftServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self8.processorMap["getOperationalData"] = &operationalDataThriftServiceProcessorGetOperationalData{handler:handler}
return self8
}

func (p *OperationalDataThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x9.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x9

}

type operationalDataThriftServiceProcessorGetOperationalData struct {
  handler OperationalDataThriftService
}

func (p *operationalDataThriftServiceProcessorGetOperationalData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := OperationalDataThriftServiceGetOperationalDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getOperationalData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := OperationalDataThriftServiceGetOperationalDataResult{}
var retval *OperationalDataResponseStruct
  var err2 error
  if retval, err2 = p.handler.GetOperationalData(args.RequestObj); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getOperationalData: " + err2.Error())
    oprot.WriteMessageBegin("getOperationalData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getOperationalData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type OperationalDataThriftServiceGetOperationalDataArgs struct {
  RequestObj *OperationalDataRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewOperationalDataThriftServiceGetOperationalDataArgs() *OperationalDataThriftServiceGetOperationalDataArgs {
  return &OperationalDataThriftServiceGetOperationalDataArgs{}
}

var OperationalDataThriftServiceGetOperationalDataArgs_RequestObj_DEFAULT *OperationalDataRequestStruct
func (p *OperationalDataThriftServiceGetOperationalDataArgs) GetRequestObj() *OperationalDataRequestStruct {
  if !p.IsSetRequestObj() {
    return OperationalDataThriftServiceGetOperationalDataArgs_RequestObj_DEFAULT
  }
return p.RequestObj
}
func (p *OperationalDataThriftServiceGetOperationalDataArgs) IsSetRequestObj() bool {
  return p.RequestObj != nil
}

func (p *OperationalDataThriftServiceGetOperationalDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OperationalDataThriftServiceGetOperationalDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestObj = &OperationalDataRequestStruct{}
  if err := p.RequestObj.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
  }
  return nil
}

func (p *OperationalDataThriftServiceGetOperationalDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getOperationalData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OperationalDataThriftServiceGetOperationalDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err) }
  if err := p.RequestObj.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err) }
  return err
}

func (p *OperationalDataThriftServiceGetOperationalDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OperationalDataThriftServiceGetOperationalDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type OperationalDataThriftServiceGetOperationalDataResult struct {
  Success *OperationalDataResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewOperationalDataThriftServiceGetOperationalDataResult() *OperationalDataThriftServiceGetOperationalDataResult {
  return &OperationalDataThriftServiceGetOperationalDataResult{}
}

var OperationalDataThriftServiceGetOperationalDataResult_Success_DEFAULT *OperationalDataResponseStruct
func (p *OperationalDataThriftServiceGetOperationalDataResult) GetSuccess() *OperationalDataResponseStruct {
  if !p.IsSetSuccess() {
    return OperationalDataThriftServiceGetOperationalDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *OperationalDataThriftServiceGetOperationalDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *OperationalDataThriftServiceGetOperationalDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OperationalDataThriftServiceGetOperationalDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &OperationalDataResponseStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *OperationalDataThriftServiceGetOperationalDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getOperationalData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OperationalDataThriftServiceGetOperationalDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *OperationalDataThriftServiceGetOperationalDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OperationalDataThriftServiceGetOperationalDataResult(%+v)", *p)
}


