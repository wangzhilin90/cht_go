// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package borrowuserdetails

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - Name
//  - ChengHuiTongTraceLog
type BorrowUserDetailsRequestStruct struct {
	Name                 string `thrift:"name,1" db:"name" json:"name"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,2" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewBorrowerInfoRequestStruct() *BorrowUserDetailsRequestStruct {
//   return &BorrowUserDetailsRequestStruct{}
// }

func (p *BorrowUserDetailsRequestStruct) GetName() string {
	return p.Name
}

func (p *BorrowUserDetailsRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *BorrowUserDetailsRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BorrowUserDetailsRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *BorrowUserDetailsRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *BorrowUserDetailsRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BorrowUserDetailsRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BorrowUserDetailsRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *BorrowUserDetailsRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *BorrowUserDetailsRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BorrowUserDetailsRequestStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
type MaterialInfoStruct struct {
	ID   int32  `thrift:"id,1" db:"id" json:"id"`
	Name string `thrift:"name,2" db:"name" json:"name"`
}

// func NewMaterialInfoStruct() *MaterialInfoStruct {
//   return &MaterialInfoStruct{}
// }

func (p *MaterialInfoStruct) GetID() int32 {
	return p.ID
}

func (p *MaterialInfoStruct) GetName() string {
	return p.Name
}
func (p *MaterialInfoStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MaterialInfoStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *MaterialInfoStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *MaterialInfoStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("materialInfoStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MaterialInfoStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *MaterialInfoStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *MaterialInfoStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MaterialInfoStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - Realname
//  - IsBorrower
//  - CardID
//  - Credit
//  - Guarantor
//  - MaterialList
type BorrowerInfoStruct struct {
	ID           int32                 `thrift:"id,1" db:"id" json:"id"`
	Realname     string                `thrift:"realname,2" db:"realname" json:"realname"`
	IsBorrower   int32                 `thrift:"is_borrower,3" db:"is_borrower" json:"is_borrower"`
	CardID       string                `thrift:"card_id,4" db:"card_id" json:"card_id"`
	Credit       string                `thrift:"credit,5" db:"credit" json:"credit"`
	Guarantor    string                `thrift:"guarantor,6" db:"guarantor" json:"guarantor"`
	MaterialList []*MaterialInfoStruct `thrift:"materialList,7" db:"materialList" json:"materialList"`
}

// func NewBorrowerInfoStruct() *BorrowerInfoStruct {
//   return &BorrowerInfoStruct{}
// }

func (p *BorrowerInfoStruct) GetID() int32 {
	return p.ID
}

func (p *BorrowerInfoStruct) GetRealname() string {
	return p.Realname
}

func (p *BorrowerInfoStruct) GetIsBorrower() int32 {
	return p.IsBorrower
}

func (p *BorrowerInfoStruct) GetCardID() string {
	return p.CardID
}

func (p *BorrowerInfoStruct) GetCredit() string {
	return p.Credit
}

func (p *BorrowerInfoStruct) GetGuarantor() string {
	return p.Guarantor
}

func (p *BorrowerInfoStruct) GetMaterialList() []*MaterialInfoStruct {
	return p.MaterialList
}
func (p *BorrowerInfoStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BorrowerInfoStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *BorrowerInfoStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Realname = v
	}
	return nil
}

func (p *BorrowerInfoStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IsBorrower = v
	}
	return nil
}

func (p *BorrowerInfoStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CardID = v
	}
	return nil
}

func (p *BorrowerInfoStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Credit = v
	}
	return nil
}

func (p *BorrowerInfoStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Guarantor = v
	}
	return nil
}

func (p *BorrowerInfoStruct) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*MaterialInfoStruct, 0, size)
	p.MaterialList = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &MaterialInfoStruct{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.MaterialList = append(p.MaterialList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BorrowerInfoStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BorrowerInfoStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BorrowerInfoStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *BorrowerInfoStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("realname", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:realname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Realname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.realname (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:realname: ", p), err)
	}
	return err
}

func (p *BorrowerInfoStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_borrower", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_borrower: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsBorrower)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_borrower (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_borrower: ", p), err)
	}
	return err
}

func (p *BorrowerInfoStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("card_id", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:card_id: ", p), err)
	}
	if err := oprot.WriteString(string(p.CardID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.card_id (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:card_id: ", p), err)
	}
	return err
}

func (p *BorrowerInfoStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("credit", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:credit: ", p), err)
	}
	if err := oprot.WriteString(string(p.Credit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.credit (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:credit: ", p), err)
	}
	return err
}

func (p *BorrowerInfoStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("guarantor", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:guarantor: ", p), err)
	}
	if err := oprot.WriteString(string(p.Guarantor)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.guarantor (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:guarantor: ", p), err)
	}
	return err
}

func (p *BorrowerInfoStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("materialList", thrift.LIST, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:materialList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MaterialList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.MaterialList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:materialList: ", p), err)
	}
	return err
}

func (p *BorrowerInfoStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BorrowerInfoStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
//  - BorrowerInfo
type BorrowUserDetailsResponseStruct struct {
	Status       int32               `thrift:"status,1" db:"status" json:"status"`
	Msg          string              `thrift:"msg,2" db:"msg" json:"msg"`
	BorrowerInfo *BorrowerInfoStruct `thrift:"borrowerInfo,3" db:"borrowerInfo" json:"borrowerInfo"`
}

func NewBorrowerInfoResponseStruct() *BorrowUserDetailsResponseStruct {
	return &BorrowUserDetailsResponseStruct{}
}

func (p *BorrowUserDetailsResponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *BorrowUserDetailsResponseStruct) GetMsg() string {
	return p.Msg
}

var BorrowerInfoResponseStruct_BorrowerInfo_DEFAULT *BorrowerInfoStruct

func (p *BorrowUserDetailsResponseStruct) GetBorrowUserDetails() *BorrowerInfoStruct {
	if !p.IsSetBorrowerInfo() {
		return BorrowerInfoResponseStruct_BorrowerInfo_DEFAULT
	}
	return p.BorrowerInfo
}
func (p *BorrowUserDetailsResponseStruct) IsSetBorrowerInfo() bool {
	return p.BorrowerInfo != nil
}

func (p *BorrowUserDetailsResponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BorrowUserDetailsResponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *BorrowUserDetailsResponseStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *BorrowUserDetailsResponseStruct) ReadField3(iprot thrift.TProtocol) error {
	p.BorrowerInfo = &BorrowerInfoStruct{}
	if err := p.BorrowerInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BorrowerInfo), err)
	}
	return nil
}

func (p *BorrowUserDetailsResponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BorrowUserDetailsResponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BorrowUserDetailsResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *BorrowUserDetailsResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *BorrowUserDetailsResponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("borrowerInfo", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:borrowerInfo: ", p), err)
	}
	if err := p.BorrowerInfo.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BorrowerInfo), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:borrowerInfo: ", p), err)
	}
	return err
}

func (p *BorrowUserDetailsResponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BorrowUserDetailsResponseStruct(%+v)", *p)
}

type BorrowUserDetailsThriftService interface {
	// Parameters:
	//  - RequestObj
	GetBorrowUserDetails(requestObj *BorrowUserDetailsRequestStruct) (r *BorrowUserDetailsResponseStruct, err error)
}

type BorrowerThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewBorrowerThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BorrowerThriftServiceClient {
	return &BorrowerThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewBorrowerThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BorrowerThriftServiceClient {
	return &BorrowerThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RequestObj
func (p *BorrowerThriftServiceClient) GetBorrowUserDetails(requestObj *BorrowUserDetailsRequestStruct) (r *BorrowUserDetailsResponseStruct, err error) {
	if err = p.sendGetBorrowerInfo(requestObj); err != nil {
		return
	}
	return p.recvGetBorrowerInfo()
}

func (p *BorrowerThriftServiceClient) sendGetBorrowerInfo(requestObj *BorrowUserDetailsRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBorrowerInfo", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BorrowerThriftServiceGetBorrowerInfoArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BorrowerThriftServiceClient) recvGetBorrowerInfo() (value *BorrowUserDetailsResponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getBorrowerInfo" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getBorrowerInfo failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBorrowerInfo failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error2 error
		error2, err = error1.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error2
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getBorrowerInfo failed: invalid message type")
		return
	}
	result := BorrowerThriftServiceGetBorrowerInfoResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type BorrowerThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BorrowUserDetailsThriftService
}

func (p *BorrowerThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BorrowerThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BorrowerThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBorrowerThriftServiceProcessor(handler BorrowUserDetailsThriftService) *BorrowerThriftServiceProcessor {

	self3 := &BorrowerThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self3.processorMap["getBorrowerInfo"] = &borrowerThriftServiceProcessorGetBorrowerInfo{handler: handler}
	return self3
}

func (p *BorrowerThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x4

}

type borrowerThriftServiceProcessorGetBorrowerInfo struct {
	handler BorrowUserDetailsThriftService
}

func (p *borrowerThriftServiceProcessorGetBorrowerInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BorrowerThriftServiceGetBorrowerInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBorrowerInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BorrowerThriftServiceGetBorrowerInfoResult{}
	var retval *BorrowUserDetailsResponseStruct
	var err2 error
	if retval, err2 = p.handler.GetBorrowUserDetails(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBorrowerInfo: "+err2.Error())
		oprot.WriteMessageBegin("getBorrowerInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBorrowerInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type BorrowerThriftServiceGetBorrowerInfoArgs struct {
	RequestObj *BorrowUserDetailsRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewBorrowerThriftServiceGetBorrowerInfoArgs() *BorrowerThriftServiceGetBorrowerInfoArgs {
	return &BorrowerThriftServiceGetBorrowerInfoArgs{}
}

var BorrowerThriftServiceGetBorrowerInfoArgs_RequestObj_DEFAULT *BorrowUserDetailsRequestStruct

func (p *BorrowerThriftServiceGetBorrowerInfoArgs) GetRequestObj() *BorrowUserDetailsRequestStruct {
	if !p.IsSetRequestObj() {
		return BorrowerThriftServiceGetBorrowerInfoArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *BorrowerThriftServiceGetBorrowerInfoArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *BorrowerThriftServiceGetBorrowerInfoArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BorrowerThriftServiceGetBorrowerInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &BorrowUserDetailsRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *BorrowerThriftServiceGetBorrowerInfoArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBorrowerInfo_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BorrowerThriftServiceGetBorrowerInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *BorrowerThriftServiceGetBorrowerInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BorrowerThriftServiceGetBorrowerInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BorrowerThriftServiceGetBorrowerInfoResult struct {
	Success *BorrowUserDetailsResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBorrowerThriftServiceGetBorrowerInfoResult() *BorrowerThriftServiceGetBorrowerInfoResult {
	return &BorrowerThriftServiceGetBorrowerInfoResult{}
}

var BorrowerThriftServiceGetBorrowerInfoResult_Success_DEFAULT *BorrowUserDetailsResponseStruct

func (p *BorrowerThriftServiceGetBorrowerInfoResult) GetSuccess() *BorrowUserDetailsResponseStruct {
	if !p.IsSetSuccess() {
		return BorrowerThriftServiceGetBorrowerInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BorrowerThriftServiceGetBorrowerInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BorrowerThriftServiceGetBorrowerInfoResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BorrowerThriftServiceGetBorrowerInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &BorrowUserDetailsResponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *BorrowerThriftServiceGetBorrowerInfoResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBorrowerInfo_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BorrowerThriftServiceGetBorrowerInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *BorrowerThriftServiceGetBorrowerInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BorrowerThriftServiceGetBorrowerInfoResult(%+v)", *p)
}
