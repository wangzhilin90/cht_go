// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package cashrecordthriftservice

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - UserID
//  - StartTime
//  - EndTime
//  - QueryTime
//  - RechargeStatus
//  - LimitOffset
//  - LimitNum
//  - ChengHuiTongTraceLog
type CashRecordRequestStruct struct {
	UserID               int32  `thrift:"user_id,1" db:"user_id" json:"user_id"`
	StartTime            int32  `thrift:"start_time,2" db:"start_time" json:"start_time"`
	EndTime              int32  `thrift:"end_time,3" db:"end_time" json:"end_time"`
	QueryTime            int32  `thrift:"query_time,4" db:"query_time" json:"query_time"`
	RechargeStatus       int32  `thrift:"recharge_status,5" db:"recharge_status" json:"recharge_status"`
	LimitOffset          int32  `thrift:"limit_offset,6" db:"limit_offset" json:"limit_offset"`
	LimitNum             int32  `thrift:"limit_num,7" db:"limit_num" json:"limit_num"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,8" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewCashRecordRequestStruct() *CashRecordRequestStruct {
//   return &CashRecordRequestStruct{}
// }

func (p *CashRecordRequestStruct) GetUserID() int32 {
	return p.UserID
}

func (p *CashRecordRequestStruct) GetStartTime() int32 {
	return p.StartTime
}

func (p *CashRecordRequestStruct) GetEndTime() int32 {
	return p.EndTime
}

func (p *CashRecordRequestStruct) GetQueryTime() int32 {
	return p.QueryTime
}

func (p *CashRecordRequestStruct) GetRechargeStatus() int32 {
	return p.RechargeStatus
}

func (p *CashRecordRequestStruct) GetLimitOffset() int32 {
	return p.LimitOffset
}

func (p *CashRecordRequestStruct) GetLimitNum() int32 {
	return p.LimitNum
}

func (p *CashRecordRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *CashRecordRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CashRecordRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *CashRecordRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *CashRecordRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *CashRecordRequestStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.QueryTime = v
	}
	return nil
}

func (p *CashRecordRequestStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.RechargeStatus = v
	}
	return nil
}

func (p *CashRecordRequestStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.LimitOffset = v
	}
	return nil
}

func (p *CashRecordRequestStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.LimitNum = v
	}
	return nil
}

func (p *CashRecordRequestStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *CashRecordRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CashRecordRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CashRecordRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err)
	}
	return err
}

func (p *CashRecordRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_time", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_time (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start_time: ", p), err)
	}
	return err
}

func (p *CashRecordRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end_time", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:end_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.end_time (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:end_time: ", p), err)
	}
	return err
}

func (p *CashRecordRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query_time", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:query_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.QueryTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query_time (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:query_time: ", p), err)
	}
	return err
}

func (p *CashRecordRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("recharge_status", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:recharge_status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RechargeStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.recharge_status (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:recharge_status: ", p), err)
	}
	return err
}

func (p *CashRecordRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit_offset", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:limit_offset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitOffset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limit_offset (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:limit_offset: ", p), err)
	}
	return err
}

func (p *CashRecordRequestStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit_num", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:limit_num: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limit_num (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:limit_num: ", p), err)
	}
	return err
}

func (p *CashRecordRequestStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *CashRecordRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CashRecordRequestStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserID
//  - OrderSn
//  - Money
//  - Credited
//  - Fee
//  - UseReturnMoney
//  - UseFreeNum
//  - Addtime
//  - Status
//  - PayWay
//  - DealTime
//  - FailResult
type CashRecordStruct struct {
	ID             int32  `thrift:"id,1" db:"id" json:"id"`
	UserID         int32  `thrift:"user_id,2" db:"user_id" json:"user_id"`
	OrderSn        string `thrift:"order_sn,3" db:"order_sn" json:"order_sn"`
	Money          string `thrift:"money,4" db:"money" json:"money"`
	Credited       string `thrift:"credited,5" db:"credited" json:"credited"`
	Fee            string `thrift:"fee,6" db:"fee" json:"fee"`
	UseReturnMoney string `thrift:"use_return_money,7" db:"use_return_money" json:"use_return_money"`
	UseFreeNum     int32  `thrift:"use_free_num,8" db:"use_free_num" json:"use_free_num"`
	Addtime        int32  `thrift:"addtime,9" db:"addtime" json:"addtime"`
	Status         int32  `thrift:"status,10" db:"status" json:"status"`
	PayWay         int32  `thrift:"pay_way,11" db:"pay_way" json:"pay_way"`
	DealTime       int32  `thrift:"deal_time,12" db:"deal_time" json:"deal_time"`
	FailResult     string `thrift:"fail_result,13" db:"fail_result" json:"fail_result"`
}

func NewCashRecordStruct() *CashRecordStruct {
	return &CashRecordStruct{}
}

func (p *CashRecordStruct) GetID() int32 {
	return p.ID
}

func (p *CashRecordStruct) GetUserID() int32 {
	return p.UserID
}

func (p *CashRecordStruct) GetOrderSn() string {
	return p.OrderSn
}

func (p *CashRecordStruct) GetMoney() string {
	return p.Money
}

func (p *CashRecordStruct) GetCredited() string {
	return p.Credited
}

func (p *CashRecordStruct) GetFee() string {
	return p.Fee
}

func (p *CashRecordStruct) GetUseReturnMoney() string {
	return p.UseReturnMoney
}

func (p *CashRecordStruct) GetUseFreeNum() int32 {
	return p.UseFreeNum
}

func (p *CashRecordStruct) GetAddtime() int32 {
	return p.Addtime
}

func (p *CashRecordStruct) GetStatus() int32 {
	return p.Status
}

func (p *CashRecordStruct) GetPayWay() int32 {
	return p.PayWay
}

func (p *CashRecordStruct) GetDealTime() int32 {
	return p.DealTime
}

func (p *CashRecordStruct) GetFailResult() string {
	return p.FailResult
}
func (p *CashRecordStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CashRecordStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *CashRecordStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *CashRecordStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OrderSn = v
	}
	return nil
}

func (p *CashRecordStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Money = v
	}
	return nil
}

func (p *CashRecordStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Credited = v
	}
	return nil
}

func (p *CashRecordStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Fee = v
	}
	return nil
}

func (p *CashRecordStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.UseReturnMoney = v
	}
	return nil
}

func (p *CashRecordStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.UseFreeNum = v
	}
	return nil
}

func (p *CashRecordStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Addtime = v
	}
	return nil
}

func (p *CashRecordStruct) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *CashRecordStruct) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.PayWay = v
	}
	return nil
}

func (p *CashRecordStruct) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.DealTime = v
	}
	return nil
}

func (p *CashRecordStruct) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.FailResult = v
	}
	return nil
}

func (p *CashRecordStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CashRecordStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CashRecordStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *CashRecordStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err)
	}
	return err
}

func (p *CashRecordStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("order_sn", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:order_sn: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderSn)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.order_sn (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:order_sn: ", p), err)
	}
	return err
}

func (p *CashRecordStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("money", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:money: ", p), err)
	}
	if err := oprot.WriteString(string(p.Money)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.money (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:money: ", p), err)
	}
	return err
}

func (p *CashRecordStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("credited", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:credited: ", p), err)
	}
	if err := oprot.WriteString(string(p.Credited)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.credited (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:credited: ", p), err)
	}
	return err
}

func (p *CashRecordStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fee", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fee: ", p), err)
	}
	if err := oprot.WriteString(string(p.Fee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fee (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fee: ", p), err)
	}
	return err
}

func (p *CashRecordStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("use_return_money", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:use_return_money: ", p), err)
	}
	if err := oprot.WriteString(string(p.UseReturnMoney)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.use_return_money (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:use_return_money: ", p), err)
	}
	return err
}

func (p *CashRecordStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("use_free_num", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:use_free_num: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UseFreeNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.use_free_num (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:use_free_num: ", p), err)
	}
	return err
}

func (p *CashRecordStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addtime", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:addtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Addtime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addtime (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:addtime: ", p), err)
	}
	return err
}

func (p *CashRecordStruct) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:status: ", p), err)
	}
	return err
}

func (p *CashRecordStruct) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pay_way", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:pay_way: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PayWay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pay_way (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:pay_way: ", p), err)
	}
	return err
}

func (p *CashRecordStruct) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deal_time", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:deal_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DealTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deal_time (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:deal_time: ", p), err)
	}
	return err
}

func (p *CashRecordStruct) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fail_result", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:fail_result: ", p), err)
	}
	if err := oprot.WriteString(string(p.FailResult)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fail_result (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:fail_result: ", p), err)
	}
	return err
}

func (p *CashRecordStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CashRecordStruct(%+v)", *p)
}

// Attributes:
//  - Money
//  - Fee
type CashStatsStruct struct {
	Money string `thrift:"money,1" db:"money" json:"money"`
	Fee   string `thrift:"fee,2" db:"fee" json:"fee"`
}

func NewCashStatsStruct() *CashStatsStruct {
	return &CashStatsStruct{}
}

func (p *CashStatsStruct) GetMoney() string {
	return p.Money
}

func (p *CashStatsStruct) GetFee() string {
	return p.Fee
}
func (p *CashStatsStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CashStatsStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Money = v
	}
	return nil
}

func (p *CashStatsStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Fee = v
	}
	return nil
}

func (p *CashStatsStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CashStatsStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CashStatsStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("money", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:money: ", p), err)
	}
	if err := oprot.WriteString(string(p.Money)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.money (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:money: ", p), err)
	}
	return err
}

func (p *CashStatsStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fee", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fee: ", p), err)
	}
	if err := oprot.WriteString(string(p.Fee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fee (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fee: ", p), err)
	}
	return err
}

func (p *CashStatsStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CashStatsStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
//  - Totalnum
//  - CashStat
//  - CashRecordList
type CashRecordResponseStruct struct {
	Status         int32               `thrift:"status,1" db:"status" json:"status"`
	Msg            string              `thrift:"msg,2" db:"msg" json:"msg"`
	Totalnum       int32               `thrift:"totalnum,3" db:"totalnum" json:"totalnum"`
	CashStat       *CashStatsStruct    `thrift:"cashStat,4" db:"cashStat" json:"cashStat"`
	CashRecordList []*CashRecordStruct `thrift:"cashRecordList,5" db:"cashRecordList" json:"cashRecordList"`
}

func NewCashRecordResponseStruct() *CashRecordResponseStruct {
	return &CashRecordResponseStruct{}
}

func (p *CashRecordResponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *CashRecordResponseStruct) GetMsg() string {
	return p.Msg
}

func (p *CashRecordResponseStruct) GetTotalnum() int32 {
	return p.Totalnum
}

var CashRecordResponseStruct_CashStat_DEFAULT *CashStatsStruct

func (p *CashRecordResponseStruct) GetCashStat() *CashStatsStruct {
	if !p.IsSetCashStat() {
		return CashRecordResponseStruct_CashStat_DEFAULT
	}
	return p.CashStat
}

func (p *CashRecordResponseStruct) GetCashRecordList() []*CashRecordStruct {
	return p.CashRecordList
}
func (p *CashRecordResponseStruct) IsSetCashStat() bool {
	return p.CashStat != nil
}

func (p *CashRecordResponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CashRecordResponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *CashRecordResponseStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *CashRecordResponseStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Totalnum = v
	}
	return nil
}

func (p *CashRecordResponseStruct) ReadField4(iprot thrift.TProtocol) error {
	p.CashStat = &CashStatsStruct{}
	if err := p.CashStat.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CashStat), err)
	}
	return nil
}

func (p *CashRecordResponseStruct) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*CashRecordStruct, 0, size)
	p.CashRecordList = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &CashRecordStruct{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.CashRecordList = append(p.CashRecordList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CashRecordResponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CashRecordResponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CashRecordResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *CashRecordResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *CashRecordResponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalnum", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalnum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Totalnum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalnum (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalnum: ", p), err)
	}
	return err
}

func (p *CashRecordResponseStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cashStat", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:cashStat: ", p), err)
	}
	if err := p.CashStat.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CashStat), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:cashStat: ", p), err)
	}
	return err
}

func (p *CashRecordResponseStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cashRecordList", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:cashRecordList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CashRecordList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.CashRecordList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:cashRecordList: ", p), err)
	}
	return err
}

func (p *CashRecordResponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CashRecordResponseStruct(%+v)", *p)
}

type UserCashRecordListThriftService interface {
	// Parameters:
	//  - RequestObj
	getUserCashRecordList(requestObj *CashRecordRequestStruct) (r *CashRecordResponseStruct, err error)
}

type CashRecordThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewCashRecordThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CashRecordThriftServiceClient {
	return &CashRecordThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewCashRecordThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CashRecordThriftServiceClient {
	return &CashRecordThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RequestObj
func (p *CashRecordThriftServiceClient) getUserCashRecordList(requestObj *CashRecordRequestStruct) (r *CashRecordResponseStruct, err error) {
	if err = p.sendGetCashRecord(requestObj); err != nil {
		return
	}
	return p.recvGetCashRecord()
}

func (p *CashRecordThriftServiceClient) sendGetCashRecord(requestObj *CashRecordRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getCashRecord", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CashRecordThriftServiceGetCashRecordArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CashRecordThriftServiceClient) recvGetCashRecord() (value *CashRecordResponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getCashRecord" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCashRecord failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCashRecord failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error2 error
		error2, err = error1.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error2
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCashRecord failed: invalid message type")
		return
	}
	result := CashRecordThriftServiceGetCashRecordResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type CashRecordThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      UserCashRecordListThriftService
}

func (p *CashRecordThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CashRecordThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CashRecordThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCashRecordThriftServiceProcessor(handler UserCashRecordListThriftService) *CashRecordThriftServiceProcessor {

	self3 := &CashRecordThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self3.processorMap["getCashRecord"] = &cashRecordThriftServiceProcessorGetCashRecord{handler: handler}
	return self3
}

func (p *CashRecordThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x4

}

type cashRecordThriftServiceProcessorGetCashRecord struct {
	handler UserCashRecordListThriftService
}

func (p *cashRecordThriftServiceProcessorGetCashRecord) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CashRecordThriftServiceGetCashRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getCashRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CashRecordThriftServiceGetCashRecordResult{}
	var retval *CashRecordResponseStruct
	var err2 error
	if retval, err2 = p.handler.getUserCashRecordList(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCashRecord: "+err2.Error())
		oprot.WriteMessageBegin("getCashRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getCashRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type CashRecordThriftServiceGetCashRecordArgs struct {
	RequestObj *CashRecordRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewCashRecordThriftServiceGetCashRecordArgs() *CashRecordThriftServiceGetCashRecordArgs {
	return &CashRecordThriftServiceGetCashRecordArgs{}
}

var CashRecordThriftServiceGetCashRecordArgs_RequestObj_DEFAULT *CashRecordRequestStruct

func (p *CashRecordThriftServiceGetCashRecordArgs) GetRequestObj() *CashRecordRequestStruct {
	if !p.IsSetRequestObj() {
		return CashRecordThriftServiceGetCashRecordArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *CashRecordThriftServiceGetCashRecordArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *CashRecordThriftServiceGetCashRecordArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CashRecordThriftServiceGetCashRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &CashRecordRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *CashRecordThriftServiceGetCashRecordArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCashRecord_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CashRecordThriftServiceGetCashRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *CashRecordThriftServiceGetCashRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CashRecordThriftServiceGetCashRecordArgs(%+v)", *p)
}

// Attributes:
//  - Success
type CashRecordThriftServiceGetCashRecordResult struct {
	Success *CashRecordResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewCashRecordThriftServiceGetCashRecordResult() *CashRecordThriftServiceGetCashRecordResult {
	return &CashRecordThriftServiceGetCashRecordResult{}
}

var CashRecordThriftServiceGetCashRecordResult_Success_DEFAULT *CashRecordResponseStruct

func (p *CashRecordThriftServiceGetCashRecordResult) GetSuccess() *CashRecordResponseStruct {
	if !p.IsSetSuccess() {
		return CashRecordThriftServiceGetCashRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CashRecordThriftServiceGetCashRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CashRecordThriftServiceGetCashRecordResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CashRecordThriftServiceGetCashRecordResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &CashRecordResponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *CashRecordThriftServiceGetCashRecordResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getCashRecord_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CashRecordThriftServiceGetCashRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CashRecordThriftServiceGetCashRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CashRecordThriftServiceGetCashRecordResult(%+v)", *p)
}
