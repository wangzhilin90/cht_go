// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package userappbank

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - UserID
//  - ChengHuiTongTraceLog
type UserAppBankDetailsRequestStruct struct {
	UserID               int32  `thrift:"user_id,1" db:"user_id" json:"user_id"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,2" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewUserAppBankDetailsRequestStruct() *UserAppBankDetailsRequestStruct {
// 	return &UserAppBankDetailsRequestStruct{}
// }

func (p *UserAppBankDetailsRequestStruct) GetUserID() int32 {
	return p.UserID
}

func (p *UserAppBankDetailsRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *UserAppBankDetailsRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankDetailsRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserAppBankDetailsRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *UserAppBankDetailsRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAppBankDetailsRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankDetailsRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err)
	}
	return err
}

func (p *UserAppBankDetailsRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *UserAppBankDetailsRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankDetailsRequestStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserID
//  - Name
//  - Account
//  - Bank
//  - Branch
//  - Province
//  - City
//  - Area
//  - Addtime
//  - Addip
type UserAppBankDetailsStruct struct {
	ID       int32  `thrift:"id,1" db:"id" json:"id"`
	UserID   int32  `thrift:"user_id,2" db:"user_id" json:"user_id"`
	Name     string `thrift:"name,3" db:"name" json:"name"`
	Account  string `thrift:"account,4" db:"account" json:"account"`
	Bank     int32  `thrift:"bank,5" db:"bank" json:"bank"`
	Branch   string `thrift:"branch,6" db:"branch" json:"branch"`
	Province int32  `thrift:"province,7" db:"province" json:"province"`
	City     int32  `thrift:"city,8" db:"city" json:"city"`
	Area     int32  `thrift:"area,9" db:"area" json:"area"`
	Addtime  int32  `thrift:"addtime,10" db:"addtime" json:"addtime"`
	Addip    string `thrift:"addip,11" db:"addip" json:"addip"`
}

func NewUserAppBankDetailsStruct() *UserAppBankDetailsStruct {
	return &UserAppBankDetailsStruct{}
}

func (p *UserAppBankDetailsStruct) GetID() int32 {
	return p.ID
}

func (p *UserAppBankDetailsStruct) GetUserID() int32 {
	return p.UserID
}

func (p *UserAppBankDetailsStruct) GetName() string {
	return p.Name
}

func (p *UserAppBankDetailsStruct) GetAccount() string {
	return p.Account
}

func (p *UserAppBankDetailsStruct) GetBank() int32 {
	return p.Bank
}

func (p *UserAppBankDetailsStruct) GetBranch() string {
	return p.Branch
}

func (p *UserAppBankDetailsStruct) GetProvince() int32 {
	return p.Province
}

func (p *UserAppBankDetailsStruct) GetCity() int32 {
	return p.City
}

func (p *UserAppBankDetailsStruct) GetArea() int32 {
	return p.Area
}

func (p *UserAppBankDetailsStruct) GetAddtime() int32 {
	return p.Addtime
}

func (p *UserAppBankDetailsStruct) GetAddip() string {
	return p.Addip
}
func (p *UserAppBankDetailsStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankDetailsStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserAppBankDetailsStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserAppBankDetailsStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *UserAppBankDetailsStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Account = v
	}
	return nil
}

func (p *UserAppBankDetailsStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Bank = v
	}
	return nil
}

func (p *UserAppBankDetailsStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Branch = v
	}
	return nil
}

func (p *UserAppBankDetailsStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Province = v
	}
	return nil
}

func (p *UserAppBankDetailsStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.City = v
	}
	return nil
}

func (p *UserAppBankDetailsStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Area = v
	}
	return nil
}

func (p *UserAppBankDetailsStruct) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Addtime = v
	}
	return nil
}

func (p *UserAppBankDetailsStruct) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Addip = v
	}
	return nil
}

func (p *UserAppBankDetailsStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAppBankDetailsStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankDetailsStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserAppBankDetailsStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err)
	}
	return err
}

func (p *UserAppBankDetailsStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err)
	}
	return err
}

func (p *UserAppBankDetailsStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("account", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:account: ", p), err)
	}
	if err := oprot.WriteString(string(p.Account)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.account (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:account: ", p), err)
	}
	return err
}

func (p *UserAppBankDetailsStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bank", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bank: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Bank)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bank (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bank: ", p), err)
	}
	return err
}

func (p *UserAppBankDetailsStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("branch", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:branch: ", p), err)
	}
	if err := oprot.WriteString(string(p.Branch)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.branch (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:branch: ", p), err)
	}
	return err
}

func (p *UserAppBankDetailsStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("province", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:province: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Province)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.province (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:province: ", p), err)
	}
	return err
}

func (p *UserAppBankDetailsStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("city", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:city: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.City)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.city (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:city: ", p), err)
	}
	return err
}

func (p *UserAppBankDetailsStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("area", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:area: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Area)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.area (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:area: ", p), err)
	}
	return err
}

func (p *UserAppBankDetailsStruct) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addtime", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:addtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Addtime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addtime (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:addtime: ", p), err)
	}
	return err
}

func (p *UserAppBankDetailsStruct) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addip", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:addip: ", p), err)
	}
	if err := oprot.WriteString(string(p.Addip)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addip (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:addip: ", p), err)
	}
	return err
}

func (p *UserAppBankDetailsStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankDetailsStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - UserAppBankDetails
//  - Msg
type UserAppBankDetailsResponseStruct struct {
	Status             int32                     `thrift:"status,1" db:"status" json:"status"`
	UserAppBankDetails *UserAppBankDetailsStruct `thrift:"UserAppBankDetails,2" db:"UserAppBankDetails" json:"UserAppBankDetails"`
	Msg                string                    `thrift:"msg,3" db:"msg" json:"msg"`
}

func NewUserAppBankDetailsResponseStruct() *UserAppBankDetailsResponseStruct {
	return &UserAppBankDetailsResponseStruct{}
}

func (p *UserAppBankDetailsResponseStruct) GetStatus() int32 {
	return p.Status
}

var UserAppBankDetailsResponseStruct_UserAppBankDetails_DEFAULT *UserAppBankDetailsStruct

func (p *UserAppBankDetailsResponseStruct) GetUserAppBankDetails() *UserAppBankDetailsStruct {
	if !p.IsSetUserAppBankDetails() {
		return UserAppBankDetailsResponseStruct_UserAppBankDetails_DEFAULT
	}
	return p.UserAppBankDetails
}

func (p *UserAppBankDetailsResponseStruct) GetMsg() string {
	return p.Msg
}
func (p *UserAppBankDetailsResponseStruct) IsSetUserAppBankDetails() bool {
	return p.UserAppBankDetails != nil
}

func (p *UserAppBankDetailsResponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankDetailsResponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *UserAppBankDetailsResponseStruct) ReadField2(iprot thrift.TProtocol) error {
	p.UserAppBankDetails = &UserAppBankDetailsStruct{}
	if err := p.UserAppBankDetails.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserAppBankDetails), err)
	}
	return nil
}

func (p *UserAppBankDetailsResponseStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *UserAppBankDetailsResponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAppBankDetailsResponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankDetailsResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *UserAppBankDetailsResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UserAppBankDetails", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserAppBankDetails: ", p), err)
	}
	if err := p.UserAppBankDetails.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserAppBankDetails), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserAppBankDetails: ", p), err)
	}
	return err
}

func (p *UserAppBankDetailsResponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:msg: ", p), err)
	}
	return err
}

func (p *UserAppBankDetailsResponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankDetailsResponseStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserID
//  - Name
//  - Account
//  - Bank
//  - Branch
//  - Province
//  - City
//  - Area
//  - Addtime
//  - Addip
//  - ChengHuiTongTraceLog
type UserAppBankUpdateRequestStruct struct {
	ID                   int32  `thrift:"id,1" db:"id" json:"id"`
	UserID               int32  `thrift:"user_id,2" db:"user_id" json:"user_id"`
	Name                 string `thrift:"name,3" db:"name" json:"name"`
	Account              string `thrift:"account,4" db:"account" json:"account"`
	Bank                 int32  `thrift:"bank,5" db:"bank" json:"bank"`
	Branch               string `thrift:"branch,6" db:"branch" json:"branch"`
	Province             int32  `thrift:"province,7" db:"province" json:"province"`
	City                 int32  `thrift:"city,8" db:"city" json:"city"`
	Area                 int32  `thrift:"area,9" db:"area" json:"area"`
	Addtime              int32  `thrift:"addtime,10" db:"addtime" json:"addtime"`
	Addip                string `thrift:"addip,11" db:"addip" json:"addip"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,12" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewUserAppBankUpdateRequestStruct() *UserAppBankUpdateRequestStruct {
// 	return &UserAppBankUpdateRequestStruct{}
// }

func (p *UserAppBankUpdateRequestStruct) GetID() int32 {
	return p.ID
}

func (p *UserAppBankUpdateRequestStruct) GetUserID() int32 {
	return p.UserID
}

func (p *UserAppBankUpdateRequestStruct) GetName() string {
	return p.Name
}

func (p *UserAppBankUpdateRequestStruct) GetAccount() string {
	return p.Account
}

func (p *UserAppBankUpdateRequestStruct) GetBank() int32 {
	return p.Bank
}

func (p *UserAppBankUpdateRequestStruct) GetBranch() string {
	return p.Branch
}

func (p *UserAppBankUpdateRequestStruct) GetProvince() int32 {
	return p.Province
}

func (p *UserAppBankUpdateRequestStruct) GetCity() int32 {
	return p.City
}

func (p *UserAppBankUpdateRequestStruct) GetArea() int32 {
	return p.Area
}

func (p *UserAppBankUpdateRequestStruct) GetAddtime() int32 {
	return p.Addtime
}

func (p *UserAppBankUpdateRequestStruct) GetAddip() string {
	return p.Addip
}

func (p *UserAppBankUpdateRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *UserAppBankUpdateRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankUpdateRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserAppBankUpdateRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserAppBankUpdateRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *UserAppBankUpdateRequestStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Account = v
	}
	return nil
}

func (p *UserAppBankUpdateRequestStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Bank = v
	}
	return nil
}

func (p *UserAppBankUpdateRequestStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Branch = v
	}
	return nil
}

func (p *UserAppBankUpdateRequestStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Province = v
	}
	return nil
}

func (p *UserAppBankUpdateRequestStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.City = v
	}
	return nil
}

func (p *UserAppBankUpdateRequestStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Area = v
	}
	return nil
}

func (p *UserAppBankUpdateRequestStruct) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Addtime = v
	}
	return nil
}

func (p *UserAppBankUpdateRequestStruct) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Addip = v
	}
	return nil
}

func (p *UserAppBankUpdateRequestStruct) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *UserAppBankUpdateRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAppBankUpdateRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankUpdateRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserAppBankUpdateRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err)
	}
	return err
}

func (p *UserAppBankUpdateRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err)
	}
	return err
}

func (p *UserAppBankUpdateRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("account", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:account: ", p), err)
	}
	if err := oprot.WriteString(string(p.Account)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.account (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:account: ", p), err)
	}
	return err
}

func (p *UserAppBankUpdateRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bank", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bank: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Bank)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bank (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bank: ", p), err)
	}
	return err
}

func (p *UserAppBankUpdateRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("branch", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:branch: ", p), err)
	}
	if err := oprot.WriteString(string(p.Branch)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.branch (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:branch: ", p), err)
	}
	return err
}

func (p *UserAppBankUpdateRequestStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("province", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:province: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Province)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.province (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:province: ", p), err)
	}
	return err
}

func (p *UserAppBankUpdateRequestStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("city", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:city: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.City)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.city (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:city: ", p), err)
	}
	return err
}

func (p *UserAppBankUpdateRequestStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("area", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:area: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Area)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.area (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:area: ", p), err)
	}
	return err
}

func (p *UserAppBankUpdateRequestStruct) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addtime", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:addtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Addtime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addtime (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:addtime: ", p), err)
	}
	return err
}

func (p *UserAppBankUpdateRequestStruct) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addip", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:addip: ", p), err)
	}
	if err := oprot.WriteString(string(p.Addip)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addip (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:addip: ", p), err)
	}
	return err
}

func (p *UserAppBankUpdateRequestStruct) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *UserAppBankUpdateRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankUpdateRequestStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
type UserAppBankUpdateResponseStruct struct {
	Status int32  `thrift:"status,1" db:"status" json:"status"`
	Msg    string `thrift:"msg,2" db:"msg" json:"msg"`
}

func NewUserAppBankUpdateResponseStruct() *UserAppBankUpdateResponseStruct {
	return &UserAppBankUpdateResponseStruct{}
}

func (p *UserAppBankUpdateResponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *UserAppBankUpdateResponseStruct) GetMsg() string {
	return p.Msg
}
func (p *UserAppBankUpdateResponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankUpdateResponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *UserAppBankUpdateResponseStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *UserAppBankUpdateResponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAppBankUpdateResponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankUpdateResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *UserAppBankUpdateResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *UserAppBankUpdateResponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankUpdateResponseStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserID
//  - Name
//  - Account
//  - Bank
//  - Branch
//  - Province
//  - City
//  - Area
//  - Addtime
//  - Addip
//  - ChengHuiTongTraceLog
type UserAppBankInsertRequestStruct struct {
	ID                   int32  `thrift:"id,1" db:"id" json:"id"`
	UserID               int32  `thrift:"user_id,2" db:"user_id" json:"user_id"`
	Name                 string `thrift:"name,3" db:"name" json:"name"`
	Account              string `thrift:"account,4" db:"account" json:"account"`
	Bank                 int32  `thrift:"bank,5" db:"bank" json:"bank"`
	Branch               string `thrift:"branch,6" db:"branch" json:"branch"`
	Province             int32  `thrift:"province,7" db:"province" json:"province"`
	City                 int32  `thrift:"city,8" db:"city" json:"city"`
	Area                 int32  `thrift:"area,9" db:"area" json:"area"`
	Addtime              int32  `thrift:"addtime,10" db:"addtime" json:"addtime"`
	Addip                string `thrift:"addip,11" db:"addip" json:"addip"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,12" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewUserAppBankInsertRequestStruct() *UserAppBankInsertRequestStruct {
// 	return &UserAppBankInsertRequestStruct{}
// }

func (p *UserAppBankInsertRequestStruct) GetID() int32 {
	return p.ID
}

func (p *UserAppBankInsertRequestStruct) GetUserID() int32 {
	return p.UserID
}

func (p *UserAppBankInsertRequestStruct) GetName() string {
	return p.Name
}

func (p *UserAppBankInsertRequestStruct) GetAccount() string {
	return p.Account
}

func (p *UserAppBankInsertRequestStruct) GetBank() int32 {
	return p.Bank
}

func (p *UserAppBankInsertRequestStruct) GetBranch() string {
	return p.Branch
}

func (p *UserAppBankInsertRequestStruct) GetProvince() int32 {
	return p.Province
}

func (p *UserAppBankInsertRequestStruct) GetCity() int32 {
	return p.City
}

func (p *UserAppBankInsertRequestStruct) GetArea() int32 {
	return p.Area
}

func (p *UserAppBankInsertRequestStruct) GetAddtime() int32 {
	return p.Addtime
}

func (p *UserAppBankInsertRequestStruct) GetAddip() string {
	return p.Addip
}

func (p *UserAppBankInsertRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *UserAppBankInsertRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankInsertRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *UserAppBankInsertRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserAppBankInsertRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *UserAppBankInsertRequestStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Account = v
	}
	return nil
}

func (p *UserAppBankInsertRequestStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Bank = v
	}
	return nil
}

func (p *UserAppBankInsertRequestStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Branch = v
	}
	return nil
}

func (p *UserAppBankInsertRequestStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Province = v
	}
	return nil
}

func (p *UserAppBankInsertRequestStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.City = v
	}
	return nil
}

func (p *UserAppBankInsertRequestStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Area = v
	}
	return nil
}

func (p *UserAppBankInsertRequestStruct) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Addtime = v
	}
	return nil
}

func (p *UserAppBankInsertRequestStruct) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Addip = v
	}
	return nil
}

func (p *UserAppBankInsertRequestStruct) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *UserAppBankInsertRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAppBankInsertRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankInsertRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *UserAppBankInsertRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err)
	}
	return err
}

func (p *UserAppBankInsertRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err)
	}
	return err
}

func (p *UserAppBankInsertRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("account", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:account: ", p), err)
	}
	if err := oprot.WriteString(string(p.Account)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.account (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:account: ", p), err)
	}
	return err
}

func (p *UserAppBankInsertRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bank", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bank: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Bank)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.bank (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bank: ", p), err)
	}
	return err
}

func (p *UserAppBankInsertRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("branch", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:branch: ", p), err)
	}
	if err := oprot.WriteString(string(p.Branch)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.branch (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:branch: ", p), err)
	}
	return err
}

func (p *UserAppBankInsertRequestStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("province", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:province: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Province)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.province (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:province: ", p), err)
	}
	return err
}

func (p *UserAppBankInsertRequestStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("city", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:city: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.City)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.city (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:city: ", p), err)
	}
	return err
}

func (p *UserAppBankInsertRequestStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("area", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:area: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Area)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.area (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:area: ", p), err)
	}
	return err
}

func (p *UserAppBankInsertRequestStruct) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addtime", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:addtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Addtime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addtime (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:addtime: ", p), err)
	}
	return err
}

func (p *UserAppBankInsertRequestStruct) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addip", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:addip: ", p), err)
	}
	if err := oprot.WriteString(string(p.Addip)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addip (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:addip: ", p), err)
	}
	return err
}

func (p *UserAppBankInsertRequestStruct) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *UserAppBankInsertRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankInsertRequestStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
type UserAppBankInsertResponseStruct struct {
	Status int32  `thrift:"status,1" db:"status" json:"status"`
	Msg    string `thrift:"msg,2" db:"msg" json:"msg"`
}

func NewUserAppBankInsertResponseStruct() *UserAppBankInsertResponseStruct {
	return &UserAppBankInsertResponseStruct{}
}

func (p *UserAppBankInsertResponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *UserAppBankInsertResponseStruct) GetMsg() string {
	return p.Msg
}
func (p *UserAppBankInsertResponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankInsertResponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *UserAppBankInsertResponseStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *UserAppBankInsertResponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAppBankInsertResponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankInsertResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *UserAppBankInsertResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *UserAppBankInsertResponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankInsertResponseStruct(%+v)", *p)
}

// Attributes:
//  - UserID
//  - ChengHuiTongTraceLog
type UserAppBankDeleteRequestStruct struct {
	UserID               int32  `thrift:"user_id,1" db:"user_id" json:"user_id"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,2" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewUserAppBankDeleteRequestStruct() *UserAppBankDeleteRequestStruct {
// 	return &UserAppBankDeleteRequestStruct{}
// }

func (p *UserAppBankDeleteRequestStruct) GetUserID() int32 {
	return p.UserID
}

func (p *UserAppBankDeleteRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *UserAppBankDeleteRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankDeleteRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserAppBankDeleteRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *UserAppBankDeleteRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAppBankDeleteRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankDeleteRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err)
	}
	return err
}

func (p *UserAppBankDeleteRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *UserAppBankDeleteRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankDeleteRequestStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
type UserAppBankDeleteResponseStruct struct {
	Status int32  `thrift:"status,1" db:"status" json:"status"`
	Msg    string `thrift:"msg,2" db:"msg" json:"msg"`
}

func NewUserAppBankDeleteResponseStruct() *UserAppBankDeleteResponseStruct {
	return &UserAppBankDeleteResponseStruct{}
}

func (p *UserAppBankDeleteResponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *UserAppBankDeleteResponseStruct) GetMsg() string {
	return p.Msg
}
func (p *UserAppBankDeleteResponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankDeleteResponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *UserAppBankDeleteResponseStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *UserAppBankDeleteResponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAppBankDeleteResponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankDeleteResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *UserAppBankDeleteResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *UserAppBankDeleteResponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankDeleteResponseStruct(%+v)", *p)
}

type UserAppBankThriftService interface {
	// Parameters:
	//  - RequestObj
	GetUserAppBankDetails(requestObj *UserAppBankDetailsRequestStruct) (r *UserAppBankDetailsResponseStruct, err error)
	// Parameters:
	//  - RequestObj
	UpdateUserAppBank(requestObj *UserAppBankUpdateRequestStruct) (r *UserAppBankUpdateResponseStruct, err error)
	// Parameters:
	//  - RequestObj
	InsertUserAppBank(requestObj *UserAppBankInsertRequestStruct) (r *UserAppBankInsertResponseStruct, err error)
	// Parameters:
	//  - RequestObj
	DeletetUserAppBank(requestObj *UserAppBankDeleteRequestStruct) (r *UserAppBankDeleteResponseStruct, err error)
}

type UserAppBankThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewUserAppBankThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserAppBankThriftServiceClient {
	return &UserAppBankThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewUserAppBankThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserAppBankThriftServiceClient {
	return &UserAppBankThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RequestObj
func (p *UserAppBankThriftServiceClient) GetUserAppBankDetails(requestObj *UserAppBankDetailsRequestStruct) (r *UserAppBankDetailsResponseStruct, err error) {
	if err = p.sendGetUserAppBankDetails(requestObj); err != nil {
		return
	}
	return p.recvGetUserAppBankDetails()
}

func (p *UserAppBankThriftServiceClient) sendGetUserAppBankDetails(requestObj *UserAppBankDetailsRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserAppBankDetails", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserAppBankThriftServiceGetUserAppBankDetailsArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserAppBankThriftServiceClient) recvGetUserAppBankDetails() (value *UserAppBankDetailsResponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserAppBankDetails" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserAppBankDetails failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserAppBankDetails failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserAppBankDetails failed: invalid message type")
		return
	}
	result := UserAppBankThriftServiceGetUserAppBankDetailsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RequestObj
func (p *UserAppBankThriftServiceClient) UpdateUserAppBank(requestObj *UserAppBankUpdateRequestStruct) (r *UserAppBankUpdateResponseStruct, err error) {
	if err = p.sendUpdateUserAppBank(requestObj); err != nil {
		return
	}
	return p.recvUpdateUserAppBank()
}

func (p *UserAppBankThriftServiceClient) sendUpdateUserAppBank(requestObj *UserAppBankUpdateRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateUserAppBank", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserAppBankThriftServiceUpdateUserAppBankArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserAppBankThriftServiceClient) recvUpdateUserAppBank() (value *UserAppBankUpdateResponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateUserAppBank" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateUserAppBank failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateUserAppBank failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateUserAppBank failed: invalid message type")
		return
	}
	result := UserAppBankThriftServiceUpdateUserAppBankResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RequestObj
func (p *UserAppBankThriftServiceClient) InsertUserAppBank(requestObj *UserAppBankInsertRequestStruct) (r *UserAppBankInsertResponseStruct, err error) {
	if err = p.sendInsertUserAppBank(requestObj); err != nil {
		return
	}
	return p.recvInsertUserAppBank()
}

func (p *UserAppBankThriftServiceClient) sendInsertUserAppBank(requestObj *UserAppBankInsertRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("insertUserAppBank", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserAppBankThriftServiceInsertUserAppBankArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserAppBankThriftServiceClient) recvInsertUserAppBank() (value *UserAppBankInsertResponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "insertUserAppBank" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "insertUserAppBank failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "insertUserAppBank failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "insertUserAppBank failed: invalid message type")
		return
	}
	result := UserAppBankThriftServiceInsertUserAppBankResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RequestObj
func (p *UserAppBankThriftServiceClient) DeletetUserAppBank(requestObj *UserAppBankDeleteRequestStruct) (r *UserAppBankDeleteResponseStruct, err error) {
	if err = p.sendDeletetUserAppBank(requestObj); err != nil {
		return
	}
	return p.recvDeletetUserAppBank()
}

func (p *UserAppBankThriftServiceClient) sendDeletetUserAppBank(requestObj *UserAppBankDeleteRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deletetUserAppBank", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserAppBankThriftServiceDeletetUserAppBankArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserAppBankThriftServiceClient) recvDeletetUserAppBank() (value *UserAppBankDeleteResponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deletetUserAppBank" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deletetUserAppBank failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deletetUserAppBank failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deletetUserAppBank failed: invalid message type")
		return
	}
	result := UserAppBankThriftServiceDeletetUserAppBankResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type UserAppBankThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      UserAppBankThriftService
}

func (p *UserAppBankThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *UserAppBankThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *UserAppBankThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewUserAppBankThriftServiceProcessor(handler UserAppBankThriftService) *UserAppBankThriftServiceProcessor {

	self8 := &UserAppBankThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self8.processorMap["getUserAppBankDetails"] = &userAppBankThriftServiceProcessorGetUserAppBankDetails{handler: handler}
	self8.processorMap["updateUserAppBank"] = &userAppBankThriftServiceProcessorUpdateUserAppBank{handler: handler}
	self8.processorMap["insertUserAppBank"] = &userAppBankThriftServiceProcessorInsertUserAppBank{handler: handler}
	self8.processorMap["deletetUserAppBank"] = &userAppBankThriftServiceProcessorDeletetUserAppBank{handler: handler}
	return self8
}

func (p *UserAppBankThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x9.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x9

}

type userAppBankThriftServiceProcessorGetUserAppBankDetails struct {
	handler UserAppBankThriftService
}

func (p *userAppBankThriftServiceProcessorGetUserAppBankDetails) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserAppBankThriftServiceGetUserAppBankDetailsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserAppBankDetails", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserAppBankThriftServiceGetUserAppBankDetailsResult{}
	var retval *UserAppBankDetailsResponseStruct
	var err2 error
	if retval, err2 = p.handler.GetUserAppBankDetails(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserAppBankDetails: "+err2.Error())
		oprot.WriteMessageBegin("getUserAppBankDetails", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getUserAppBankDetails", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userAppBankThriftServiceProcessorUpdateUserAppBank struct {
	handler UserAppBankThriftService
}

func (p *userAppBankThriftServiceProcessorUpdateUserAppBank) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserAppBankThriftServiceUpdateUserAppBankArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateUserAppBank", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserAppBankThriftServiceUpdateUserAppBankResult{}
	var retval *UserAppBankUpdateResponseStruct
	var err2 error
	if retval, err2 = p.handler.UpdateUserAppBank(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUserAppBank: "+err2.Error())
		oprot.WriteMessageBegin("updateUserAppBank", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateUserAppBank", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userAppBankThriftServiceProcessorInsertUserAppBank struct {
	handler UserAppBankThriftService
}

func (p *userAppBankThriftServiceProcessorInsertUserAppBank) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserAppBankThriftServiceInsertUserAppBankArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("insertUserAppBank", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserAppBankThriftServiceInsertUserAppBankResult{}
	var retval *UserAppBankInsertResponseStruct
	var err2 error
	if retval, err2 = p.handler.InsertUserAppBank(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insertUserAppBank: "+err2.Error())
		oprot.WriteMessageBegin("insertUserAppBank", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("insertUserAppBank", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userAppBankThriftServiceProcessorDeletetUserAppBank struct {
	handler UserAppBankThriftService
}

func (p *userAppBankThriftServiceProcessorDeletetUserAppBank) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserAppBankThriftServiceDeletetUserAppBankArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deletetUserAppBank", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserAppBankThriftServiceDeletetUserAppBankResult{}
	var retval *UserAppBankDeleteResponseStruct
	var err2 error
	if retval, err2 = p.handler.DeletetUserAppBank(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deletetUserAppBank: "+err2.Error())
		oprot.WriteMessageBegin("deletetUserAppBank", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("deletetUserAppBank", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type UserAppBankThriftServiceGetUserAppBankDetailsArgs struct {
	RequestObj *UserAppBankDetailsRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewUserAppBankThriftServiceGetUserAppBankDetailsArgs() *UserAppBankThriftServiceGetUserAppBankDetailsArgs {
	return &UserAppBankThriftServiceGetUserAppBankDetailsArgs{}
}

var UserAppBankThriftServiceGetUserAppBankDetailsArgs_RequestObj_DEFAULT *UserAppBankDetailsRequestStruct

func (p *UserAppBankThriftServiceGetUserAppBankDetailsArgs) GetRequestObj() *UserAppBankDetailsRequestStruct {
	if !p.IsSetRequestObj() {
		return UserAppBankThriftServiceGetUserAppBankDetailsArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *UserAppBankThriftServiceGetUserAppBankDetailsArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *UserAppBankThriftServiceGetUserAppBankDetailsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankThriftServiceGetUserAppBankDetailsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &UserAppBankDetailsRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *UserAppBankThriftServiceGetUserAppBankDetailsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserAppBankDetails_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankThriftServiceGetUserAppBankDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *UserAppBankThriftServiceGetUserAppBankDetailsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankThriftServiceGetUserAppBankDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserAppBankThriftServiceGetUserAppBankDetailsResult struct {
	Success *UserAppBankDetailsResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserAppBankThriftServiceGetUserAppBankDetailsResult() *UserAppBankThriftServiceGetUserAppBankDetailsResult {
	return &UserAppBankThriftServiceGetUserAppBankDetailsResult{}
}

var UserAppBankThriftServiceGetUserAppBankDetailsResult_Success_DEFAULT *UserAppBankDetailsResponseStruct

func (p *UserAppBankThriftServiceGetUserAppBankDetailsResult) GetSuccess() *UserAppBankDetailsResponseStruct {
	if !p.IsSetSuccess() {
		return UserAppBankThriftServiceGetUserAppBankDetailsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserAppBankThriftServiceGetUserAppBankDetailsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserAppBankThriftServiceGetUserAppBankDetailsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankThriftServiceGetUserAppBankDetailsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserAppBankDetailsResponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserAppBankThriftServiceGetUserAppBankDetailsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserAppBankDetails_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankThriftServiceGetUserAppBankDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserAppBankThriftServiceGetUserAppBankDetailsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankThriftServiceGetUserAppBankDetailsResult(%+v)", *p)
}

// Attributes:
//  - RequestObj
type UserAppBankThriftServiceUpdateUserAppBankArgs struct {
	RequestObj *UserAppBankUpdateRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewUserAppBankThriftServiceUpdateUserAppBankArgs() *UserAppBankThriftServiceUpdateUserAppBankArgs {
	return &UserAppBankThriftServiceUpdateUserAppBankArgs{}
}

var UserAppBankThriftServiceUpdateUserAppBankArgs_RequestObj_DEFAULT *UserAppBankUpdateRequestStruct

func (p *UserAppBankThriftServiceUpdateUserAppBankArgs) GetRequestObj() *UserAppBankUpdateRequestStruct {
	if !p.IsSetRequestObj() {
		return UserAppBankThriftServiceUpdateUserAppBankArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *UserAppBankThriftServiceUpdateUserAppBankArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *UserAppBankThriftServiceUpdateUserAppBankArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankThriftServiceUpdateUserAppBankArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &UserAppBankUpdateRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *UserAppBankThriftServiceUpdateUserAppBankArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateUserAppBank_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankThriftServiceUpdateUserAppBankArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *UserAppBankThriftServiceUpdateUserAppBankArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankThriftServiceUpdateUserAppBankArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserAppBankThriftServiceUpdateUserAppBankResult struct {
	Success *UserAppBankUpdateResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserAppBankThriftServiceUpdateUserAppBankResult() *UserAppBankThriftServiceUpdateUserAppBankResult {
	return &UserAppBankThriftServiceUpdateUserAppBankResult{}
}

var UserAppBankThriftServiceUpdateUserAppBankResult_Success_DEFAULT *UserAppBankUpdateResponseStruct

func (p *UserAppBankThriftServiceUpdateUserAppBankResult) GetSuccess() *UserAppBankUpdateResponseStruct {
	if !p.IsSetSuccess() {
		return UserAppBankThriftServiceUpdateUserAppBankResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserAppBankThriftServiceUpdateUserAppBankResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserAppBankThriftServiceUpdateUserAppBankResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankThriftServiceUpdateUserAppBankResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserAppBankUpdateResponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserAppBankThriftServiceUpdateUserAppBankResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateUserAppBank_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankThriftServiceUpdateUserAppBankResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserAppBankThriftServiceUpdateUserAppBankResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankThriftServiceUpdateUserAppBankResult(%+v)", *p)
}

// Attributes:
//  - RequestObj
type UserAppBankThriftServiceInsertUserAppBankArgs struct {
	RequestObj *UserAppBankInsertRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewUserAppBankThriftServiceInsertUserAppBankArgs() *UserAppBankThriftServiceInsertUserAppBankArgs {
	return &UserAppBankThriftServiceInsertUserAppBankArgs{}
}

var UserAppBankThriftServiceInsertUserAppBankArgs_RequestObj_DEFAULT *UserAppBankInsertRequestStruct

func (p *UserAppBankThriftServiceInsertUserAppBankArgs) GetRequestObj() *UserAppBankInsertRequestStruct {
	if !p.IsSetRequestObj() {
		return UserAppBankThriftServiceInsertUserAppBankArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *UserAppBankThriftServiceInsertUserAppBankArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *UserAppBankThriftServiceInsertUserAppBankArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankThriftServiceInsertUserAppBankArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &UserAppBankInsertRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *UserAppBankThriftServiceInsertUserAppBankArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("insertUserAppBank_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankThriftServiceInsertUserAppBankArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *UserAppBankThriftServiceInsertUserAppBankArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankThriftServiceInsertUserAppBankArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserAppBankThriftServiceInsertUserAppBankResult struct {
	Success *UserAppBankInsertResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserAppBankThriftServiceInsertUserAppBankResult() *UserAppBankThriftServiceInsertUserAppBankResult {
	return &UserAppBankThriftServiceInsertUserAppBankResult{}
}

var UserAppBankThriftServiceInsertUserAppBankResult_Success_DEFAULT *UserAppBankInsertResponseStruct

func (p *UserAppBankThriftServiceInsertUserAppBankResult) GetSuccess() *UserAppBankInsertResponseStruct {
	if !p.IsSetSuccess() {
		return UserAppBankThriftServiceInsertUserAppBankResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserAppBankThriftServiceInsertUserAppBankResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserAppBankThriftServiceInsertUserAppBankResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankThriftServiceInsertUserAppBankResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserAppBankInsertResponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserAppBankThriftServiceInsertUserAppBankResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("insertUserAppBank_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankThriftServiceInsertUserAppBankResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserAppBankThriftServiceInsertUserAppBankResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankThriftServiceInsertUserAppBankResult(%+v)", *p)
}

// Attributes:
//  - RequestObj
type UserAppBankThriftServiceDeletetUserAppBankArgs struct {
	RequestObj *UserAppBankDeleteRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewUserAppBankThriftServiceDeletetUserAppBankArgs() *UserAppBankThriftServiceDeletetUserAppBankArgs {
	return &UserAppBankThriftServiceDeletetUserAppBankArgs{}
}

var UserAppBankThriftServiceDeletetUserAppBankArgs_RequestObj_DEFAULT *UserAppBankDeleteRequestStruct

func (p *UserAppBankThriftServiceDeletetUserAppBankArgs) GetRequestObj() *UserAppBankDeleteRequestStruct {
	if !p.IsSetRequestObj() {
		return UserAppBankThriftServiceDeletetUserAppBankArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *UserAppBankThriftServiceDeletetUserAppBankArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *UserAppBankThriftServiceDeletetUserAppBankArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankThriftServiceDeletetUserAppBankArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &UserAppBankDeleteRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *UserAppBankThriftServiceDeletetUserAppBankArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deletetUserAppBank_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankThriftServiceDeletetUserAppBankArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *UserAppBankThriftServiceDeletetUserAppBankArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankThriftServiceDeletetUserAppBankArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserAppBankThriftServiceDeletetUserAppBankResult struct {
	Success *UserAppBankDeleteResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserAppBankThriftServiceDeletetUserAppBankResult() *UserAppBankThriftServiceDeletetUserAppBankResult {
	return &UserAppBankThriftServiceDeletetUserAppBankResult{}
}

var UserAppBankThriftServiceDeletetUserAppBankResult_Success_DEFAULT *UserAppBankDeleteResponseStruct

func (p *UserAppBankThriftServiceDeletetUserAppBankResult) GetSuccess() *UserAppBankDeleteResponseStruct {
	if !p.IsSetSuccess() {
		return UserAppBankThriftServiceDeletetUserAppBankResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserAppBankThriftServiceDeletetUserAppBankResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserAppBankThriftServiceDeletetUserAppBankResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAppBankThriftServiceDeletetUserAppBankResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserAppBankDeleteResponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserAppBankThriftServiceDeletetUserAppBankResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deletetUserAppBank_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAppBankThriftServiceDeletetUserAppBankResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserAppBankThriftServiceDeletetUserAppBankResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAppBankThriftServiceDeletetUserAppBankResult(%+v)", *p)
}
