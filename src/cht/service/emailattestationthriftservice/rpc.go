// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package emailattestationthriftservice

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - Email
//  - UserID
//  - ChengHuiTongTraceLog
type CheckEmailUseRequestStruct struct {
	Email                string `thrift:"email,1" db:"email" json:"email"`
	UserID               int32  `thrift:"user_id,2" db:"user_id" json:"user_id"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,3" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewCheckEmailUseRequestStruct() *CheckEmailUseRequestStruct {
//   return &CheckEmailUseRequestStruct{}
// }

func (p *CheckEmailUseRequestStruct) GetEmail() string {
	return p.Email
}

func (p *CheckEmailUseRequestStruct) GetUserID() int32 {
	return p.UserID
}

func (p *CheckEmailUseRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *CheckEmailUseRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CheckEmailUseRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *CheckEmailUseRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *CheckEmailUseRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *CheckEmailUseRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CheckEmailUseRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CheckEmailUseRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err)
	}
	return err
}

func (p *CheckEmailUseRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err)
	}
	return err
}

func (p *CheckEmailUseRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *CheckEmailUseRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckEmailUseRequestStruct(%+v)", *p)
}

// Attributes:
//  - UserID
//  - EmailStatus
//  - ChengHuiTongTraceLog
type UserAttestationSaveStruct struct {
	UserID               int32  `thrift:"user_id,1" db:"user_id" json:"user_id"`
	EmailStatus          int32  `thrift:"email_status,2" db:"email_status" json:"email_status"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,3" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewUserAttestationSaveStruct() *UserAttestationSaveStruct {
//   return &UserAttestationSaveStruct{}
// }

func (p *UserAttestationSaveStruct) GetUserID() int32 {
	return p.UserID
}

func (p *UserAttestationSaveStruct) GetEmailStatus() int32 {
	return p.EmailStatus
}

func (p *UserAttestationSaveStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *UserAttestationSaveStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserAttestationSaveStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserAttestationSaveStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EmailStatus = v
	}
	return nil
}

func (p *UserAttestationSaveStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *UserAttestationSaveStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserAttestationSaveStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserAttestationSaveStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err)
	}
	return err
}

func (p *UserAttestationSaveStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email_status", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:email_status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EmailStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.email_status (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:email_status: ", p), err)
	}
	return err
}

func (p *UserAttestationSaveStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *UserAttestationSaveStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserAttestationSaveStruct(%+v)", *p)
}

// Attributes:
//  - Email
//  - UserID
//  - ChengHuiTongTraceLog
type UserEmailSaveRequestStruct struct {
	Email                string `thrift:"email,1" db:"email" json:"email"`
	UserID               int32  `thrift:"user_id,2" db:"user_id" json:"user_id"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,3" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewUserEmailSaveRequestStruct() *UserEmailSaveRequestStruct {
//   return &UserEmailSaveRequestStruct{}
// }

func (p *UserEmailSaveRequestStruct) GetEmail() string {
	return p.Email
}

func (p *UserEmailSaveRequestStruct) GetUserID() int32 {
	return p.UserID
}

func (p *UserEmailSaveRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *UserEmailSaveRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserEmailSaveRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Email = v
	}
	return nil
}

func (p *UserEmailSaveRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserEmailSaveRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *UserEmailSaveRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserEmailSaveRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserEmailSaveRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("email", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err)
	}
	if err := oprot.WriteString(string(p.Email)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err)
	}
	return err
}

func (p *UserEmailSaveRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err)
	}
	return err
}

func (p *UserEmailSaveRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *UserEmailSaveRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserEmailSaveRequestStruct(%+v)", *p)
}

// Attributes:
//  - UserID
//  - SendTo
//  - Subject
//  - Content
//  - IP
//  - Addtime
//  - ChengHuiTongTraceLog
type SendEmailRequestStruct struct {
	UserID               int32  `thrift:"user_id,1" db:"user_id" json:"user_id"`
	SendTo               string `thrift:"send_to,2" db:"send_to" json:"send_to"`
	Subject              string `thrift:"subject,3" db:"subject" json:"subject"`
	Content              string `thrift:"content,4" db:"content" json:"content"`
	IP                   string `thrift:"ip,5" db:"ip" json:"ip"`
	Addtime              int32  `thrift:"addtime,6" db:"addtime" json:"addtime"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,7" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewSendEmailRequestStruct() *SendEmailRequestStruct {
//   return &SendEmailRequestStruct{}
// }

func (p *SendEmailRequestStruct) GetUserID() int32 {
	return p.UserID
}

func (p *SendEmailRequestStruct) GetSendTo() string {
	return p.SendTo
}

func (p *SendEmailRequestStruct) GetSubject() string {
	return p.Subject
}

func (p *SendEmailRequestStruct) GetContent() string {
	return p.Content
}

func (p *SendEmailRequestStruct) GetIP() string {
	return p.IP
}

func (p *SendEmailRequestStruct) GetAddtime() int32 {
	return p.Addtime
}

func (p *SendEmailRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *SendEmailRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SendEmailRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *SendEmailRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SendTo = v
	}
	return nil
}

func (p *SendEmailRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Subject = v
	}
	return nil
}

func (p *SendEmailRequestStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Content = v
	}
	return nil
}

func (p *SendEmailRequestStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *SendEmailRequestStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Addtime = v
	}
	return nil
}

func (p *SendEmailRequestStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *SendEmailRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SendEmailRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SendEmailRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err)
	}
	return err
}

func (p *SendEmailRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("send_to", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:send_to: ", p), err)
	}
	if err := oprot.WriteString(string(p.SendTo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.send_to (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:send_to: ", p), err)
	}
	return err
}

func (p *SendEmailRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subject", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:subject: ", p), err)
	}
	if err := oprot.WriteString(string(p.Subject)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subject (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:subject: ", p), err)
	}
	return err
}

func (p *SendEmailRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:content: ", p), err)
	}
	if err := oprot.WriteString(string(p.Content)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.content (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:content: ", p), err)
	}
	return err
}

func (p *SendEmailRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ip: ", p), err)
	}
	return err
}

func (p *SendEmailRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addtime", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:addtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Addtime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addtime (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:addtime: ", p), err)
	}
	return err
}

func (p *SendEmailRequestStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *SendEmailRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendEmailRequestStruct(%+v)", *p)
}

type EmailAttestationThriftService interface {
	// Parameters:
	//  - RequestObj
	CheckEmailUse(requestObj *CheckEmailUseRequestStruct) (r int32, err error)
	// Parameters:
	//  - RequestObj
	UserAttestationSave(requestObj *UserAttestationSaveStruct) (r int32, err error)
	// Parameters:
	//  - RequestObj
	UserEmailSave(requestObj *UserEmailSaveRequestStruct) (r int32, err error)
	// Parameters:
	//  - RequestObj
	SendEmail(requestObj *SendEmailRequestStruct) (r int32, err error)
}

type EmailAttestationThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewEmailAttestationThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EmailAttestationThriftServiceClient {
	return &EmailAttestationThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewEmailAttestationThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EmailAttestationThriftServiceClient {
	return &EmailAttestationThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RequestObj
func (p *EmailAttestationThriftServiceClient) CheckEmailUse(requestObj *CheckEmailUseRequestStruct) (r int32, err error) {
	if err = p.sendCheckEmailUse(requestObj); err != nil {
		return
	}
	return p.recvCheckEmailUse()
}

func (p *EmailAttestationThriftServiceClient) sendCheckEmailUse(requestObj *CheckEmailUseRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("checkEmailUse", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := EmailAttestationThriftServiceCheckEmailUseArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *EmailAttestationThriftServiceClient) recvCheckEmailUse() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "checkEmailUse" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "checkEmailUse failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "checkEmailUse failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "checkEmailUse failed: invalid message type")
		return
	}
	result := EmailAttestationThriftServiceCheckEmailUseResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RequestObj
func (p *EmailAttestationThriftServiceClient) UserAttestationSave(requestObj *UserAttestationSaveStruct) (r int32, err error) {
	if err = p.sendUserAttestationSave(requestObj); err != nil {
		return
	}
	return p.recvUserAttestationSave()
}

func (p *EmailAttestationThriftServiceClient) sendUserAttestationSave(requestObj *UserAttestationSaveStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("userAttestationSave", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := EmailAttestationThriftServiceUserAttestationSaveArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *EmailAttestationThriftServiceClient) recvUserAttestationSave() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "userAttestationSave" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "userAttestationSave failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "userAttestationSave failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "userAttestationSave failed: invalid message type")
		return
	}
	result := EmailAttestationThriftServiceUserAttestationSaveResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RequestObj
func (p *EmailAttestationThriftServiceClient) UserEmailSave(requestObj *UserEmailSaveRequestStruct) (r int32, err error) {
	if err = p.sendUserEmailSave(requestObj); err != nil {
		return
	}
	return p.recvUserEmailSave()
}

func (p *EmailAttestationThriftServiceClient) sendUserEmailSave(requestObj *UserEmailSaveRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("userEmailSave", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := EmailAttestationThriftServiceUserEmailSaveArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *EmailAttestationThriftServiceClient) recvUserEmailSave() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "userEmailSave" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "userEmailSave failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "userEmailSave failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "userEmailSave failed: invalid message type")
		return
	}
	result := EmailAttestationThriftServiceUserEmailSaveResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RequestObj
func (p *EmailAttestationThriftServiceClient) SendEmail(requestObj *SendEmailRequestStruct) (r int32, err error) {
	if err = p.sendSendEmail(requestObj); err != nil {
		return
	}
	return p.recvSendEmail()
}

func (p *EmailAttestationThriftServiceClient) sendSendEmail(requestObj *SendEmailRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("sendEmail", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := EmailAttestationThriftServiceSendEmailArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *EmailAttestationThriftServiceClient) recvSendEmail() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "sendEmail" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "sendEmail failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "sendEmail failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "sendEmail failed: invalid message type")
		return
	}
	result := EmailAttestationThriftServiceSendEmailResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type EmailAttestationThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      EmailAttestationThriftService
}

func (p *EmailAttestationThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *EmailAttestationThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *EmailAttestationThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewEmailAttestationThriftServiceProcessor(handler EmailAttestationThriftService) *EmailAttestationThriftServiceProcessor {

	self8 := &EmailAttestationThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self8.processorMap["checkEmailUse"] = &emailAttestationThriftServiceProcessorCheckEmailUse{handler: handler}
	self8.processorMap["userAttestationSave"] = &emailAttestationThriftServiceProcessorUserAttestationSave{handler: handler}
	self8.processorMap["userEmailSave"] = &emailAttestationThriftServiceProcessorUserEmailSave{handler: handler}
	self8.processorMap["sendEmail"] = &emailAttestationThriftServiceProcessorSendEmail{handler: handler}
	return self8
}

func (p *EmailAttestationThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x9.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x9

}

type emailAttestationThriftServiceProcessorCheckEmailUse struct {
	handler EmailAttestationThriftService
}

func (p *emailAttestationThriftServiceProcessorCheckEmailUse) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmailAttestationThriftServiceCheckEmailUseArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkEmailUse", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := EmailAttestationThriftServiceCheckEmailUseResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.CheckEmailUse(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkEmailUse: "+err2.Error())
		oprot.WriteMessageBegin("checkEmailUse", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("checkEmailUse", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type emailAttestationThriftServiceProcessorUserAttestationSave struct {
	handler EmailAttestationThriftService
}

func (p *emailAttestationThriftServiceProcessorUserAttestationSave) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmailAttestationThriftServiceUserAttestationSaveArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("userAttestationSave", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := EmailAttestationThriftServiceUserAttestationSaveResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UserAttestationSave(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing userAttestationSave: "+err2.Error())
		oprot.WriteMessageBegin("userAttestationSave", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("userAttestationSave", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type emailAttestationThriftServiceProcessorUserEmailSave struct {
	handler EmailAttestationThriftService
}

func (p *emailAttestationThriftServiceProcessorUserEmailSave) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmailAttestationThriftServiceUserEmailSaveArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("userEmailSave", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := EmailAttestationThriftServiceUserEmailSaveResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UserEmailSave(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing userEmailSave: "+err2.Error())
		oprot.WriteMessageBegin("userEmailSave", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("userEmailSave", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type emailAttestationThriftServiceProcessorSendEmail struct {
	handler EmailAttestationThriftService
}

func (p *emailAttestationThriftServiceProcessorSendEmail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EmailAttestationThriftServiceSendEmailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("sendEmail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := EmailAttestationThriftServiceSendEmailResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.SendEmail(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendEmail: "+err2.Error())
		oprot.WriteMessageBegin("sendEmail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("sendEmail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type EmailAttestationThriftServiceCheckEmailUseArgs struct {
	RequestObj *CheckEmailUseRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewEmailAttestationThriftServiceCheckEmailUseArgs() *EmailAttestationThriftServiceCheckEmailUseArgs {
	return &EmailAttestationThriftServiceCheckEmailUseArgs{}
}

var EmailAttestationThriftServiceCheckEmailUseArgs_RequestObj_DEFAULT *CheckEmailUseRequestStruct

func (p *EmailAttestationThriftServiceCheckEmailUseArgs) GetRequestObj() *CheckEmailUseRequestStruct {
	if !p.IsSetRequestObj() {
		return EmailAttestationThriftServiceCheckEmailUseArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *EmailAttestationThriftServiceCheckEmailUseArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *EmailAttestationThriftServiceCheckEmailUseArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceCheckEmailUseArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &CheckEmailUseRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceCheckEmailUseArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkEmailUse_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceCheckEmailUseArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *EmailAttestationThriftServiceCheckEmailUseArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmailAttestationThriftServiceCheckEmailUseArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EmailAttestationThriftServiceCheckEmailUseResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEmailAttestationThriftServiceCheckEmailUseResult() *EmailAttestationThriftServiceCheckEmailUseResult {
	return &EmailAttestationThriftServiceCheckEmailUseResult{}
}

var EmailAttestationThriftServiceCheckEmailUseResult_Success_DEFAULT int32

func (p *EmailAttestationThriftServiceCheckEmailUseResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return EmailAttestationThriftServiceCheckEmailUseResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *EmailAttestationThriftServiceCheckEmailUseResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmailAttestationThriftServiceCheckEmailUseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceCheckEmailUseResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *EmailAttestationThriftServiceCheckEmailUseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkEmailUse_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceCheckEmailUseResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *EmailAttestationThriftServiceCheckEmailUseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmailAttestationThriftServiceCheckEmailUseResult(%+v)", *p)
}

// Attributes:
//  - RequestObj
type EmailAttestationThriftServiceUserAttestationSaveArgs struct {
	RequestObj *UserAttestationSaveStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewEmailAttestationThriftServiceUserAttestationSaveArgs() *EmailAttestationThriftServiceUserAttestationSaveArgs {
	return &EmailAttestationThriftServiceUserAttestationSaveArgs{}
}

var EmailAttestationThriftServiceUserAttestationSaveArgs_RequestObj_DEFAULT *UserAttestationSaveStruct

func (p *EmailAttestationThriftServiceUserAttestationSaveArgs) GetRequestObj() *UserAttestationSaveStruct {
	if !p.IsSetRequestObj() {
		return EmailAttestationThriftServiceUserAttestationSaveArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *EmailAttestationThriftServiceUserAttestationSaveArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *EmailAttestationThriftServiceUserAttestationSaveArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceUserAttestationSaveArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &UserAttestationSaveStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceUserAttestationSaveArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("userAttestationSave_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceUserAttestationSaveArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *EmailAttestationThriftServiceUserAttestationSaveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmailAttestationThriftServiceUserAttestationSaveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EmailAttestationThriftServiceUserAttestationSaveResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEmailAttestationThriftServiceUserAttestationSaveResult() *EmailAttestationThriftServiceUserAttestationSaveResult {
	return &EmailAttestationThriftServiceUserAttestationSaveResult{}
}

var EmailAttestationThriftServiceUserAttestationSaveResult_Success_DEFAULT int32

func (p *EmailAttestationThriftServiceUserAttestationSaveResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return EmailAttestationThriftServiceUserAttestationSaveResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *EmailAttestationThriftServiceUserAttestationSaveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmailAttestationThriftServiceUserAttestationSaveResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceUserAttestationSaveResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *EmailAttestationThriftServiceUserAttestationSaveResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("userAttestationSave_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceUserAttestationSaveResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *EmailAttestationThriftServiceUserAttestationSaveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmailAttestationThriftServiceUserAttestationSaveResult(%+v)", *p)
}

// Attributes:
//  - RequestObj
type EmailAttestationThriftServiceUserEmailSaveArgs struct {
	RequestObj *UserEmailSaveRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewEmailAttestationThriftServiceUserEmailSaveArgs() *EmailAttestationThriftServiceUserEmailSaveArgs {
	return &EmailAttestationThriftServiceUserEmailSaveArgs{}
}

var EmailAttestationThriftServiceUserEmailSaveArgs_RequestObj_DEFAULT *UserEmailSaveRequestStruct

func (p *EmailAttestationThriftServiceUserEmailSaveArgs) GetRequestObj() *UserEmailSaveRequestStruct {
	if !p.IsSetRequestObj() {
		return EmailAttestationThriftServiceUserEmailSaveArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *EmailAttestationThriftServiceUserEmailSaveArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *EmailAttestationThriftServiceUserEmailSaveArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceUserEmailSaveArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &UserEmailSaveRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceUserEmailSaveArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("userEmailSave_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceUserEmailSaveArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *EmailAttestationThriftServiceUserEmailSaveArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmailAttestationThriftServiceUserEmailSaveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EmailAttestationThriftServiceUserEmailSaveResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEmailAttestationThriftServiceUserEmailSaveResult() *EmailAttestationThriftServiceUserEmailSaveResult {
	return &EmailAttestationThriftServiceUserEmailSaveResult{}
}

var EmailAttestationThriftServiceUserEmailSaveResult_Success_DEFAULT int32

func (p *EmailAttestationThriftServiceUserEmailSaveResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return EmailAttestationThriftServiceUserEmailSaveResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *EmailAttestationThriftServiceUserEmailSaveResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmailAttestationThriftServiceUserEmailSaveResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceUserEmailSaveResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *EmailAttestationThriftServiceUserEmailSaveResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("userEmailSave_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceUserEmailSaveResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *EmailAttestationThriftServiceUserEmailSaveResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmailAttestationThriftServiceUserEmailSaveResult(%+v)", *p)
}

// Attributes:
//  - RequestObj
type EmailAttestationThriftServiceSendEmailArgs struct {
	RequestObj *SendEmailRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewEmailAttestationThriftServiceSendEmailArgs() *EmailAttestationThriftServiceSendEmailArgs {
	return &EmailAttestationThriftServiceSendEmailArgs{}
}

var EmailAttestationThriftServiceSendEmailArgs_RequestObj_DEFAULT *SendEmailRequestStruct

func (p *EmailAttestationThriftServiceSendEmailArgs) GetRequestObj() *SendEmailRequestStruct {
	if !p.IsSetRequestObj() {
		return EmailAttestationThriftServiceSendEmailArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *EmailAttestationThriftServiceSendEmailArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *EmailAttestationThriftServiceSendEmailArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceSendEmailArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &SendEmailRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceSendEmailArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendEmail_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceSendEmailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *EmailAttestationThriftServiceSendEmailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmailAttestationThriftServiceSendEmailArgs(%+v)", *p)
}

// Attributes:
//  - Success
type EmailAttestationThriftServiceSendEmailResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewEmailAttestationThriftServiceSendEmailResult() *EmailAttestationThriftServiceSendEmailResult {
	return &EmailAttestationThriftServiceSendEmailResult{}
}

var EmailAttestationThriftServiceSendEmailResult_Success_DEFAULT int32

func (p *EmailAttestationThriftServiceSendEmailResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return EmailAttestationThriftServiceSendEmailResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *EmailAttestationThriftServiceSendEmailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EmailAttestationThriftServiceSendEmailResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceSendEmailResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *EmailAttestationThriftServiceSendEmailResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("sendEmail_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EmailAttestationThriftServiceSendEmailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *EmailAttestationThriftServiceSendEmailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EmailAttestationThriftServiceSendEmailResult(%+v)", *p)
}
