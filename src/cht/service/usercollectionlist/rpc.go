// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package usercollectionlist

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - UserID
//  - Starttime
//  - Endtime
//  - SearchTime
//  - State
//  - LimitOffset
//  - LimitNum
//  - Borrowid
//  - ChengHuiTongTraceLog
type UserCollectionListRequestStruct struct {
	UserID               int32  `thrift:"user_id,1" db:"user_id" json:"user_id"`
	Starttime            int32  `thrift:"starttime,2" db:"starttime" json:"starttime"`
	Endtime              int32  `thrift:"endtime,3" db:"endtime" json:"endtime"`
	SearchTime           int32  `thrift:"search_time,4" db:"search_time" json:"search_time"`
	State                int32  `thrift:"state,5" db:"state" json:"state"`
	LimitOffset          int32  `thrift:"limitOffset,6" db:"limitOffset" json:"limitOffset"`
	LimitNum             int32  `thrift:"limitNum,7" db:"limitNum" json:"limitNum"`
	Borrowid             string `thrift:"borrowid,8" db:"borrowid" json:"borrowid"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,9" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

func NewUserCollectionListRequestStruct() *UserCollectionListRequestStruct {
	return &UserCollectionListRequestStruct{}
}

func (p *UserCollectionListRequestStruct) GetUserID() int32 {
	return p.UserID
}

func (p *UserCollectionListRequestStruct) GetStarttime() int32 {
	return p.Starttime
}

func (p *UserCollectionListRequestStruct) GetEndtime() int32 {
	return p.Endtime
}

func (p *UserCollectionListRequestStruct) GetSearchTime() int32 {
	return p.SearchTime
}

func (p *UserCollectionListRequestStruct) GetState() int32 {
	return p.State
}

func (p *UserCollectionListRequestStruct) GetLimitOffset() int32 {
	return p.LimitOffset
}

func (p *UserCollectionListRequestStruct) GetLimitNum() int32 {
	return p.LimitNum
}

func (p *UserCollectionListRequestStruct) GetBorrowid() string {
	return p.Borrowid
}

func (p *UserCollectionListRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *UserCollectionListRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserCollectionListRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *UserCollectionListRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Starttime = v
	}
	return nil
}

func (p *UserCollectionListRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Endtime = v
	}
	return nil
}

func (p *UserCollectionListRequestStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SearchTime = v
	}
	return nil
}

func (p *UserCollectionListRequestStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.State = v
	}
	return nil
}

func (p *UserCollectionListRequestStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.LimitOffset = v
	}
	return nil
}

func (p *UserCollectionListRequestStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.LimitNum = v
	}
	return nil
}

func (p *UserCollectionListRequestStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Borrowid = v
	}
	return nil
}

func (p *UserCollectionListRequestStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *UserCollectionListRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserCollectionListRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserCollectionListRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err)
	}
	return err
}

func (p *UserCollectionListRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("starttime", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:starttime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Starttime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.starttime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:starttime: ", p), err)
	}
	return err
}

func (p *UserCollectionListRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endtime", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Endtime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endtime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endtime: ", p), err)
	}
	return err
}

func (p *UserCollectionListRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("search_time", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:search_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SearchTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.search_time (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:search_time: ", p), err)
	}
	return err
}

func (p *UserCollectionListRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("state", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:state: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.state (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:state: ", p), err)
	}
	return err
}

func (p *UserCollectionListRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limitOffset", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:limitOffset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitOffset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limitOffset (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:limitOffset: ", p), err)
	}
	return err
}

func (p *UserCollectionListRequestStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limitNum", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:limitNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limitNum (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:limitNum: ", p), err)
	}
	return err
}

func (p *UserCollectionListRequestStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("borrowid", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:borrowid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Borrowid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.borrowid (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:borrowid: ", p), err)
	}
	return err
}

func (p *UserCollectionListRequestStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *UserCollectionListRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserCollectionListRequestStruct(%+v)", *p)
}

// Attributes:
//  - Username
//  - Title
//  - IsDatetype
//  - TimeLimit
//  - Zhuanrangren
//  - RepayTime
//  - BorrowID
//  - Periods
//  - RepayYestime
//  - RepayYesaccount
//  - RepayAccount
//  - Capital
//  - Interest
//  - LateInterest
//  - LateDays
//  - Status
//  - InterestAdd
//  - OldUserID
//  - Style
type UserCollectionDetailsStruct struct {
	Username        string `thrift:"username,1" db:"username" json:"username"`
	Title           string `thrift:"title,2" db:"title" json:"title"`
	IsDatetype      int32  `thrift:"is_datetype,3" db:"is_datetype" json:"is_datetype"`
	TimeLimit       int32  `thrift:"time_limit,4" db:"time_limit" json:"time_limit"`
	Zhuanrangren    string `thrift:"zhuanrangren,5" db:"zhuanrangren" json:"zhuanrangren"`
	RepayTime       int32  `thrift:"repay_time,6" db:"repay_time" json:"repay_time"`
	BorrowID        int32  `thrift:"borrow_id,7" db:"borrow_id" json:"borrow_id"`
	Periods         int32  `thrift:"periods,8" db:"periods" json:"periods"`
	RepayYestime    int32  `thrift:"repay_yestime,9" db:"repay_yestime" json:"repay_yestime"`
	RepayYesaccount string `thrift:"repay_yesaccount,10" db:"repay_yesaccount" json:"repay_yesaccount"`
	RepayAccount    string `thrift:"repay_account,11" db:"repay_account" json:"repay_account"`
	Capital         string `thrift:"capital,12" db:"capital" json:"capital"`
	Interest        string `thrift:"interest,13" db:"interest" json:"interest"`
	LateInterest    string `thrift:"late_interest,14" db:"late_interest" json:"late_interest"`
	LateDays        int32  `thrift:"late_days,15" db:"late_days" json:"late_days"`
	Status          int32  `thrift:"status,16" db:"status" json:"status"`
	InterestAdd     string `thrift:"interest_add,17" db:"interest_add" json:"interest_add"`
	OldUserID       int32  `thrift:"old_user_id,18" db:"old_user_id" json:"old_user_id"`
	Style           int32  `thrift:"style,19" db:"style" json:"style"`
}

func NewUserCollectionDetailsStruct() *UserCollectionDetailsStruct {
	return &UserCollectionDetailsStruct{}
}

func (p *UserCollectionDetailsStruct) GetUsername() string {
	return p.Username
}

func (p *UserCollectionDetailsStruct) GetTitle() string {
	return p.Title
}

func (p *UserCollectionDetailsStruct) GetIsDatetype() int32 {
	return p.IsDatetype
}

func (p *UserCollectionDetailsStruct) GetTimeLimit() int32 {
	return p.TimeLimit
}

func (p *UserCollectionDetailsStruct) GetZhuanrangren() string {
	return p.Zhuanrangren
}

func (p *UserCollectionDetailsStruct) GetRepayTime() int32 {
	return p.RepayTime
}

func (p *UserCollectionDetailsStruct) GetBorrowID() int32 {
	return p.BorrowID
}

func (p *UserCollectionDetailsStruct) GetPeriods() int32 {
	return p.Periods
}

func (p *UserCollectionDetailsStruct) GetRepayYestime() int32 {
	return p.RepayYestime
}

func (p *UserCollectionDetailsStruct) GetRepayYesaccount() string {
	return p.RepayYesaccount
}

func (p *UserCollectionDetailsStruct) GetRepayAccount() string {
	return p.RepayAccount
}

func (p *UserCollectionDetailsStruct) GetCapital() string {
	return p.Capital
}

func (p *UserCollectionDetailsStruct) GetInterest() string {
	return p.Interest
}

func (p *UserCollectionDetailsStruct) GetLateInterest() string {
	return p.LateInterest
}

func (p *UserCollectionDetailsStruct) GetLateDays() int32 {
	return p.LateDays
}

func (p *UserCollectionDetailsStruct) GetStatus() int32 {
	return p.Status
}

func (p *UserCollectionDetailsStruct) GetInterestAdd() string {
	return p.InterestAdd
}

func (p *UserCollectionDetailsStruct) GetOldUserID() int32 {
	return p.OldUserID
}

func (p *UserCollectionDetailsStruct) GetStyle() int32 {
	return p.Style
}
func (p *UserCollectionDetailsStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.ReadField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.ReadField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.ReadField19(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IsDatetype = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TimeLimit = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Zhuanrangren = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.RepayTime = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.BorrowID = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Periods = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.RepayYestime = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.RepayYesaccount = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.RepayAccount = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Capital = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Interest = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.LateInterest = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.LateDays = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.InterestAdd = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.OldUserID = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) ReadField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 19: ", err)
	} else {
		p.Style = v
	}
	return nil
}

func (p *UserCollectionDetailsStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserCollectionDetailsStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField19(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserCollectionDetailsStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:title: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_datetype", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_datetype: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsDatetype)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_datetype (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_datetype: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("time_limit", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:time_limit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TimeLimit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.time_limit (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:time_limit: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("zhuanrangren", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:zhuanrangren: ", p), err)
	}
	if err := oprot.WriteString(string(p.Zhuanrangren)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.zhuanrangren (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:zhuanrangren: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("repay_time", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:repay_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RepayTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.repay_time (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:repay_time: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("borrow_id", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:borrow_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BorrowID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.borrow_id (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:borrow_id: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("periods", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:periods: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Periods)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.periods (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:periods: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("repay_yestime", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:repay_yestime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RepayYestime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.repay_yestime (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:repay_yestime: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("repay_yesaccount", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:repay_yesaccount: ", p), err)
	}
	if err := oprot.WriteString(string(p.RepayYesaccount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.repay_yesaccount (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:repay_yesaccount: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("repay_account", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:repay_account: ", p), err)
	}
	if err := oprot.WriteString(string(p.RepayAccount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.repay_account (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:repay_account: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("capital", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:capital: ", p), err)
	}
	if err := oprot.WriteString(string(p.Capital)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.capital (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:capital: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("interest", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:interest: ", p), err)
	}
	if err := oprot.WriteString(string(p.Interest)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.interest (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:interest: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("late_interest", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:late_interest: ", p), err)
	}
	if err := oprot.WriteString(string(p.LateInterest)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.late_interest (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:late_interest: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("late_days", thrift.I32, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:late_days: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LateDays)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.late_days (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:late_days: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:status: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField17(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("interest_add", thrift.STRING, 17); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:interest_add: ", p), err)
	}
	if err := oprot.WriteString(string(p.InterestAdd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.interest_add (17) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 17:interest_add: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField18(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("old_user_id", thrift.I32, 18); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:old_user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OldUserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.old_user_id (18) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 18:old_user_id: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) writeField19(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("style", thrift.I32, 19); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:style: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Style)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.style (19) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 19:style: ", p), err)
	}
	return err
}

func (p *UserCollectionDetailsStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserCollectionDetailsStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
//  - TotalNum
//  - UserCollectionList
type UserCollectionListResponseStruct struct {
	Status             int32                          `thrift:"status,1" db:"status" json:"status"`
	Msg                string                         `thrift:"msg,2" db:"msg" json:"msg"`
	TotalNum           int32                          `thrift:"totalNum,3" db:"totalNum" json:"totalNum"`
	UserCollectionList []*UserCollectionDetailsStruct `thrift:"UserCollectionList,4" db:"UserCollectionList" json:"UserCollectionList"`
}

func NewUserCollectionListResponseStruct() *UserCollectionListResponseStruct {
	return &UserCollectionListResponseStruct{}
}

func (p *UserCollectionListResponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *UserCollectionListResponseStruct) GetMsg() string {
	return p.Msg
}

func (p *UserCollectionListResponseStruct) GetTotalNum() int32 {
	return p.TotalNum
}

func (p *UserCollectionListResponseStruct) GetUserCollectionList() []*UserCollectionDetailsStruct {
	return p.UserCollectionList
}
func (p *UserCollectionListResponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserCollectionListResponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *UserCollectionListResponseStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *UserCollectionListResponseStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalNum = v
	}
	return nil
}

func (p *UserCollectionListResponseStruct) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*UserCollectionDetailsStruct, 0, size)
	p.UserCollectionList = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &UserCollectionDetailsStruct{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.UserCollectionList = append(p.UserCollectionList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *UserCollectionListResponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserCollectionListResponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserCollectionListResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *UserCollectionListResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *UserCollectionListResponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalNum", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalNum (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalNum: ", p), err)
	}
	return err
}

func (p *UserCollectionListResponseStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UserCollectionList", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:UserCollectionList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UserCollectionList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.UserCollectionList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:UserCollectionList: ", p), err)
	}
	return err
}

func (p *UserCollectionListResponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserCollectionListResponseStruct(%+v)", *p)
}

type UserCollectionListThriftService interface {
	// Parameters:
	//  - RequestObj
	GetUserCollectionList(requestObj *UserCollectionListRequestStruct) (r *UserCollectionListResponseStruct, err error)
}

type UserCollectionListThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewUserCollectionListThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserCollectionListThriftServiceClient {
	return &UserCollectionListThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewUserCollectionListThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserCollectionListThriftServiceClient {
	return &UserCollectionListThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RequestObj
func (p *UserCollectionListThriftServiceClient) GetUserCollectionList(requestObj *UserCollectionListRequestStruct) (r *UserCollectionListResponseStruct, err error) {
	if err = p.sendGetUserCollectionList(requestObj); err != nil {
		return
	}
	return p.recvGetUserCollectionList()
}

func (p *UserCollectionListThriftServiceClient) sendGetUserCollectionList(requestObj *UserCollectionListRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserCollectionList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserCollectionListThriftServiceGetUserCollectionListArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserCollectionListThriftServiceClient) recvGetUserCollectionList() (value *UserCollectionListResponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserCollectionList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserCollectionList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserCollectionList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error2 error
		error2, err = error1.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error2
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserCollectionList failed: invalid message type")
		return
	}
	result := UserCollectionListThriftServiceGetUserCollectionListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type UserCollectionListThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      UserCollectionListThriftService
}

func (p *UserCollectionListThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *UserCollectionListThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *UserCollectionListThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewUserCollectionListThriftServiceProcessor(handler UserCollectionListThriftService) *UserCollectionListThriftServiceProcessor {

	self3 := &UserCollectionListThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self3.processorMap["getUserCollectionList"] = &userCollectionListThriftServiceProcessorGetUserCollectionList{handler: handler}
	return self3
}

func (p *UserCollectionListThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x4

}

type userCollectionListThriftServiceProcessorGetUserCollectionList struct {
	handler UserCollectionListThriftService
}

func (p *userCollectionListThriftServiceProcessorGetUserCollectionList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserCollectionListThriftServiceGetUserCollectionListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserCollectionList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserCollectionListThriftServiceGetUserCollectionListResult{}
	var retval *UserCollectionListResponseStruct
	var err2 error
	if retval, err2 = p.handler.GetUserCollectionList(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserCollectionList: "+err2.Error())
		oprot.WriteMessageBegin("getUserCollectionList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getUserCollectionList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type UserCollectionListThriftServiceGetUserCollectionListArgs struct {
	RequestObj *UserCollectionListRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewUserCollectionListThriftServiceGetUserCollectionListArgs() *UserCollectionListThriftServiceGetUserCollectionListArgs {
	return &UserCollectionListThriftServiceGetUserCollectionListArgs{}
}

var UserCollectionListThriftServiceGetUserCollectionListArgs_RequestObj_DEFAULT *UserCollectionListRequestStruct

func (p *UserCollectionListThriftServiceGetUserCollectionListArgs) GetRequestObj() *UserCollectionListRequestStruct {
	if !p.IsSetRequestObj() {
		return UserCollectionListThriftServiceGetUserCollectionListArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *UserCollectionListThriftServiceGetUserCollectionListArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *UserCollectionListThriftServiceGetUserCollectionListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserCollectionListThriftServiceGetUserCollectionListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &UserCollectionListRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *UserCollectionListThriftServiceGetUserCollectionListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserCollectionList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserCollectionListThriftServiceGetUserCollectionListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *UserCollectionListThriftServiceGetUserCollectionListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserCollectionListThriftServiceGetUserCollectionListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserCollectionListThriftServiceGetUserCollectionListResult struct {
	Success *UserCollectionListResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserCollectionListThriftServiceGetUserCollectionListResult() *UserCollectionListThriftServiceGetUserCollectionListResult {
	return &UserCollectionListThriftServiceGetUserCollectionListResult{}
}

var UserCollectionListThriftServiceGetUserCollectionListResult_Success_DEFAULT *UserCollectionListResponseStruct

func (p *UserCollectionListThriftServiceGetUserCollectionListResult) GetSuccess() *UserCollectionListResponseStruct {
	if !p.IsSetSuccess() {
		return UserCollectionListThriftServiceGetUserCollectionListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserCollectionListThriftServiceGetUserCollectionListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserCollectionListThriftServiceGetUserCollectionListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserCollectionListThriftServiceGetUserCollectionListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserCollectionListResponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserCollectionListThriftServiceGetUserCollectionListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserCollectionList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserCollectionListThriftServiceGetUserCollectionListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserCollectionListThriftServiceGetUserCollectionListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserCollectionListThriftServiceGetUserCollectionListResult(%+v)", *p)
}
