// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package usercashrecordList

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - UserID
//  - StartTime
//  - EndTime
//  - QueryTime
//  - RechargeStatus
//  - LimitOffset
//  - LimitNum
//  - ChengHuiTongTraceLog
type UserCashRecordListRequestStruct struct {
  UserID int32 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  StartTime int32 `thrift:"start_time,2" db:"start_time" json:"start_time"`
  EndTime int32 `thrift:"end_time,3" db:"end_time" json:"end_time"`
  QueryTime int32 `thrift:"query_time,4" db:"query_time" json:"query_time"`
  RechargeStatus int32 `thrift:"recharge_status,5" db:"recharge_status" json:"recharge_status"`
  LimitOffset int32 `thrift:"limit_offset,6" db:"limit_offset" json:"limit_offset"`
  LimitNum int32 `thrift:"limit_num,7" db:"limit_num" json:"limit_num"`
  ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,8" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

func NewUserCashRecordListRequestStruct() *UserCashRecordListRequestStruct {
  return &UserCashRecordListRequestStruct{}
}


func (p *UserCashRecordListRequestStruct) GetUserID() int32 {
  return p.UserID
}

func (p *UserCashRecordListRequestStruct) GetStartTime() int32 {
  return p.StartTime
}

func (p *UserCashRecordListRequestStruct) GetEndTime() int32 {
  return p.EndTime
}

func (p *UserCashRecordListRequestStruct) GetQueryTime() int32 {
  return p.QueryTime
}

func (p *UserCashRecordListRequestStruct) GetRechargeStatus() int32 {
  return p.RechargeStatus
}

func (p *UserCashRecordListRequestStruct) GetLimitOffset() int32 {
  return p.LimitOffset
}

func (p *UserCashRecordListRequestStruct) GetLimitNum() int32 {
  return p.LimitNum
}

func (p *UserCashRecordListRequestStruct) GetChengHuiTongTraceLog() string {
  return p.ChengHuiTongTraceLog
}
func (p *UserCashRecordListRequestStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserCashRecordListRequestStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserCashRecordListRequestStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *UserCashRecordListRequestStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *UserCashRecordListRequestStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.QueryTime = v
}
  return nil
}

func (p *UserCashRecordListRequestStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RechargeStatus = v
}
  return nil
}

func (p *UserCashRecordListRequestStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LimitOffset = v
}
  return nil
}

func (p *UserCashRecordListRequestStruct)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LimitNum = v
}
  return nil
}

func (p *UserCashRecordListRequestStruct)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ChengHuiTongTraceLog = v
}
  return nil
}

func (p *UserCashRecordListRequestStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserCashRecordListRequestStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserCashRecordListRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *UserCashRecordListRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start_time: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start_time: ", p), err) }
  return err
}

func (p *UserCashRecordListRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("end_time", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:end_time: ", p), err) }
  if err := oprot.WriteI32(int32(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.end_time (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:end_time: ", p), err) }
  return err
}

func (p *UserCashRecordListRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("query_time", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:query_time: ", p), err) }
  if err := oprot.WriteI32(int32(p.QueryTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query_time (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:query_time: ", p), err) }
  return err
}

func (p *UserCashRecordListRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recharge_status", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:recharge_status: ", p), err) }
  if err := oprot.WriteI32(int32(p.RechargeStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recharge_status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:recharge_status: ", p), err) }
  return err
}

func (p *UserCashRecordListRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit_offset", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:limit_offset: ", p), err) }
  if err := oprot.WriteI32(int32(p.LimitOffset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit_offset (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:limit_offset: ", p), err) }
  return err
}

func (p *UserCashRecordListRequestStruct) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("limit_num", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:limit_num: ", p), err) }
  if err := oprot.WriteI32(int32(p.LimitNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit_num (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:limit_num: ", p), err) }
  return err
}

func (p *UserCashRecordListRequestStruct) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:chengHuiTongTraceLog: ", p), err) }
  if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:chengHuiTongTraceLog: ", p), err) }
  return err
}

func (p *UserCashRecordListRequestStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserCashRecordListRequestStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserID
//  - OrderSn
//  - Money
//  - Credited
//  - Fee
//  - UseReturnMoney
//  - UseFreeNum
//  - Addtime
//  - Status
//  - PayWay
//  - DealTime
//  - FailResult_
type UserCashRecordDetailsStruct struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  UserID int32 `thrift:"user_id,2" db:"user_id" json:"user_id"`
  OrderSn string `thrift:"order_sn,3" db:"order_sn" json:"order_sn"`
  Money string `thrift:"money,4" db:"money" json:"money"`
  Credited string `thrift:"credited,5" db:"credited" json:"credited"`
  Fee string `thrift:"fee,6" db:"fee" json:"fee"`
  UseReturnMoney string `thrift:"use_return_money,7" db:"use_return_money" json:"use_return_money"`
  UseFreeNum int32 `thrift:"use_free_num,8" db:"use_free_num" json:"use_free_num"`
  Addtime int32 `thrift:"addtime,9" db:"addtime" json:"addtime"`
  Status int32 `thrift:"status,10" db:"status" json:"status"`
  PayWay int32 `thrift:"pay_way,11" db:"pay_way" json:"pay_way"`
  DealTime int32 `thrift:"deal_time,12" db:"deal_time" json:"deal_time"`
  FailResult_ string `thrift:"fail_result,13" db:"fail_result" json:"fail_result"`
}

func NewUserCashRecordDetailsStruct() *UserCashRecordDetailsStruct {
  return &UserCashRecordDetailsStruct{}
}


func (p *UserCashRecordDetailsStruct) GetID() int32 {
  return p.ID
}

func (p *UserCashRecordDetailsStruct) GetUserID() int32 {
  return p.UserID
}

func (p *UserCashRecordDetailsStruct) GetOrderSn() string {
  return p.OrderSn
}

func (p *UserCashRecordDetailsStruct) GetMoney() string {
  return p.Money
}

func (p *UserCashRecordDetailsStruct) GetCredited() string {
  return p.Credited
}

func (p *UserCashRecordDetailsStruct) GetFee() string {
  return p.Fee
}

func (p *UserCashRecordDetailsStruct) GetUseReturnMoney() string {
  return p.UseReturnMoney
}

func (p *UserCashRecordDetailsStruct) GetUseFreeNum() int32 {
  return p.UseFreeNum
}

func (p *UserCashRecordDetailsStruct) GetAddtime() int32 {
  return p.Addtime
}

func (p *UserCashRecordDetailsStruct) GetStatus() int32 {
  return p.Status
}

func (p *UserCashRecordDetailsStruct) GetPayWay() int32 {
  return p.PayWay
}

func (p *UserCashRecordDetailsStruct) GetDealTime() int32 {
  return p.DealTime
}

func (p *UserCashRecordDetailsStruct) GetFailResult_() string {
  return p.FailResult_
}
func (p *UserCashRecordDetailsStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserCashRecordDetailsStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *UserCashRecordDetailsStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *UserCashRecordDetailsStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OrderSn = v
}
  return nil
}

func (p *UserCashRecordDetailsStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Money = v
}
  return nil
}

func (p *UserCashRecordDetailsStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Credited = v
}
  return nil
}

func (p *UserCashRecordDetailsStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Fee = v
}
  return nil
}

func (p *UserCashRecordDetailsStruct)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.UseReturnMoney = v
}
  return nil
}

func (p *UserCashRecordDetailsStruct)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.UseFreeNum = v
}
  return nil
}

func (p *UserCashRecordDetailsStruct)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Addtime = v
}
  return nil
}

func (p *UserCashRecordDetailsStruct)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *UserCashRecordDetailsStruct)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.PayWay = v
}
  return nil
}

func (p *UserCashRecordDetailsStruct)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.DealTime = v
}
  return nil
}

func (p *UserCashRecordDetailsStruct)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.FailResult_ = v
}
  return nil
}

func (p *UserCashRecordDetailsStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserCashRecordDetailsStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserCashRecordDetailsStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *UserCashRecordDetailsStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err) }
  return err
}

func (p *UserCashRecordDetailsStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("order_sn", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:order_sn: ", p), err) }
  if err := oprot.WriteString(string(p.OrderSn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.order_sn (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:order_sn: ", p), err) }
  return err
}

func (p *UserCashRecordDetailsStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("money", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:money: ", p), err) }
  if err := oprot.WriteString(string(p.Money)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.money (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:money: ", p), err) }
  return err
}

func (p *UserCashRecordDetailsStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("credited", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:credited: ", p), err) }
  if err := oprot.WriteString(string(p.Credited)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.credited (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:credited: ", p), err) }
  return err
}

func (p *UserCashRecordDetailsStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fee", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fee: ", p), err) }
  if err := oprot.WriteString(string(p.Fee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fee (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fee: ", p), err) }
  return err
}

func (p *UserCashRecordDetailsStruct) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("use_return_money", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:use_return_money: ", p), err) }
  if err := oprot.WriteString(string(p.UseReturnMoney)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.use_return_money (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:use_return_money: ", p), err) }
  return err
}

func (p *UserCashRecordDetailsStruct) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("use_free_num", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:use_free_num: ", p), err) }
  if err := oprot.WriteI32(int32(p.UseFreeNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.use_free_num (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:use_free_num: ", p), err) }
  return err
}

func (p *UserCashRecordDetailsStruct) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("addtime", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:addtime: ", p), err) }
  if err := oprot.WriteI32(int32(p.Addtime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.addtime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:addtime: ", p), err) }
  return err
}

func (p *UserCashRecordDetailsStruct) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:status: ", p), err) }
  return err
}

func (p *UserCashRecordDetailsStruct) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pay_way", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:pay_way: ", p), err) }
  if err := oprot.WriteI32(int32(p.PayWay)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pay_way (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:pay_way: ", p), err) }
  return err
}

func (p *UserCashRecordDetailsStruct) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deal_time", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:deal_time: ", p), err) }
  if err := oprot.WriteI32(int32(p.DealTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deal_time (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:deal_time: ", p), err) }
  return err
}

func (p *UserCashRecordDetailsStruct) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fail_result", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:fail_result: ", p), err) }
  if err := oprot.WriteString(string(p.FailResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fail_result (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:fail_result: ", p), err) }
  return err
}

func (p *UserCashRecordDetailsStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserCashRecordDetailsStruct(%+v)", *p)
}

// Attributes:
//  - Money
//  - Fee
type UserCashStatsStruct struct {
  Money string `thrift:"money,1" db:"money" json:"money"`
  Fee string `thrift:"fee,2" db:"fee" json:"fee"`
}

func NewUserCashStatsStruct() *UserCashStatsStruct {
  return &UserCashStatsStruct{}
}


func (p *UserCashStatsStruct) GetMoney() string {
  return p.Money
}

func (p *UserCashStatsStruct) GetFee() string {
  return p.Fee
}
func (p *UserCashStatsStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserCashStatsStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Money = v
}
  return nil
}

func (p *UserCashStatsStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Fee = v
}
  return nil
}

func (p *UserCashStatsStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserCashStatsStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserCashStatsStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("money", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:money: ", p), err) }
  if err := oprot.WriteString(string(p.Money)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.money (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:money: ", p), err) }
  return err
}

func (p *UserCashStatsStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fee", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fee: ", p), err) }
  if err := oprot.WriteString(string(p.Fee)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fee (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fee: ", p), err) }
  return err
}

func (p *UserCashStatsStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserCashStatsStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
//  - Totalnum
//  - UserCashStruct
//  - UserCashRecordList
type UserCashRecordListResponseStruct struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Msg string `thrift:"msg,2" db:"msg" json:"msg"`
  Totalnum int32 `thrift:"totalnum,3" db:"totalnum" json:"totalnum"`
  UserCashStruct *UserCashStatsStruct `thrift:"UserCashStruct,4" db:"UserCashStruct" json:"UserCashStruct"`
  UserCashRecordList []*UserCashRecordDetailsStruct `thrift:"UserCashRecordList,5" db:"UserCashRecordList" json:"UserCashRecordList"`
}

func NewUserCashRecordListResponseStruct() *UserCashRecordListResponseStruct {
  return &UserCashRecordListResponseStruct{}
}


func (p *UserCashRecordListResponseStruct) GetStatus() int32 {
  return p.Status
}

func (p *UserCashRecordListResponseStruct) GetMsg() string {
  return p.Msg
}

func (p *UserCashRecordListResponseStruct) GetTotalnum() int32 {
  return p.Totalnum
}
var UserCashRecordListResponseStruct_UserCashStruct_DEFAULT *UserCashStatsStruct
func (p *UserCashRecordListResponseStruct) GetUserCashStruct() *UserCashStatsStruct {
  if !p.IsSetUserCashStruct() {
    return UserCashRecordListResponseStruct_UserCashStruct_DEFAULT
  }
return p.UserCashStruct
}

func (p *UserCashRecordListResponseStruct) GetUserCashRecordList() []*UserCashRecordDetailsStruct {
  return p.UserCashRecordList
}
func (p *UserCashRecordListResponseStruct) IsSetUserCashStruct() bool {
  return p.UserCashStruct != nil
}

func (p *UserCashRecordListResponseStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserCashRecordListResponseStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *UserCashRecordListResponseStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *UserCashRecordListResponseStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Totalnum = v
}
  return nil
}

func (p *UserCashRecordListResponseStruct)  ReadField4(iprot thrift.TProtocol) error {
  p.UserCashStruct = &UserCashStatsStruct{}
  if err := p.UserCashStruct.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserCashStruct), err)
  }
  return nil
}

func (p *UserCashRecordListResponseStruct)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*UserCashRecordDetailsStruct, 0, size)
  p.UserCashRecordList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &UserCashRecordDetailsStruct{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.UserCashRecordList = append(p.UserCashRecordList, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserCashRecordListResponseStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserCashRecordListResponseStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserCashRecordListResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *UserCashRecordListResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err) }
  return err
}

func (p *UserCashRecordListResponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalnum", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalnum: ", p), err) }
  if err := oprot.WriteI32(int32(p.Totalnum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalnum (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalnum: ", p), err) }
  return err
}

func (p *UserCashRecordListResponseStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserCashStruct", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:UserCashStruct: ", p), err) }
  if err := p.UserCashStruct.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserCashStruct), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:UserCashStruct: ", p), err) }
  return err
}

func (p *UserCashRecordListResponseStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("UserCashRecordList", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:UserCashRecordList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UserCashRecordList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.UserCashRecordList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:UserCashRecordList: ", p), err) }
  return err
}

func (p *UserCashRecordListResponseStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserCashRecordListResponseStruct(%+v)", *p)
}

type UserCashRecordListThriftService interface {
  // Parameters:
  //  - RequestObj
  GetUserCashRecordList(requestObj *UserCashRecordListRequestStruct) (r *UserCashRecordListResponseStruct, err error)
}

type UserCashRecordListThriftServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewUserCashRecordListThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserCashRecordListThriftServiceClient {
  return &UserCashRecordListThriftServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewUserCashRecordListThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserCashRecordListThriftServiceClient {
  return &UserCashRecordListThriftServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - RequestObj
func (p *UserCashRecordListThriftServiceClient) GetUserCashRecordList(requestObj *UserCashRecordListRequestStruct) (r *UserCashRecordListResponseStruct, err error) {
  if err = p.sendGetUserCashRecordList(requestObj); err != nil { return }
  return p.recvGetUserCashRecordList()
}

func (p *UserCashRecordListThriftServiceClient) sendGetUserCashRecordList(requestObj *UserCashRecordListRequestStruct)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getUserCashRecordList", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := UserCashRecordListThriftServiceGetUserCashRecordListArgs{
  RequestObj : requestObj,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *UserCashRecordListThriftServiceClient) recvGetUserCashRecordList() (value *UserCashRecordListResponseStruct, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getUserCashRecordList" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserCashRecordList failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserCashRecordList failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error2 error
    error2, err = error1.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error2
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserCashRecordList failed: invalid message type")
    return
  }
  result := UserCashRecordListThriftServiceGetUserCashRecordListResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type UserCashRecordListThriftServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler UserCashRecordListThriftService
}

func (p *UserCashRecordListThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *UserCashRecordListThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *UserCashRecordListThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewUserCashRecordListThriftServiceProcessor(handler UserCashRecordListThriftService) *UserCashRecordListThriftServiceProcessor {

  self3 := &UserCashRecordListThriftServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self3.processorMap["getUserCashRecordList"] = &userCashRecordListThriftServiceProcessorGetUserCashRecordList{handler:handler}
return self3
}

func (p *UserCashRecordListThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x4.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x4

}

type userCashRecordListThriftServiceProcessorGetUserCashRecordList struct {
  handler UserCashRecordListThriftService
}

func (p *userCashRecordListThriftServiceProcessorGetUserCashRecordList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := UserCashRecordListThriftServiceGetUserCashRecordListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUserCashRecordList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := UserCashRecordListThriftServiceGetUserCashRecordListResult{}
var retval *UserCashRecordListResponseStruct
  var err2 error
  if retval, err2 = p.handler.GetUserCashRecordList(args.RequestObj); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserCashRecordList: " + err2.Error())
    oprot.WriteMessageBegin("getUserCashRecordList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUserCashRecordList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type UserCashRecordListThriftServiceGetUserCashRecordListArgs struct {
  RequestObj *UserCashRecordListRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewUserCashRecordListThriftServiceGetUserCashRecordListArgs() *UserCashRecordListThriftServiceGetUserCashRecordListArgs {
  return &UserCashRecordListThriftServiceGetUserCashRecordListArgs{}
}

var UserCashRecordListThriftServiceGetUserCashRecordListArgs_RequestObj_DEFAULT *UserCashRecordListRequestStruct
func (p *UserCashRecordListThriftServiceGetUserCashRecordListArgs) GetRequestObj() *UserCashRecordListRequestStruct {
  if !p.IsSetRequestObj() {
    return UserCashRecordListThriftServiceGetUserCashRecordListArgs_RequestObj_DEFAULT
  }
return p.RequestObj
}
func (p *UserCashRecordListThriftServiceGetUserCashRecordListArgs) IsSetRequestObj() bool {
  return p.RequestObj != nil
}

func (p *UserCashRecordListThriftServiceGetUserCashRecordListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserCashRecordListThriftServiceGetUserCashRecordListArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestObj = &UserCashRecordListRequestStruct{}
  if err := p.RequestObj.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
  }
  return nil
}

func (p *UserCashRecordListThriftServiceGetUserCashRecordListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserCashRecordList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserCashRecordListThriftServiceGetUserCashRecordListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err) }
  if err := p.RequestObj.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err) }
  return err
}

func (p *UserCashRecordListThriftServiceGetUserCashRecordListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserCashRecordListThriftServiceGetUserCashRecordListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserCashRecordListThriftServiceGetUserCashRecordListResult struct {
  Success *UserCashRecordListResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserCashRecordListThriftServiceGetUserCashRecordListResult() *UserCashRecordListThriftServiceGetUserCashRecordListResult {
  return &UserCashRecordListThriftServiceGetUserCashRecordListResult{}
}

var UserCashRecordListThriftServiceGetUserCashRecordListResult_Success_DEFAULT *UserCashRecordListResponseStruct
func (p *UserCashRecordListThriftServiceGetUserCashRecordListResult) GetSuccess() *UserCashRecordListResponseStruct {
  if !p.IsSetSuccess() {
    return UserCashRecordListThriftServiceGetUserCashRecordListResult_Success_DEFAULT
  }
return p.Success
}
func (p *UserCashRecordListThriftServiceGetUserCashRecordListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *UserCashRecordListThriftServiceGetUserCashRecordListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserCashRecordListThriftServiceGetUserCashRecordListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UserCashRecordListResponseStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *UserCashRecordListThriftServiceGetUserCashRecordListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUserCashRecordList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserCashRecordListThriftServiceGetUserCashRecordListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *UserCashRecordListThriftServiceGetUserCashRecordListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserCashRecordListThriftServiceGetUserCashRecordListResult(%+v)", *p)
}


