// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package memberhelperlist

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - Type
//  - Keywords
//  - LimitOffset
//  - LimitNum
//  - ChengHuiTongTraceLog
type MemberHelperListRequestStruct struct {
	Type                 int32  `thrift:"type,1" db:"type" json:"type"`
	Keywords             string `thrift:"keywords,2" db:"keywords" json:"keywords"`
	LimitOffset          int32  `thrift:"limitOffset,3" db:"limitOffset" json:"limitOffset"`
	LimitNum             int32  `thrift:"limitNum,4" db:"limitNum" json:"limitNum"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,5" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewMemberHelperListRequestStruct() *MemberHelperListRequestStruct {
//   return &MemberHelperListRequestStruct{}
// }

func (p *MemberHelperListRequestStruct) GetType() int32 {
	return p.Type
}

func (p *MemberHelperListRequestStruct) GetKeywords() string {
	return p.Keywords
}

func (p *MemberHelperListRequestStruct) GetLimitOffset() int32 {
	return p.LimitOffset
}

func (p *MemberHelperListRequestStruct) GetLimitNum() int32 {
	return p.LimitNum
}

func (p *MemberHelperListRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *MemberHelperListRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberHelperListRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *MemberHelperListRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Keywords = v
	}
	return nil
}

func (p *MemberHelperListRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.LimitOffset = v
	}
	return nil
}

func (p *MemberHelperListRequestStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.LimitNum = v
	}
	return nil
}

func (p *MemberHelperListRequestStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *MemberHelperListRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MemberHelperListRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberHelperListRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *MemberHelperListRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keywords", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keywords: ", p), err)
	}
	if err := oprot.WriteString(string(p.Keywords)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keywords (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keywords: ", p), err)
	}
	return err
}

func (p *MemberHelperListRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limitOffset", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limitOffset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitOffset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limitOffset (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limitOffset: ", p), err)
	}
	return err
}

func (p *MemberHelperListRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limitNum", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:limitNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limitNum (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:limitNum: ", p), err)
	}
	return err
}

func (p *MemberHelperListRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *MemberHelperListRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberHelperListRequestStruct(%+v)", *p)
}

// Attributes:
//  - Linkman
//  - Linkrelation
//  - Linkphone
//  - Updatetime
//  - ID
//  - Username
//  - Realname
//  - Phone
//  - Customer
type MemberHelperDetailsStruct struct {
	Linkman      string `thrift:"linkman,1" db:"linkman" json:"linkman"`
	Linkrelation string `thrift:"linkrelation,2" db:"linkrelation" json:"linkrelation"`
	Linkphone    string `thrift:"linkphone,3" db:"linkphone" json:"linkphone"`
	Updatetime   int32  `thrift:"updatetime,4" db:"updatetime" json:"updatetime"`
	ID           int32  `thrift:"id,5" db:"id" json:"id"`
	Username     string `thrift:"username,6" db:"username" json:"username"`
	Realname     string `thrift:"realname,7" db:"realname" json:"realname"`
	Phone        string `thrift:"phone,8" db:"phone" json:"phone"`
	Customer     int32  `thrift:"customer,9" db:"customer" json:"customer"`
}

func NewMemberHelperDetailsStruct() *MemberHelperDetailsStruct {
	return &MemberHelperDetailsStruct{}
}

func (p *MemberHelperDetailsStruct) GetLinkman() string {
	return p.Linkman
}

func (p *MemberHelperDetailsStruct) GetLinkrelation() string {
	return p.Linkrelation
}

func (p *MemberHelperDetailsStruct) GetLinkphone() string {
	return p.Linkphone
}

func (p *MemberHelperDetailsStruct) GetUpdatetime() int32 {
	return p.Updatetime
}

func (p *MemberHelperDetailsStruct) GetID() int32 {
	return p.ID
}

func (p *MemberHelperDetailsStruct) GetUsername() string {
	return p.Username
}

func (p *MemberHelperDetailsStruct) GetRealname() string {
	return p.Realname
}

func (p *MemberHelperDetailsStruct) GetPhone() string {
	return p.Phone
}

func (p *MemberHelperDetailsStruct) GetCustomer() int32 {
	return p.Customer
}
func (p *MemberHelperDetailsStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberHelperDetailsStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Linkman = v
	}
	return nil
}

func (p *MemberHelperDetailsStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Linkrelation = v
	}
	return nil
}

func (p *MemberHelperDetailsStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Linkphone = v
	}
	return nil
}

func (p *MemberHelperDetailsStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Updatetime = v
	}
	return nil
}

func (p *MemberHelperDetailsStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *MemberHelperDetailsStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *MemberHelperDetailsStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Realname = v
	}
	return nil
}

func (p *MemberHelperDetailsStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Phone = v
	}
	return nil
}

func (p *MemberHelperDetailsStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Customer = v
	}
	return nil
}

func (p *MemberHelperDetailsStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MemberHelperDetailsStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberHelperDetailsStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("linkman", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:linkman: ", p), err)
	}
	if err := oprot.WriteString(string(p.Linkman)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.linkman (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:linkman: ", p), err)
	}
	return err
}

func (p *MemberHelperDetailsStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("linkrelation", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:linkrelation: ", p), err)
	}
	if err := oprot.WriteString(string(p.Linkrelation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.linkrelation (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:linkrelation: ", p), err)
	}
	return err
}

func (p *MemberHelperDetailsStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("linkphone", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:linkphone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Linkphone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.linkphone (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:linkphone: ", p), err)
	}
	return err
}

func (p *MemberHelperDetailsStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updatetime", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:updatetime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Updatetime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updatetime (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:updatetime: ", p), err)
	}
	return err
}

func (p *MemberHelperDetailsStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:id: ", p), err)
	}
	return err
}

func (p *MemberHelperDetailsStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:username: ", p), err)
	}
	return err
}

func (p *MemberHelperDetailsStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("realname", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:realname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Realname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.realname (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:realname: ", p), err)
	}
	return err
}

func (p *MemberHelperDetailsStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("phone", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:phone: ", p), err)
	}
	if err := oprot.WriteString(string(p.Phone)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.phone (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:phone: ", p), err)
	}
	return err
}

func (p *MemberHelperDetailsStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("customer", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:customer: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Customer)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.customer (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:customer: ", p), err)
	}
	return err
}

func (p *MemberHelperDetailsStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberHelperDetailsStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - LinkManList
//  - TotalNum
//  - Msg
type MemberHelperListResponseStruct struct {
	Status      int32                        `thrift:"status,1" db:"status" json:"status"`
	LinkManList []*MemberHelperDetailsStruct `thrift:"linkManList,2" db:"linkManList" json:"linkManList"`
	TotalNum    int32                        `thrift:"total_num,3" db:"total_num" json:"total_num"`
	Msg         string                       `thrift:"msg,4" db:"msg" json:"msg"`
}

func NewMemberHelperListResponseStruct() *MemberHelperListResponseStruct {
	return &MemberHelperListResponseStruct{}
}

func (p *MemberHelperListResponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *MemberHelperListResponseStruct) GetLinkManList() []*MemberHelperDetailsStruct {
	return p.LinkManList
}

func (p *MemberHelperListResponseStruct) GetTotalNum() int32 {
	return p.TotalNum
}

func (p *MemberHelperListResponseStruct) GetMsg() string {
	return p.Msg
}
func (p *MemberHelperListResponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberHelperListResponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *MemberHelperListResponseStruct) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*MemberHelperDetailsStruct, 0, size)
	p.LinkManList = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &MemberHelperDetailsStruct{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.LinkManList = append(p.LinkManList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *MemberHelperListResponseStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalNum = v
	}
	return nil
}

func (p *MemberHelperListResponseStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *MemberHelperListResponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MemberHelperListResponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberHelperListResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *MemberHelperListResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("linkManList", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:linkManList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LinkManList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.LinkManList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:linkManList: ", p), err)
	}
	return err
}

func (p *MemberHelperListResponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_num", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total_num: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_num (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total_num: ", p), err)
	}
	return err
}

func (p *MemberHelperListResponseStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:msg: ", p), err)
	}
	return err
}

func (p *MemberHelperListResponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberHelperListResponseStruct(%+v)", *p)
}

type MemberHelperListThriftService interface {
	// Parameters:
	//  - RequestObj
	GetMemberHelperList(requestObj *MemberHelperListRequestStruct) (r *MemberHelperListResponseStruct, err error)
}

type MemberHelperListThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewMemberHelperListThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MemberHelperListThriftServiceClient {
	return &MemberHelperListThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewMemberHelperListThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MemberHelperListThriftServiceClient {
	return &MemberHelperListThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RequestObj
func (p *MemberHelperListThriftServiceClient) GetMemberHelperList(requestObj *MemberHelperListRequestStruct) (r *MemberHelperListResponseStruct, err error) {
	if err = p.sendGetMemberHelperList(requestObj); err != nil {
		return
	}
	return p.recvGetMemberHelperList()
}

func (p *MemberHelperListThriftServiceClient) sendGetMemberHelperList(requestObj *MemberHelperListRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getMemberHelperList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := MemberHelperListThriftServiceGetMemberHelperListArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *MemberHelperListThriftServiceClient) recvGetMemberHelperList() (value *MemberHelperListResponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getMemberHelperList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getMemberHelperList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getMemberHelperList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error2 error
		error2, err = error1.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error2
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getMemberHelperList failed: invalid message type")
		return
	}
	result := MemberHelperListThriftServiceGetMemberHelperListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type MemberHelperListThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MemberHelperListThriftService
}

func (p *MemberHelperListThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MemberHelperListThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MemberHelperListThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMemberHelperListThriftServiceProcessor(handler MemberHelperListThriftService) *MemberHelperListThriftServiceProcessor {

	self3 := &MemberHelperListThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self3.processorMap["getMemberHelperList"] = &memberHelperListThriftServiceProcessorGetMemberHelperList{handler: handler}
	return self3
}

func (p *MemberHelperListThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x4

}

type memberHelperListThriftServiceProcessorGetMemberHelperList struct {
	handler MemberHelperListThriftService
}

func (p *memberHelperListThriftServiceProcessorGetMemberHelperList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MemberHelperListThriftServiceGetMemberHelperListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMemberHelperList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := MemberHelperListThriftServiceGetMemberHelperListResult{}
	var retval *MemberHelperListResponseStruct
	var err2 error
	if retval, err2 = p.handler.GetMemberHelperList(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMemberHelperList: "+err2.Error())
		oprot.WriteMessageBegin("getMemberHelperList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getMemberHelperList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type MemberHelperListThriftServiceGetMemberHelperListArgs struct {
	RequestObj *MemberHelperListRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewMemberHelperListThriftServiceGetMemberHelperListArgs() *MemberHelperListThriftServiceGetMemberHelperListArgs {
	return &MemberHelperListThriftServiceGetMemberHelperListArgs{}
}

var MemberHelperListThriftServiceGetMemberHelperListArgs_RequestObj_DEFAULT *MemberHelperListRequestStruct

func (p *MemberHelperListThriftServiceGetMemberHelperListArgs) GetRequestObj() *MemberHelperListRequestStruct {
	if !p.IsSetRequestObj() {
		return MemberHelperListThriftServiceGetMemberHelperListArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *MemberHelperListThriftServiceGetMemberHelperListArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *MemberHelperListThriftServiceGetMemberHelperListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberHelperListThriftServiceGetMemberHelperListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &MemberHelperListRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *MemberHelperListThriftServiceGetMemberHelperListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMemberHelperList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberHelperListThriftServiceGetMemberHelperListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *MemberHelperListThriftServiceGetMemberHelperListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberHelperListThriftServiceGetMemberHelperListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MemberHelperListThriftServiceGetMemberHelperListResult struct {
	Success *MemberHelperListResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMemberHelperListThriftServiceGetMemberHelperListResult() *MemberHelperListThriftServiceGetMemberHelperListResult {
	return &MemberHelperListThriftServiceGetMemberHelperListResult{}
}

var MemberHelperListThriftServiceGetMemberHelperListResult_Success_DEFAULT *MemberHelperListResponseStruct

func (p *MemberHelperListThriftServiceGetMemberHelperListResult) GetSuccess() *MemberHelperListResponseStruct {
	if !p.IsSetSuccess() {
		return MemberHelperListThriftServiceGetMemberHelperListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MemberHelperListThriftServiceGetMemberHelperListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MemberHelperListThriftServiceGetMemberHelperListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MemberHelperListThriftServiceGetMemberHelperListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &MemberHelperListResponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MemberHelperListThriftServiceGetMemberHelperListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMemberHelperList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MemberHelperListThriftServiceGetMemberHelperListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *MemberHelperListThriftServiceGetMemberHelperListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MemberHelperListThriftServiceGetMemberHelperListResult(%+v)", *p)
}
