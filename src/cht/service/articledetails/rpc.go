// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package articledetails

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - ID
//  - ChengHuiTongTraceLog
type ArticleDetailsRequestStruct struct {
	ID                   int32  `thrift:"id,1" db:"id" json:"id"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,2" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewArticleDetailsRequestStruct() *ArticleDetailsRequestStruct {
// 	return &ArticleDetailsRequestStruct{}
// }

func (p *ArticleDetailsRequestStruct) GetID() int32 {
	return p.ID
}

func (p *ArticleDetailsRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *ArticleDetailsRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ArticleDetailsRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ArticleDetailsRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *ArticleDetailsRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ArticleDetailsRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ArticleDetailsRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ArticleDetailsRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *ArticleDetailsRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleDetailsRequestStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - Cateid
//  - Title
//  - Content
//  - Keywords
//  - Description
//  - ImgURL
//  - Sort
//  - Status
//  - Addtime
//  - BannerURL
//  - Isbanner
//  - Type
//  - Name
//  - ResultStatus
//  - Msg
type ArticleDetailsResultStruct struct {
	ID           int32  `thrift:"id,1" db:"id" json:"id"`
	Cateid       int32  `thrift:"cateid,2" db:"cateid" json:"cateid"`
	Title        string `thrift:"title,3" db:"title" json:"title"`
	Content      string `thrift:"content,4" db:"content" json:"content"`
	Keywords     string `thrift:"keywords,5" db:"keywords" json:"keywords"`
	Description  string `thrift:"description,6" db:"description" json:"description"`
	ImgURL       string `thrift:"img_url,7" db:"img_url" json:"img_url"`
	Sort         string `thrift:"sort,8" db:"sort" json:"sort"`
	Status       int32  `thrift:"status,9" db:"status" json:"status"`
	Addtime      int32  `thrift:"addtime,10" db:"addtime" json:"addtime"`
	BannerURL    string `thrift:"banner_url,11" db:"banner_url" json:"banner_url"`
	Isbanner     int32  `thrift:"isbanner,12" db:"isbanner" json:"isbanner"`
	Type         int32  `thrift:"type,13" db:"type" json:"type"`
	Name         string `thrift:"name,14" db:"name" json:"name"`
	ResultStatus int32  `thrift:"result_status,15" db:"result_status" json:"result_status"`
	Msg          string `thrift:"msg,16" db:"msg" json:"msg"`
}

// func NewArticleDetailsResultStruct() *ArticleDetailsResultStruct {
//   return &ArticleDetailsResultStruct{}
// }

func (p *ArticleDetailsResultStruct) GetID() int32 {
	return p.ID
}

func (p *ArticleDetailsResultStruct) GetCateid() int32 {
	return p.Cateid
}

func (p *ArticleDetailsResultStruct) GetTitle() string {
	return p.Title
}

func (p *ArticleDetailsResultStruct) GetContent() string {
	return p.Content
}

func (p *ArticleDetailsResultStruct) GetKeywords() string {
	return p.Keywords
}

func (p *ArticleDetailsResultStruct) GetDescription() string {
	return p.Description
}

func (p *ArticleDetailsResultStruct) GetImgURL() string {
	return p.ImgURL
}

func (p *ArticleDetailsResultStruct) GetSort() string {
	return p.Sort
}

func (p *ArticleDetailsResultStruct) GetStatus() int32 {
	return p.Status
}

func (p *ArticleDetailsResultStruct) GetAddtime() int32 {
	return p.Addtime
}

func (p *ArticleDetailsResultStruct) GetBannerURL() string {
	return p.BannerURL
}

func (p *ArticleDetailsResultStruct) GetIsbanner() int32 {
	return p.Isbanner
}

func (p *ArticleDetailsResultStruct) GetType() int32 {
	return p.Type
}

func (p *ArticleDetailsResultStruct) GetName() string {
	return p.Name
}

func (p *ArticleDetailsResultStruct) GetResultStatus() int32 {
	return p.ResultStatus
}

func (p *ArticleDetailsResultStruct) GetMsg() string {
	return p.Msg
}
func (p *ArticleDetailsResultStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ArticleDetailsResultStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ArticleDetailsResultStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Cateid = v
	}
	return nil
}

func (p *ArticleDetailsResultStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *ArticleDetailsResultStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Content = v
	}
	return nil
}

func (p *ArticleDetailsResultStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Keywords = v
	}
	return nil
}

func (p *ArticleDetailsResultStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Description = v
	}
	return nil
}

func (p *ArticleDetailsResultStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ImgURL = v
	}
	return nil
}

func (p *ArticleDetailsResultStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Sort = v
	}
	return nil
}

func (p *ArticleDetailsResultStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *ArticleDetailsResultStruct) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Addtime = v
	}
	return nil
}

func (p *ArticleDetailsResultStruct) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.BannerURL = v
	}
	return nil
}

func (p *ArticleDetailsResultStruct) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Isbanner = v
	}
	return nil
}

func (p *ArticleDetailsResultStruct) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *ArticleDetailsResultStruct) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ArticleDetailsResultStruct) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.ResultStatus = v
	}
	return nil
}

func (p *ArticleDetailsResultStruct) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *ArticleDetailsResultStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ArticleDetailsResultStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ArticleDetailsResultStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *ArticleDetailsResultStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cateid", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cateid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Cateid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cateid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cateid: ", p), err)
	}
	return err
}

func (p *ArticleDetailsResultStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err)
	}
	return err
}

func (p *ArticleDetailsResultStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:content: ", p), err)
	}
	if err := oprot.WriteString(string(p.Content)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.content (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:content: ", p), err)
	}
	return err
}

func (p *ArticleDetailsResultStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keywords", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:keywords: ", p), err)
	}
	if err := oprot.WriteString(string(p.Keywords)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keywords (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:keywords: ", p), err)
	}
	return err
}

func (p *ArticleDetailsResultStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:description: ", p), err)
	}
	if err := oprot.WriteString(string(p.Description)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.description (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:description: ", p), err)
	}
	return err
}

func (p *ArticleDetailsResultStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("img_url", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:img_url: ", p), err)
	}
	if err := oprot.WriteString(string(p.ImgURL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.img_url (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:img_url: ", p), err)
	}
	return err
}

func (p *ArticleDetailsResultStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sort", thrift.STRING, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sort: ", p), err)
	}
	if err := oprot.WriteString(string(p.Sort)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sort (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sort: ", p), err)
	}
	return err
}

func (p *ArticleDetailsResultStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:status: ", p), err)
	}
	return err
}

func (p *ArticleDetailsResultStruct) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addtime", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:addtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Addtime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addtime (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:addtime: ", p), err)
	}
	return err
}

func (p *ArticleDetailsResultStruct) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("banner_url", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:banner_url: ", p), err)
	}
	if err := oprot.WriteString(string(p.BannerURL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.banner_url (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:banner_url: ", p), err)
	}
	return err
}

func (p *ArticleDetailsResultStruct) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isbanner", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:isbanner: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Isbanner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isbanner (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:isbanner: ", p), err)
	}
	return err
}

func (p *ArticleDetailsResultStruct) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:type: ", p), err)
	}
	return err
}

func (p *ArticleDetailsResultStruct) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:name: ", p), err)
	}
	return err
}

func (p *ArticleDetailsResultStruct) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("result_status", thrift.I32, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:result_status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ResultStatus)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.result_status (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:result_status: ", p), err)
	}
	return err
}

func (p *ArticleDetailsResultStruct) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:msg: ", p), err)
	}
	return err
}

func (p *ArticleDetailsResultStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleDetailsResultStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - Cateid
//  - Type
//  - Addtime
//  - ChengHuiTongTraceLog
type NextRequestStruct struct {
	ID                   int32  `thrift:"id,1" db:"id" json:"id"`
	Cateid               int32  `thrift:"cateid,2" db:"cateid" json:"cateid"`
	Type                 int32  `thrift:"type,3" db:"type" json:"type"`
	Addtime              int32  `thrift:"addtime,4" db:"addtime" json:"addtime"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,5" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewNextRequestStruct() *NextRequestStruct {
//   return &NextRequestStruct{}
// }

func (p *NextRequestStruct) GetID() int32 {
	return p.ID
}

func (p *NextRequestStruct) GetCateid() int32 {
	return p.Cateid
}

func (p *NextRequestStruct) GetType() int32 {
	return p.Type
}

func (p *NextRequestStruct) GetAddtime() int32 {
	return p.Addtime
}

func (p *NextRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *NextRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NextRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *NextRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Cateid = v
	}
	return nil
}

func (p *NextRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *NextRequestStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Addtime = v
	}
	return nil
}

func (p *NextRequestStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *NextRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NextRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NextRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *NextRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cateid", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cateid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Cateid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.cateid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cateid: ", p), err)
	}
	return err
}

func (p *NextRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *NextRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addtime", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:addtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Addtime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addtime (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:addtime: ", p), err)
	}
	return err
}

func (p *NextRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *NextRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NextRequestStruct(%+v)", *p)
}

type ArticleDetailsThriftService interface {
	// Parameters:
	//  - RequestObj
	GetArticleDetails(requestObj *ArticleDetailsRequestStruct) (r *ArticleDetailsResultStruct, err error)
	// Parameters:
	//  - RequestObj
	UpdateReadNum(requestObj *ArticleDetailsRequestStruct) (r int32, err error)
	// Parameters:
	//  - RequestObj
	PrevArticle(requestObj *NextRequestStruct) (r *ArticleDetailsResultStruct, err error)
	// Parameters:
	//  - RequestObj
	NextArticle(requestObj *NextRequestStruct) (r *ArticleDetailsResultStruct, err error)
}

type ArticleDetailsThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewArticleDetailsThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ArticleDetailsThriftServiceClient {
	return &ArticleDetailsThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewArticleDetailsThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ArticleDetailsThriftServiceClient {
	return &ArticleDetailsThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RequestObj
func (p *ArticleDetailsThriftServiceClient) GetArticleDetails(requestObj *ArticleDetailsRequestStruct) (r *ArticleDetailsResultStruct, err error) {
	if err = p.sendGetArticleDetails(requestObj); err != nil {
		return
	}
	return p.recvGetArticleDetails()
}

func (p *ArticleDetailsThriftServiceClient) sendGetArticleDetails(requestObj *ArticleDetailsRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getArticleDetails", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ArticleDetailsThriftServiceGetArticleDetailsArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ArticleDetailsThriftServiceClient) recvGetArticleDetails() (value *ArticleDetailsResultStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getArticleDetails" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getArticleDetails failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getArticleDetails failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getArticleDetails failed: invalid message type")
		return
	}
	result := ArticleDetailsThriftServiceGetArticleDetailsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RequestObj
func (p *ArticleDetailsThriftServiceClient) UpdateReadNum(requestObj *ArticleDetailsRequestStruct) (r int32, err error) {
	if err = p.sendUpdateReadNum(requestObj); err != nil {
		return
	}
	return p.recvUpdateReadNum()
}

func (p *ArticleDetailsThriftServiceClient) sendUpdateReadNum(requestObj *ArticleDetailsRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateReadNum", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ArticleDetailsThriftServiceUpdateReadNumArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ArticleDetailsThriftServiceClient) recvUpdateReadNum() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateReadNum" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateReadNum failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateReadNum failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateReadNum failed: invalid message type")
		return
	}
	result := ArticleDetailsThriftServiceUpdateReadNumResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RequestObj
func (p *ArticleDetailsThriftServiceClient) PrevArticle(requestObj *NextRequestStruct) (r *ArticleDetailsResultStruct, err error) {
	if err = p.sendPrevArticle(requestObj); err != nil {
		return
	}
	return p.recvPrevArticle()
}

func (p *ArticleDetailsThriftServiceClient) sendPrevArticle(requestObj *NextRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("prevArticle", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ArticleDetailsThriftServicePrevArticleArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ArticleDetailsThriftServiceClient) recvPrevArticle() (value *ArticleDetailsResultStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "prevArticle" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "prevArticle failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "prevArticle failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "prevArticle failed: invalid message type")
		return
	}
	result := ArticleDetailsThriftServicePrevArticleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RequestObj
func (p *ArticleDetailsThriftServiceClient) NextArticle(requestObj *NextRequestStruct) (r *ArticleDetailsResultStruct, err error) {
	if err = p.sendNextArticle(requestObj); err != nil {
		return
	}
	return p.recvNextArticle()
}

func (p *ArticleDetailsThriftServiceClient) sendNextArticle(requestObj *NextRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("nextArticle", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ArticleDetailsThriftServiceNextArticleArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ArticleDetailsThriftServiceClient) recvNextArticle() (value *ArticleDetailsResultStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "nextArticle" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "nextArticle failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "nextArticle failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "nextArticle failed: invalid message type")
		return
	}
	result := ArticleDetailsThriftServiceNextArticleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type ArticleDetailsThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ArticleDetailsThriftService
}

func (p *ArticleDetailsThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ArticleDetailsThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ArticleDetailsThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewArticleDetailsThriftServiceProcessor(handler ArticleDetailsThriftService) *ArticleDetailsThriftServiceProcessor {

	self8 := &ArticleDetailsThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self8.processorMap["getArticleDetails"] = &articleDetailsThriftServiceProcessorGetArticleDetails{handler: handler}
	self8.processorMap["updateReadNum"] = &articleDetailsThriftServiceProcessorUpdateReadNum{handler: handler}
	self8.processorMap["prevArticle"] = &articleDetailsThriftServiceProcessorPrevArticle{handler: handler}
	self8.processorMap["nextArticle"] = &articleDetailsThriftServiceProcessorNextArticle{handler: handler}
	return self8
}

func (p *ArticleDetailsThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x9.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x9

}

type articleDetailsThriftServiceProcessorGetArticleDetails struct {
	handler ArticleDetailsThriftService
}

func (p *articleDetailsThriftServiceProcessorGetArticleDetails) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ArticleDetailsThriftServiceGetArticleDetailsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getArticleDetails", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ArticleDetailsThriftServiceGetArticleDetailsResult{}
	var retval *ArticleDetailsResultStruct
	var err2 error
	if retval, err2 = p.handler.GetArticleDetails(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getArticleDetails: "+err2.Error())
		oprot.WriteMessageBegin("getArticleDetails", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getArticleDetails", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type articleDetailsThriftServiceProcessorUpdateReadNum struct {
	handler ArticleDetailsThriftService
}

func (p *articleDetailsThriftServiceProcessorUpdateReadNum) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ArticleDetailsThriftServiceUpdateReadNumArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateReadNum", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ArticleDetailsThriftServiceUpdateReadNumResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.UpdateReadNum(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateReadNum: "+err2.Error())
		oprot.WriteMessageBegin("updateReadNum", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateReadNum", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type articleDetailsThriftServiceProcessorPrevArticle struct {
	handler ArticleDetailsThriftService
}

func (p *articleDetailsThriftServiceProcessorPrevArticle) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ArticleDetailsThriftServicePrevArticleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("prevArticle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ArticleDetailsThriftServicePrevArticleResult{}
	var retval *ArticleDetailsResultStruct
	var err2 error
	if retval, err2 = p.handler.PrevArticle(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing prevArticle: "+err2.Error())
		oprot.WriteMessageBegin("prevArticle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("prevArticle", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type articleDetailsThriftServiceProcessorNextArticle struct {
	handler ArticleDetailsThriftService
}

func (p *articleDetailsThriftServiceProcessorNextArticle) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ArticleDetailsThriftServiceNextArticleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("nextArticle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ArticleDetailsThriftServiceNextArticleResult{}
	var retval *ArticleDetailsResultStruct
	var err2 error
	if retval, err2 = p.handler.NextArticle(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing nextArticle: "+err2.Error())
		oprot.WriteMessageBegin("nextArticle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("nextArticle", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type ArticleDetailsThriftServiceGetArticleDetailsArgs struct {
	RequestObj *ArticleDetailsRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewArticleDetailsThriftServiceGetArticleDetailsArgs() *ArticleDetailsThriftServiceGetArticleDetailsArgs {
	return &ArticleDetailsThriftServiceGetArticleDetailsArgs{}
}

var ArticleDetailsThriftServiceGetArticleDetailsArgs_RequestObj_DEFAULT *ArticleDetailsRequestStruct

func (p *ArticleDetailsThriftServiceGetArticleDetailsArgs) GetRequestObj() *ArticleDetailsRequestStruct {
	if !p.IsSetRequestObj() {
		return ArticleDetailsThriftServiceGetArticleDetailsArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *ArticleDetailsThriftServiceGetArticleDetailsArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *ArticleDetailsThriftServiceGetArticleDetailsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceGetArticleDetailsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &ArticleDetailsRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceGetArticleDetailsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getArticleDetails_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceGetArticleDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *ArticleDetailsThriftServiceGetArticleDetailsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleDetailsThriftServiceGetArticleDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ArticleDetailsThriftServiceGetArticleDetailsResult struct {
	Success *ArticleDetailsResultStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewArticleDetailsThriftServiceGetArticleDetailsResult() *ArticleDetailsThriftServiceGetArticleDetailsResult {
	return &ArticleDetailsThriftServiceGetArticleDetailsResult{}
}

var ArticleDetailsThriftServiceGetArticleDetailsResult_Success_DEFAULT *ArticleDetailsResultStruct

func (p *ArticleDetailsThriftServiceGetArticleDetailsResult) GetSuccess() *ArticleDetailsResultStruct {
	if !p.IsSetSuccess() {
		return ArticleDetailsThriftServiceGetArticleDetailsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ArticleDetailsThriftServiceGetArticleDetailsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ArticleDetailsThriftServiceGetArticleDetailsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceGetArticleDetailsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ArticleDetailsResultStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceGetArticleDetailsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getArticleDetails_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceGetArticleDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ArticleDetailsThriftServiceGetArticleDetailsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleDetailsThriftServiceGetArticleDetailsResult(%+v)", *p)
}

// Attributes:
//  - RequestObj
type ArticleDetailsThriftServiceUpdateReadNumArgs struct {
	RequestObj *ArticleDetailsRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewArticleDetailsThriftServiceUpdateReadNumArgs() *ArticleDetailsThriftServiceUpdateReadNumArgs {
	return &ArticleDetailsThriftServiceUpdateReadNumArgs{}
}

var ArticleDetailsThriftServiceUpdateReadNumArgs_RequestObj_DEFAULT *ArticleDetailsRequestStruct

func (p *ArticleDetailsThriftServiceUpdateReadNumArgs) GetRequestObj() *ArticleDetailsRequestStruct {
	if !p.IsSetRequestObj() {
		return ArticleDetailsThriftServiceUpdateReadNumArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *ArticleDetailsThriftServiceUpdateReadNumArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *ArticleDetailsThriftServiceUpdateReadNumArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceUpdateReadNumArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &ArticleDetailsRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceUpdateReadNumArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateReadNum_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceUpdateReadNumArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *ArticleDetailsThriftServiceUpdateReadNumArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleDetailsThriftServiceUpdateReadNumArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ArticleDetailsThriftServiceUpdateReadNumResult struct {
	Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewArticleDetailsThriftServiceUpdateReadNumResult() *ArticleDetailsThriftServiceUpdateReadNumResult {
	return &ArticleDetailsThriftServiceUpdateReadNumResult{}
}

var ArticleDetailsThriftServiceUpdateReadNumResult_Success_DEFAULT int32

func (p *ArticleDetailsThriftServiceUpdateReadNumResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return ArticleDetailsThriftServiceUpdateReadNumResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ArticleDetailsThriftServiceUpdateReadNumResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ArticleDetailsThriftServiceUpdateReadNumResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceUpdateReadNumResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ArticleDetailsThriftServiceUpdateReadNumResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateReadNum_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceUpdateReadNumResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ArticleDetailsThriftServiceUpdateReadNumResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleDetailsThriftServiceUpdateReadNumResult(%+v)", *p)
}

// Attributes:
//  - RequestObj
type ArticleDetailsThriftServicePrevArticleArgs struct {
	RequestObj *NextRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewArticleDetailsThriftServicePrevArticleArgs() *ArticleDetailsThriftServicePrevArticleArgs {
	return &ArticleDetailsThriftServicePrevArticleArgs{}
}

var ArticleDetailsThriftServicePrevArticleArgs_RequestObj_DEFAULT *NextRequestStruct

func (p *ArticleDetailsThriftServicePrevArticleArgs) GetRequestObj() *NextRequestStruct {
	if !p.IsSetRequestObj() {
		return ArticleDetailsThriftServicePrevArticleArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *ArticleDetailsThriftServicePrevArticleArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *ArticleDetailsThriftServicePrevArticleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ArticleDetailsThriftServicePrevArticleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &NextRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *ArticleDetailsThriftServicePrevArticleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("prevArticle_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ArticleDetailsThriftServicePrevArticleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *ArticleDetailsThriftServicePrevArticleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleDetailsThriftServicePrevArticleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ArticleDetailsThriftServicePrevArticleResult struct {
	Success *ArticleDetailsResultStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewArticleDetailsThriftServicePrevArticleResult() *ArticleDetailsThriftServicePrevArticleResult {
	return &ArticleDetailsThriftServicePrevArticleResult{}
}

var ArticleDetailsThriftServicePrevArticleResult_Success_DEFAULT *ArticleDetailsResultStruct

func (p *ArticleDetailsThriftServicePrevArticleResult) GetSuccess() *ArticleDetailsResultStruct {
	if !p.IsSetSuccess() {
		return ArticleDetailsThriftServicePrevArticleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ArticleDetailsThriftServicePrevArticleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ArticleDetailsThriftServicePrevArticleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ArticleDetailsThriftServicePrevArticleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ArticleDetailsResultStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ArticleDetailsThriftServicePrevArticleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("prevArticle_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ArticleDetailsThriftServicePrevArticleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ArticleDetailsThriftServicePrevArticleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleDetailsThriftServicePrevArticleResult(%+v)", *p)
}

// Attributes:
//  - RequestObj
type ArticleDetailsThriftServiceNextArticleArgs struct {
	RequestObj *NextRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewArticleDetailsThriftServiceNextArticleArgs() *ArticleDetailsThriftServiceNextArticleArgs {
	return &ArticleDetailsThriftServiceNextArticleArgs{}
}

var ArticleDetailsThriftServiceNextArticleArgs_RequestObj_DEFAULT *NextRequestStruct

func (p *ArticleDetailsThriftServiceNextArticleArgs) GetRequestObj() *NextRequestStruct {
	if !p.IsSetRequestObj() {
		return ArticleDetailsThriftServiceNextArticleArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *ArticleDetailsThriftServiceNextArticleArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *ArticleDetailsThriftServiceNextArticleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceNextArticleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &NextRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceNextArticleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("nextArticle_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceNextArticleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *ArticleDetailsThriftServiceNextArticleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleDetailsThriftServiceNextArticleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ArticleDetailsThriftServiceNextArticleResult struct {
	Success *ArticleDetailsResultStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewArticleDetailsThriftServiceNextArticleResult() *ArticleDetailsThriftServiceNextArticleResult {
	return &ArticleDetailsThriftServiceNextArticleResult{}
}

var ArticleDetailsThriftServiceNextArticleResult_Success_DEFAULT *ArticleDetailsResultStruct

func (p *ArticleDetailsThriftServiceNextArticleResult) GetSuccess() *ArticleDetailsResultStruct {
	if !p.IsSetSuccess() {
		return ArticleDetailsThriftServiceNextArticleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ArticleDetailsThriftServiceNextArticleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ArticleDetailsThriftServiceNextArticleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceNextArticleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &ArticleDetailsResultStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceNextArticleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("nextArticle_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ArticleDetailsThriftServiceNextArticleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ArticleDetailsThriftServiceNextArticleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ArticleDetailsThriftServiceNextArticleResult(%+v)", *p)
}
