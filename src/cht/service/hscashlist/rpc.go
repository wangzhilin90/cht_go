// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hscashlist

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - StartTime
//  - EndTime
//  - Utype
//  - Type
//  - Keywords
//  - PayWay
//  - Status
//  - IsExport
//  - LimitOffset
//  - LimitNum
//  - ChengHuiTongTraceLog
type HsCashListRequestStruct struct {
	StartTime            int32  `thrift:"start_time,1" db:"start_time" json:"start_time"`
	EndTime              int32  `thrift:"end_time,2" db:"end_time" json:"end_time"`
	Utype                int32  `thrift:"utype,3" db:"utype" json:"utype"`
	Type                 int32  `thrift:"type,4" db:"type" json:"type"`
	Keywords             string `thrift:"keywords,5" db:"keywords" json:"keywords"`
	PayWay               int32  `thrift:"pay_way,6" db:"pay_way" json:"pay_way"`
	Status               int32  `thrift:"status,7" db:"status" json:"status"`
	IsExport             int32  `thrift:"is_export,8" db:"is_export" json:"is_export"`
	LimitOffset          int32  `thrift:"limitOffset,9" db:"limitOffset" json:"limitOffset"`
	LimitNum             int32  `thrift:"limitNum,10" db:"limitNum" json:"limitNum"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,11" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewHsCashListRequestStruct() *HsCashListRequestStruct {
//   return &HsCashListRequestStruct{}
// }

func (p *HsCashListRequestStruct) GetStartTime() int32 {
	return p.StartTime
}

func (p *HsCashListRequestStruct) GetEndTime() int32 {
	return p.EndTime
}

func (p *HsCashListRequestStruct) GetUtype() int32 {
	return p.Utype
}

func (p *HsCashListRequestStruct) GetType() int32 {
	return p.Type
}

func (p *HsCashListRequestStruct) GetKeywords() string {
	return p.Keywords
}

func (p *HsCashListRequestStruct) GetPayWay() int32 {
	return p.PayWay
}

func (p *HsCashListRequestStruct) GetStatus() int32 {
	return p.Status
}

func (p *HsCashListRequestStruct) GetIsExport() int32 {
	return p.IsExport
}

func (p *HsCashListRequestStruct) GetLimitOffset() int32 {
	return p.LimitOffset
}

func (p *HsCashListRequestStruct) GetLimitNum() int32 {
	return p.LimitNum
}

func (p *HsCashListRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *HsCashListRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HsCashListRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *HsCashListRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *HsCashListRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Utype = v
	}
	return nil
}

func (p *HsCashListRequestStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *HsCashListRequestStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Keywords = v
	}
	return nil
}

func (p *HsCashListRequestStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.PayWay = v
	}
	return nil
}

func (p *HsCashListRequestStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *HsCashListRequestStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.IsExport = v
	}
	return nil
}

func (p *HsCashListRequestStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.LimitOffset = v
	}
	return nil
}

func (p *HsCashListRequestStruct) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.LimitNum = v
	}
	return nil
}

func (p *HsCashListRequestStruct) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *HsCashListRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HsCashListRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HsCashListRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_time", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_time (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start_time: ", p), err)
	}
	return err
}

func (p *HsCashListRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end_time", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:end_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.end_time (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:end_time: ", p), err)
	}
	return err
}

func (p *HsCashListRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("utype", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:utype: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Utype)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.utype (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:utype: ", p), err)
	}
	return err
}

func (p *HsCashListRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err)
	}
	return err
}

func (p *HsCashListRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keywords", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:keywords: ", p), err)
	}
	if err := oprot.WriteString(string(p.Keywords)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.keywords (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:keywords: ", p), err)
	}
	return err
}

func (p *HsCashListRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pay_way", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pay_way: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PayWay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pay_way (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pay_way: ", p), err)
	}
	return err
}

func (p *HsCashListRequestStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err)
	}
	return err
}

func (p *HsCashListRequestStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_export", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:is_export: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsExport)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_export (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:is_export: ", p), err)
	}
	return err
}

func (p *HsCashListRequestStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limitOffset", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:limitOffset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitOffset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limitOffset (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:limitOffset: ", p), err)
	}
	return err
}

func (p *HsCashListRequestStruct) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limitNum", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:limitNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limitNum (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:limitNum: ", p), err)
	}
	return err
}

func (p *HsCashListRequestStruct) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *HsCashListRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HsCashListRequestStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserID
//  - OrderSn
//  - Money
//  - Credited
//  - Fee
//  - UseReturnMoney
//  - UseFreeNum
//  - Addtime
//  - Status
//  - PayWay
//  - DealTime
//  - FailResult_
//  - Username
//  - Realname
//  - Regtime
type HsCashListResultStruct struct {
	ID             int32  `thrift:"id,1" db:"id" json:"id"`
	UserID         int32  `thrift:"user_id,2" db:"user_id" json:"user_id"`
	OrderSn        string `thrift:"order_sn,3" db:"order_sn" json:"order_sn"`
	Money          string `thrift:"money,4" db:"money" json:"money"`
	Credited       string `thrift:"credited,5" db:"credited" json:"credited"`
	Fee            string `thrift:"fee,6" db:"fee" json:"fee"`
	UseReturnMoney string `thrift:"use_return_money,7" db:"use_return_money" json:"use_return_money"`
	UseFreeNum     int32  `thrift:"use_free_num,8" db:"use_free_num" json:"use_free_num"`
	Addtime        int32  `thrift:"addtime,9" db:"addtime" json:"addtime"`
	Status         int32  `thrift:"status,10" db:"status" json:"status"`
	PayWay         int32  `thrift:"pay_way,11" db:"pay_way" json:"pay_way"`
	DealTime       int32  `thrift:"deal_time,12" db:"deal_time" json:"deal_time"`
	FailResult_    string `thrift:"fail_result,13" db:"fail_result" json:"fail_result"`
	Username       string `thrift:"username,14" db:"username" json:"username"`
	Realname       string `thrift:"realname,15" db:"realname" json:"realname"`
	Regtime        int32  `thrift:"regtime,16" db:"regtime" json:"regtime"`
}

func NewHsCashListResultStruct() *HsCashListResultStruct {
	return &HsCashListResultStruct{}
}

func (p *HsCashListResultStruct) GetID() int32 {
	return p.ID
}

func (p *HsCashListResultStruct) GetUserID() int32 {
	return p.UserID
}

func (p *HsCashListResultStruct) GetOrderSn() string {
	return p.OrderSn
}

func (p *HsCashListResultStruct) GetMoney() string {
	return p.Money
}

func (p *HsCashListResultStruct) GetCredited() string {
	return p.Credited
}

func (p *HsCashListResultStruct) GetFee() string {
	return p.Fee
}

func (p *HsCashListResultStruct) GetUseReturnMoney() string {
	return p.UseReturnMoney
}

func (p *HsCashListResultStruct) GetUseFreeNum() int32 {
	return p.UseFreeNum
}

func (p *HsCashListResultStruct) GetAddtime() int32 {
	return p.Addtime
}

func (p *HsCashListResultStruct) GetStatus() int32 {
	return p.Status
}

func (p *HsCashListResultStruct) GetPayWay() int32 {
	return p.PayWay
}

func (p *HsCashListResultStruct) GetDealTime() int32 {
	return p.DealTime
}

func (p *HsCashListResultStruct) GetFailResult_() string {
	return p.FailResult_
}

func (p *HsCashListResultStruct) GetUsername() string {
	return p.Username
}

func (p *HsCashListResultStruct) GetRealname() string {
	return p.Realname
}

func (p *HsCashListResultStruct) GetRegtime() int32 {
	return p.Regtime
}
func (p *HsCashListResultStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.ReadField16(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HsCashListResultStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *HsCashListResultStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *HsCashListResultStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OrderSn = v
	}
	return nil
}

func (p *HsCashListResultStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Money = v
	}
	return nil
}

func (p *HsCashListResultStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Credited = v
	}
	return nil
}

func (p *HsCashListResultStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Fee = v
	}
	return nil
}

func (p *HsCashListResultStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.UseReturnMoney = v
	}
	return nil
}

func (p *HsCashListResultStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.UseFreeNum = v
	}
	return nil
}

func (p *HsCashListResultStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Addtime = v
	}
	return nil
}

func (p *HsCashListResultStruct) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *HsCashListResultStruct) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.PayWay = v
	}
	return nil
}

func (p *HsCashListResultStruct) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.DealTime = v
	}
	return nil
}

func (p *HsCashListResultStruct) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.FailResult_ = v
	}
	return nil
}

func (p *HsCashListResultStruct) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *HsCashListResultStruct) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Realname = v
	}
	return nil
}

func (p *HsCashListResultStruct) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.Regtime = v
	}
	return nil
}

func (p *HsCashListResultStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HsCashListResultStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HsCashListResultStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *HsCashListResultStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err)
	}
	return err
}

func (p *HsCashListResultStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("order_sn", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:order_sn: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrderSn)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.order_sn (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:order_sn: ", p), err)
	}
	return err
}

func (p *HsCashListResultStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("money", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:money: ", p), err)
	}
	if err := oprot.WriteString(string(p.Money)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.money (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:money: ", p), err)
	}
	return err
}

func (p *HsCashListResultStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("credited", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:credited: ", p), err)
	}
	if err := oprot.WriteString(string(p.Credited)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.credited (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:credited: ", p), err)
	}
	return err
}

func (p *HsCashListResultStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fee", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fee: ", p), err)
	}
	if err := oprot.WriteString(string(p.Fee)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fee (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fee: ", p), err)
	}
	return err
}

func (p *HsCashListResultStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("use_return_money", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:use_return_money: ", p), err)
	}
	if err := oprot.WriteString(string(p.UseReturnMoney)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.use_return_money (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:use_return_money: ", p), err)
	}
	return err
}

func (p *HsCashListResultStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("use_free_num", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:use_free_num: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UseFreeNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.use_free_num (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:use_free_num: ", p), err)
	}
	return err
}

func (p *HsCashListResultStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addtime", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:addtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Addtime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addtime (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:addtime: ", p), err)
	}
	return err
}

func (p *HsCashListResultStruct) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:status: ", p), err)
	}
	return err
}

func (p *HsCashListResultStruct) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pay_way", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:pay_way: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PayWay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pay_way (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:pay_way: ", p), err)
	}
	return err
}

func (p *HsCashListResultStruct) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deal_time", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:deal_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DealTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deal_time (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:deal_time: ", p), err)
	}
	return err
}

func (p *HsCashListResultStruct) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fail_result", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:fail_result: ", p), err)
	}
	if err := oprot.WriteString(string(p.FailResult_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.fail_result (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:fail_result: ", p), err)
	}
	return err
}

func (p *HsCashListResultStruct) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:username: ", p), err)
	}
	return err
}

func (p *HsCashListResultStruct) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("realname", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:realname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Realname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.realname (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:realname: ", p), err)
	}
	return err
}

func (p *HsCashListResultStruct) writeField16(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("regtime", thrift.I32, 16); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:regtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Regtime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.regtime (16) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 16:regtime: ", p), err)
	}
	return err
}

func (p *HsCashListResultStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HsCashListResultStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
//  - TotalNum
//  - HsCashList
type HsCashListResponseStruct struct {
	Status     int32                     `thrift:"status,1" db:"status" json:"status"`
	Msg        string                    `thrift:"msg,2" db:"msg" json:"msg"`
	TotalNum   int32                     `thrift:"total_num,3" db:"total_num" json:"total_num"`
	HsCashList []*HsCashListResultStruct `thrift:"HsCashList,4" db:"HsCashList" json:"HsCashList"`
}

func NewHsCashListResponseStruct() *HsCashListResponseStruct {
	return &HsCashListResponseStruct{}
}

func (p *HsCashListResponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *HsCashListResponseStruct) GetMsg() string {
	return p.Msg
}

func (p *HsCashListResponseStruct) GetTotalNum() int32 {
	return p.TotalNum
}

func (p *HsCashListResponseStruct) GetHsCashList() []*HsCashListResultStruct {
	return p.HsCashList
}
func (p *HsCashListResponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HsCashListResponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *HsCashListResponseStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *HsCashListResponseStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalNum = v
	}
	return nil
}

func (p *HsCashListResponseStruct) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*HsCashListResultStruct, 0, size)
	p.HsCashList = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &HsCashListResultStruct{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.HsCashList = append(p.HsCashList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HsCashListResponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HsCashListResponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HsCashListResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *HsCashListResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *HsCashListResponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_num", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total_num: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_num (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total_num: ", p), err)
	}
	return err
}

func (p *HsCashListResponseStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("HsCashList", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:HsCashList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HsCashList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.HsCashList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:HsCashList: ", p), err)
	}
	return err
}

func (p *HsCashListResponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HsCashListResponseStruct(%+v)", *p)
}

type HsCashListThriftService interface {
	// Parameters:
	//  - RequestObj
	GetHsCashList(requestObj *HsCashListRequestStruct) (r *HsCashListResponseStruct, err error)
}

type HsCashListThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewHsCashListThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HsCashListThriftServiceClient {
	return &HsCashListThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewHsCashListThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HsCashListThriftServiceClient {
	return &HsCashListThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RequestObj
func (p *HsCashListThriftServiceClient) GetHsCashList(requestObj *HsCashListRequestStruct) (r *HsCashListResponseStruct, err error) {
	if err = p.sendGetHsCashList(requestObj); err != nil {
		return
	}
	return p.recvGetHsCashList()
}

func (p *HsCashListThriftServiceClient) sendGetHsCashList(requestObj *HsCashListRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getHsCashList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := HsCashListThriftServiceGetHsCashListArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HsCashListThriftServiceClient) recvGetHsCashList() (value *HsCashListResponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getHsCashList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getHsCashList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getHsCashList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error2 error
		error2, err = error1.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error2
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getHsCashList failed: invalid message type")
		return
	}
	result := HsCashListThriftServiceGetHsCashListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type HsCashListThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      HsCashListThriftService
}

func (p *HsCashListThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *HsCashListThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *HsCashListThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewHsCashListThriftServiceProcessor(handler HsCashListThriftService) *HsCashListThriftServiceProcessor {

	self3 := &HsCashListThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self3.processorMap["getHsCashList"] = &hsCashListThriftServiceProcessorGetHsCashList{handler: handler}
	return self3
}

func (p *HsCashListThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x4

}

type hsCashListThriftServiceProcessorGetHsCashList struct {
	handler HsCashListThriftService
}

func (p *hsCashListThriftServiceProcessorGetHsCashList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HsCashListThriftServiceGetHsCashListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getHsCashList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HsCashListThriftServiceGetHsCashListResult{}
	var retval *HsCashListResponseStruct
	var err2 error
	if retval, err2 = p.handler.GetHsCashList(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getHsCashList: "+err2.Error())
		oprot.WriteMessageBegin("getHsCashList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getHsCashList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type HsCashListThriftServiceGetHsCashListArgs struct {
	RequestObj *HsCashListRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewHsCashListThriftServiceGetHsCashListArgs() *HsCashListThriftServiceGetHsCashListArgs {
	return &HsCashListThriftServiceGetHsCashListArgs{}
}

var HsCashListThriftServiceGetHsCashListArgs_RequestObj_DEFAULT *HsCashListRequestStruct

func (p *HsCashListThriftServiceGetHsCashListArgs) GetRequestObj() *HsCashListRequestStruct {
	if !p.IsSetRequestObj() {
		return HsCashListThriftServiceGetHsCashListArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *HsCashListThriftServiceGetHsCashListArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *HsCashListThriftServiceGetHsCashListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HsCashListThriftServiceGetHsCashListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &HsCashListRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *HsCashListThriftServiceGetHsCashListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getHsCashList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HsCashListThriftServiceGetHsCashListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *HsCashListThriftServiceGetHsCashListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HsCashListThriftServiceGetHsCashListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type HsCashListThriftServiceGetHsCashListResult struct {
	Success *HsCashListResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHsCashListThriftServiceGetHsCashListResult() *HsCashListThriftServiceGetHsCashListResult {
	return &HsCashListThriftServiceGetHsCashListResult{}
}

var HsCashListThriftServiceGetHsCashListResult_Success_DEFAULT *HsCashListResponseStruct

func (p *HsCashListThriftServiceGetHsCashListResult) GetSuccess() *HsCashListResponseStruct {
	if !p.IsSetSuccess() {
		return HsCashListThriftServiceGetHsCashListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HsCashListThriftServiceGetHsCashListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HsCashListThriftServiceGetHsCashListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HsCashListThriftServiceGetHsCashListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &HsCashListResponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *HsCashListThriftServiceGetHsCashListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getHsCashList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HsCashListThriftServiceGetHsCashListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HsCashListThriftServiceGetHsCashListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HsCashListThriftServiceGetHsCashListResult(%+v)", *p)
}
