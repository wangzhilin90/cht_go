// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package gettendercouponthriftservice

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - UserId
//  - TenderId
//  - CouponId
//  - TenderMoney
//  - TimeLimit
//  - ChengHuiTongTraceLog
type TenderCouponRequestStruct struct {
  UserId int32 `thrift:"userId,1" db:"userId" json:"userId"`
  TenderId int32 `thrift:"tenderId,2" db:"tenderId" json:"tenderId"`
  CouponId int32 `thrift:"couponId,3" db:"couponId" json:"couponId"`
  TenderMoney string `thrift:"tenderMoney,4" db:"tenderMoney" json:"tenderMoney"`
  TimeLimit int32 `thrift:"timeLimit,5" db:"timeLimit" json:"timeLimit"`
  ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,6" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

func NewTenderCouponRequestStruct() *TenderCouponRequestStruct {
  return &TenderCouponRequestStruct{}
}


func (p *TenderCouponRequestStruct) GetUserId() int32 {
  return p.UserId
}

func (p *TenderCouponRequestStruct) GetTenderId() int32 {
  return p.TenderId
}

func (p *TenderCouponRequestStruct) GetCouponId() int32 {
  return p.CouponId
}

func (p *TenderCouponRequestStruct) GetTenderMoney() string {
  return p.TenderMoney
}

func (p *TenderCouponRequestStruct) GetTimeLimit() int32 {
  return p.TimeLimit
}

func (p *TenderCouponRequestStruct) GetChengHuiTongTraceLog() string {
  return p.ChengHuiTongTraceLog
}
func (p *TenderCouponRequestStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TenderCouponRequestStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserId = v
}
  return nil
}

func (p *TenderCouponRequestStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TenderId = v
}
  return nil
}

func (p *TenderCouponRequestStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CouponId = v
}
  return nil
}

func (p *TenderCouponRequestStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TenderMoney = v
}
  return nil
}

func (p *TenderCouponRequestStruct)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TimeLimit = v
}
  return nil
}

func (p *TenderCouponRequestStruct)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ChengHuiTongTraceLog = v
}
  return nil
}

func (p *TenderCouponRequestStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TenderCouponRequestStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TenderCouponRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userId: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userId: ", p), err) }
  return err
}

func (p *TenderCouponRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tenderId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tenderId: ", p), err) }
  if err := oprot.WriteI32(int32(p.TenderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenderId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tenderId: ", p), err) }
  return err
}

func (p *TenderCouponRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("couponId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:couponId: ", p), err) }
  if err := oprot.WriteI32(int32(p.CouponId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.couponId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:couponId: ", p), err) }
  return err
}

func (p *TenderCouponRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tenderMoney", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tenderMoney: ", p), err) }
  if err := oprot.WriteString(string(p.TenderMoney)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenderMoney (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tenderMoney: ", p), err) }
  return err
}

func (p *TenderCouponRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timeLimit", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:timeLimit: ", p), err) }
  if err := oprot.WriteI32(int32(p.TimeLimit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timeLimit (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:timeLimit: ", p), err) }
  return err
}

func (p *TenderCouponRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:chengHuiTongTraceLog: ", p), err) }
  if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:chengHuiTongTraceLog: ", p), err) }
  return err
}

func (p *TenderCouponRequestStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TenderCouponRequestStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Coupon
//  - Msg
type TenderCouponResponseStruct struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Coupon string `thrift:"coupon,2" db:"coupon" json:"coupon"`
  Msg string `thrift:"msg,3" db:"msg" json:"msg"`
}

func NewTenderCouponResponseStruct() *TenderCouponResponseStruct {
  return &TenderCouponResponseStruct{}
}


func (p *TenderCouponResponseStruct) GetStatus() int32 {
  return p.Status
}

func (p *TenderCouponResponseStruct) GetCoupon() string {
  return p.Coupon
}

func (p *TenderCouponResponseStruct) GetMsg() string {
  return p.Msg
}
func (p *TenderCouponResponseStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TenderCouponResponseStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TenderCouponResponseStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Coupon = v
}
  return nil
}

func (p *TenderCouponResponseStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *TenderCouponResponseStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TenderCouponResponseStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TenderCouponResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *TenderCouponResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("coupon", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:coupon: ", p), err) }
  if err := oprot.WriteString(string(p.Coupon)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.coupon (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:coupon: ", p), err) }
  return err
}

func (p *TenderCouponResponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:msg: ", p), err) }
  return err
}

func (p *TenderCouponResponseStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TenderCouponResponseStruct(%+v)", *p)
}

type GetTenderCouponThriftService interface {
  // Parameters:
  //  - RequestObj
  GetCouponInfo(requestObj *TenderCouponRequestStruct) (r *TenderCouponResponseStruct, err error)
}

type GetTenderCouponThriftServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewGetTenderCouponThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *GetTenderCouponThriftServiceClient {
  return &GetTenderCouponThriftServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewGetTenderCouponThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *GetTenderCouponThriftServiceClient {
  return &GetTenderCouponThriftServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - RequestObj
func (p *GetTenderCouponThriftServiceClient) GetCouponInfo(requestObj *TenderCouponRequestStruct) (r *TenderCouponResponseStruct, err error) {
  if err = p.sendGetCouponInfo(requestObj); err != nil { return }
  return p.recvGetCouponInfo()
}

func (p *GetTenderCouponThriftServiceClient) sendGetCouponInfo(requestObj *TenderCouponRequestStruct)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getCouponInfo", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := GetTenderCouponThriftServiceGetCouponInfoArgs{
  RequestObj : requestObj,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *GetTenderCouponThriftServiceClient) recvGetCouponInfo() (value *TenderCouponResponseStruct, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getCouponInfo" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getCouponInfo failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getCouponInfo failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getCouponInfo failed: invalid message type")
    return
  }
  result := GetTenderCouponThriftServiceGetCouponInfoResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type GetTenderCouponThriftServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler GetTenderCouponThriftService
}

func (p *GetTenderCouponThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *GetTenderCouponThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *GetTenderCouponThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewGetTenderCouponThriftServiceProcessor(handler GetTenderCouponThriftService) *GetTenderCouponThriftServiceProcessor {

  self2 := &GetTenderCouponThriftServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["getCouponInfo"] = &getTenderCouponThriftServiceProcessorGetCouponInfo{handler:handler}
return self2
}

func (p *GetTenderCouponThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x3

}

type getTenderCouponThriftServiceProcessorGetCouponInfo struct {
  handler GetTenderCouponThriftService
}

func (p *getTenderCouponThriftServiceProcessorGetCouponInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := GetTenderCouponThriftServiceGetCouponInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCouponInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := GetTenderCouponThriftServiceGetCouponInfoResult{}
var retval *TenderCouponResponseStruct
  var err2 error
  if retval, err2 = p.handler.GetCouponInfo(args.RequestObj); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCouponInfo: " + err2.Error())
    oprot.WriteMessageBegin("getCouponInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCouponInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type GetTenderCouponThriftServiceGetCouponInfoArgs struct {
  RequestObj *TenderCouponRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewGetTenderCouponThriftServiceGetCouponInfoArgs() *GetTenderCouponThriftServiceGetCouponInfoArgs {
  return &GetTenderCouponThriftServiceGetCouponInfoArgs{}
}

var GetTenderCouponThriftServiceGetCouponInfoArgs_RequestObj_DEFAULT *TenderCouponRequestStruct
func (p *GetTenderCouponThriftServiceGetCouponInfoArgs) GetRequestObj() *TenderCouponRequestStruct {
  if !p.IsSetRequestObj() {
    return GetTenderCouponThriftServiceGetCouponInfoArgs_RequestObj_DEFAULT
  }
return p.RequestObj
}
func (p *GetTenderCouponThriftServiceGetCouponInfoArgs) IsSetRequestObj() bool {
  return p.RequestObj != nil
}

func (p *GetTenderCouponThriftServiceGetCouponInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetTenderCouponThriftServiceGetCouponInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestObj = &TenderCouponRequestStruct{}
  if err := p.RequestObj.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
  }
  return nil
}

func (p *GetTenderCouponThriftServiceGetCouponInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCouponInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTenderCouponThriftServiceGetCouponInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err) }
  if err := p.RequestObj.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err) }
  return err
}

func (p *GetTenderCouponThriftServiceGetCouponInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTenderCouponThriftServiceGetCouponInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GetTenderCouponThriftServiceGetCouponInfoResult struct {
  Success *TenderCouponResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGetTenderCouponThriftServiceGetCouponInfoResult() *GetTenderCouponThriftServiceGetCouponInfoResult {
  return &GetTenderCouponThriftServiceGetCouponInfoResult{}
}

var GetTenderCouponThriftServiceGetCouponInfoResult_Success_DEFAULT *TenderCouponResponseStruct
func (p *GetTenderCouponThriftServiceGetCouponInfoResult) GetSuccess() *TenderCouponResponseStruct {
  if !p.IsSetSuccess() {
    return GetTenderCouponThriftServiceGetCouponInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *GetTenderCouponThriftServiceGetCouponInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *GetTenderCouponThriftServiceGetCouponInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetTenderCouponThriftServiceGetCouponInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TenderCouponResponseStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *GetTenderCouponThriftServiceGetCouponInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCouponInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetTenderCouponThriftServiceGetCouponInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *GetTenderCouponThriftServiceGetCouponInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetTenderCouponThriftServiceGetCouponInfoResult(%+v)", *p)
}


