// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package loguserloginservice

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - UserID
//  - LoginIP
//  - LoginStyle
//  - ChengHuiTongTraceLog
type LogUserlLoginRequestStruct struct {
  UserID int32 `thrift:"user_id,1" db:"user_id" json:"user_id"`
  LoginIP string `thrift:"login_ip,2" db:"login_ip" json:"login_ip"`
  LoginStyle int32 `thrift:"login_style,3" db:"login_style" json:"login_style"`
  ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,4" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

func NewLogUserlLoginRequestStruct() *LogUserlLoginRequestStruct {
  return &LogUserlLoginRequestStruct{}
}


func (p *LogUserlLoginRequestStruct) GetUserID() int32 {
  return p.UserID
}

func (p *LogUserlLoginRequestStruct) GetLoginIP() string {
  return p.LoginIP
}

func (p *LogUserlLoginRequestStruct) GetLoginStyle() int32 {
  return p.LoginStyle
}

func (p *LogUserlLoginRequestStruct) GetChengHuiTongTraceLog() string {
  return p.ChengHuiTongTraceLog
}
func (p *LogUserlLoginRequestStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LogUserlLoginRequestStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *LogUserlLoginRequestStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LoginIP = v
}
  return nil
}

func (p *LogUserlLoginRequestStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LoginStyle = v
}
  return nil
}

func (p *LogUserlLoginRequestStruct)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ChengHuiTongTraceLog = v
}
  return nil
}

func (p *LogUserlLoginRequestStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LogUserlLoginRequestStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LogUserlLoginRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *LogUserlLoginRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("login_ip", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:login_ip: ", p), err) }
  if err := oprot.WriteString(string(p.LoginIP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.login_ip (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:login_ip: ", p), err) }
  return err
}

func (p *LogUserlLoginRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("login_style", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:login_style: ", p), err) }
  if err := oprot.WriteI32(int32(p.LoginStyle)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.login_style (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:login_style: ", p), err) }
  return err
}

func (p *LogUserlLoginRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:chengHuiTongTraceLog: ", p), err) }
  if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:chengHuiTongTraceLog: ", p), err) }
  return err
}

func (p *LogUserlLoginRequestStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogUserlLoginRequestStruct(%+v)", *p)
}

// Attributes:
//  - UserID
type LogUserLoginResponseStruct struct {
  UserID int32 `thrift:"user_id,1" db:"user_id" json:"user_id"`
}

func NewLogUserLoginResponseStruct() *LogUserLoginResponseStruct {
  return &LogUserLoginResponseStruct{}
}


func (p *LogUserLoginResponseStruct) GetUserID() int32 {
  return p.UserID
}
func (p *LogUserLoginResponseStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LogUserLoginResponseStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserID = v
}
  return nil
}

func (p *LogUserLoginResponseStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LogUserLoginResponseStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LogUserLoginResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.UserID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_id: ", p), err) }
  return err
}

func (p *LogUserLoginResponseStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogUserLoginResponseStruct(%+v)", *p)
}

type LogUserLoginThriftService interface {
  // Parameters:
  //  - RequestObj
  UpdateLogUserlLogin(requestObj *LogUserlLoginRequestStruct) (r *LogUserLoginResponseStruct, err error)
}

type LogUserLoginThriftServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewLogUserLoginThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LogUserLoginThriftServiceClient {
  return &LogUserLoginThriftServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewLogUserLoginThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LogUserLoginThriftServiceClient {
  return &LogUserLoginThriftServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - RequestObj
func (p *LogUserLoginThriftServiceClient) UpdateLogUserlLogin(requestObj *LogUserlLoginRequestStruct) (r *LogUserLoginResponseStruct, err error) {
  if err = p.sendUpdateLogUserlLogin(requestObj); err != nil { return }
  return p.recvUpdateLogUserlLogin()
}

func (p *LogUserLoginThriftServiceClient) sendUpdateLogUserlLogin(requestObj *LogUserlLoginRequestStruct)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("updateLogUserlLogin", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := LogUserLoginThriftServiceUpdateLogUserlLoginArgs{
  RequestObj : requestObj,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *LogUserLoginThriftServiceClient) recvUpdateLogUserlLogin() (value *LogUserLoginResponseStruct, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "updateLogUserlLogin" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateLogUserlLogin failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateLogUserlLogin failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateLogUserlLogin failed: invalid message type")
    return
  }
  result := LogUserLoginThriftServiceUpdateLogUserlLoginResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type LogUserLoginThriftServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler LogUserLoginThriftService
}

func (p *LogUserLoginThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *LogUserLoginThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *LogUserLoginThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewLogUserLoginThriftServiceProcessor(handler LogUserLoginThriftService) *LogUserLoginThriftServiceProcessor {

  self2 := &LogUserLoginThriftServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self2.processorMap["updateLogUserlLogin"] = &logUserLoginThriftServiceProcessorUpdateLogUserlLogin{handler:handler}
return self2
}

func (p *LogUserLoginThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x3.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x3

}

type logUserLoginThriftServiceProcessorUpdateLogUserlLogin struct {
  handler LogUserLoginThriftService
}

func (p *logUserLoginThriftServiceProcessorUpdateLogUserlLogin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := LogUserLoginThriftServiceUpdateLogUserlLoginArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateLogUserlLogin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := LogUserLoginThriftServiceUpdateLogUserlLoginResult{}
var retval *LogUserLoginResponseStruct
  var err2 error
  if retval, err2 = p.handler.UpdateLogUserlLogin(args.RequestObj); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateLogUserlLogin: " + err2.Error())
    oprot.WriteMessageBegin("updateLogUserlLogin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateLogUserlLogin", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type LogUserLoginThriftServiceUpdateLogUserlLoginArgs struct {
  RequestObj *LogUserlLoginRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewLogUserLoginThriftServiceUpdateLogUserlLoginArgs() *LogUserLoginThriftServiceUpdateLogUserlLoginArgs {
  return &LogUserLoginThriftServiceUpdateLogUserlLoginArgs{}
}

var LogUserLoginThriftServiceUpdateLogUserlLoginArgs_RequestObj_DEFAULT *LogUserlLoginRequestStruct
func (p *LogUserLoginThriftServiceUpdateLogUserlLoginArgs) GetRequestObj() *LogUserlLoginRequestStruct {
  if !p.IsSetRequestObj() {
    return LogUserLoginThriftServiceUpdateLogUserlLoginArgs_RequestObj_DEFAULT
  }
return p.RequestObj
}
func (p *LogUserLoginThriftServiceUpdateLogUserlLoginArgs) IsSetRequestObj() bool {
  return p.RequestObj != nil
}

func (p *LogUserLoginThriftServiceUpdateLogUserlLoginArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LogUserLoginThriftServiceUpdateLogUserlLoginArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.RequestObj = &LogUserlLoginRequestStruct{}
  if err := p.RequestObj.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
  }
  return nil
}

func (p *LogUserLoginThriftServiceUpdateLogUserlLoginArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateLogUserlLogin_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LogUserLoginThriftServiceUpdateLogUserlLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err) }
  if err := p.RequestObj.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err) }
  return err
}

func (p *LogUserLoginThriftServiceUpdateLogUserlLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogUserLoginThriftServiceUpdateLogUserlLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
type LogUserLoginThriftServiceUpdateLogUserlLoginResult struct {
  Success *LogUserLoginResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewLogUserLoginThriftServiceUpdateLogUserlLoginResult() *LogUserLoginThriftServiceUpdateLogUserlLoginResult {
  return &LogUserLoginThriftServiceUpdateLogUserlLoginResult{}
}

var LogUserLoginThriftServiceUpdateLogUserlLoginResult_Success_DEFAULT *LogUserLoginResponseStruct
func (p *LogUserLoginThriftServiceUpdateLogUserlLoginResult) GetSuccess() *LogUserLoginResponseStruct {
  if !p.IsSetSuccess() {
    return LogUserLoginThriftServiceUpdateLogUserlLoginResult_Success_DEFAULT
  }
return p.Success
}
func (p *LogUserLoginThriftServiceUpdateLogUserlLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *LogUserLoginThriftServiceUpdateLogUserlLoginResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LogUserLoginThriftServiceUpdateLogUserlLoginResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &LogUserLoginResponseStruct{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *LogUserLoginThriftServiceUpdateLogUserlLoginResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateLogUserlLogin_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LogUserLoginThriftServiceUpdateLogUserlLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *LogUserLoginThriftServiceUpdateLogUserlLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogUserLoginThriftServiceUpdateLogUserlLoginResult(%+v)", *p)
}


