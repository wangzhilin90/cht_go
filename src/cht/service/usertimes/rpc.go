// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package usertimes

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - Username
//  - Isadmin
//  - ChengHuiTongTraceLog
type UserTimesDetailsRequestStruct struct {
	Username             string `thrift:"username,1" db:"username" json:"username"`
	Isadmin              int32  `thrift:"isadmin,2" db:"isadmin" json:"isadmin"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,3" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewUserTimesDetailsRequestStruct() *UserTimesDetailsRequestStruct {
//   return &UserTimesDetailsRequestStruct{}
// }

func (p *UserTimesDetailsRequestStruct) GetUsername() string {
	return p.Username
}

func (p *UserTimesDetailsRequestStruct) GetIsadmin() int32 {
	return p.Isadmin
}

func (p *UserTimesDetailsRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *UserTimesDetailsRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserTimesDetailsRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *UserTimesDetailsRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Isadmin = v
	}
	return nil
}

func (p *UserTimesDetailsRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *UserTimesDetailsRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserTimesDetailsRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserTimesDetailsRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err)
	}
	return err
}

func (p *UserTimesDetailsRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isadmin", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:isadmin: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Isadmin)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isadmin (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:isadmin: ", p), err)
	}
	return err
}

func (p *UserTimesDetailsRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *UserTimesDetailsRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserTimesDetailsRequestStruct(%+v)", *p)
}

// Attributes:
//  - Username
//  - IP
//  - Logintime
//  - Times
//  - Isadmin
type UserTimesDetailsStruct struct {
	Username  string `thrift:"username,1" db:"username" json:"username"`
	IP        string `thrift:"ip,2" db:"ip" json:"ip"`
	Logintime int32  `thrift:"logintime,3" db:"logintime" json:"logintime"`
	Times     int32  `thrift:"times,4" db:"times" json:"times"`
	Isadmin   int32  `thrift:"isadmin,5" db:"isadmin" json:"isadmin"`
}

func NewUserTimesDetailsStruct() *UserTimesDetailsStruct {
	return &UserTimesDetailsStruct{}
}

func (p *UserTimesDetailsStruct) GetUsername() string {
	return p.Username
}

func (p *UserTimesDetailsStruct) GetIP() string {
	return p.IP
}

func (p *UserTimesDetailsStruct) GetLogintime() int32 {
	return p.Logintime
}

func (p *UserTimesDetailsStruct) GetTimes() int32 {
	return p.Times
}

func (p *UserTimesDetailsStruct) GetIsadmin() int32 {
	return p.Isadmin
}
func (p *UserTimesDetailsStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserTimesDetailsStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *UserTimesDetailsStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *UserTimesDetailsStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Logintime = v
	}
	return nil
}

func (p *UserTimesDetailsStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Times = v
	}
	return nil
}

func (p *UserTimesDetailsStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Isadmin = v
	}
	return nil
}

func (p *UserTimesDetailsStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserTimesDetailsStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserTimesDetailsStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err)
	}
	return err
}

func (p *UserTimesDetailsStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err)
	}
	return err
}

func (p *UserTimesDetailsStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("logintime", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:logintime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Logintime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.logintime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:logintime: ", p), err)
	}
	return err
}

func (p *UserTimesDetailsStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("times", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:times: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Times)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.times (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:times: ", p), err)
	}
	return err
}

func (p *UserTimesDetailsStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isadmin", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:isadmin: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Isadmin)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isadmin (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:isadmin: ", p), err)
	}
	return err
}

func (p *UserTimesDetailsStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserTimesDetailsStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - UserTimesDetails
//  - Msg
type UserTimesDetailsResponseStruct struct {
	Status           int32                   `thrift:"status,1" db:"status" json:"status"`
	UserTimesDetails *UserTimesDetailsStruct `thrift:"UserTimesDetails,2" db:"UserTimesDetails" json:"UserTimesDetails"`
	Msg              string                  `thrift:"msg,3" db:"msg" json:"msg"`
}

func NewUserTimesDetailsResponseStruct() *UserTimesDetailsResponseStruct {
	return &UserTimesDetailsResponseStruct{}
}

func (p *UserTimesDetailsResponseStruct) GetStatus() int32 {
	return p.Status
}

var UserTimesDetailsResponseStruct_UserTimesDetails_DEFAULT *UserTimesDetailsStruct

func (p *UserTimesDetailsResponseStruct) GetUserTimesDetails() *UserTimesDetailsStruct {
	if !p.IsSetUserTimesDetails() {
		return UserTimesDetailsResponseStruct_UserTimesDetails_DEFAULT
	}
	return p.UserTimesDetails
}

func (p *UserTimesDetailsResponseStruct) GetMsg() string {
	return p.Msg
}
func (p *UserTimesDetailsResponseStruct) IsSetUserTimesDetails() bool {
	return p.UserTimesDetails != nil
}

func (p *UserTimesDetailsResponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserTimesDetailsResponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *UserTimesDetailsResponseStruct) ReadField2(iprot thrift.TProtocol) error {
	p.UserTimesDetails = &UserTimesDetailsStruct{}
	if err := p.UserTimesDetails.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserTimesDetails), err)
	}
	return nil
}

func (p *UserTimesDetailsResponseStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *UserTimesDetailsResponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserTimesDetailsResponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserTimesDetailsResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *UserTimesDetailsResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("UserTimesDetails", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:UserTimesDetails: ", p), err)
	}
	if err := p.UserTimesDetails.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserTimesDetails), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:UserTimesDetails: ", p), err)
	}
	return err
}

func (p *UserTimesDetailsResponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:msg: ", p), err)
	}
	return err
}

func (p *UserTimesDetailsResponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserTimesDetailsResponseStruct(%+v)", *p)
}

// Attributes:
//  - Username
//  - IP
//  - Logintime
//  - Times
//  - Isadmin
//  - ChengHuiTongTraceLog
type UserTimesUpdateRequestStruct struct {
	Username             string `thrift:"username,1" db:"username" json:"username"`
	IP                   string `thrift:"ip,2" db:"ip" json:"ip"`
	Logintime            int32  `thrift:"logintime,3" db:"logintime" json:"logintime"`
	Times                int32  `thrift:"times,4" db:"times" json:"times"`
	Isadmin              int32  `thrift:"isadmin,5" db:"isadmin" json:"isadmin"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,6" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewUserTimesUpdateRequestStruct() *UserTimesUpdateRequestStruct {
//   return &UserTimesUpdateRequestStruct{}
// }

func (p *UserTimesUpdateRequestStruct) GetUsername() string {
	return p.Username
}

func (p *UserTimesUpdateRequestStruct) GetIP() string {
	return p.IP
}

func (p *UserTimesUpdateRequestStruct) GetLogintime() int32 {
	return p.Logintime
}

func (p *UserTimesUpdateRequestStruct) GetTimes() int32 {
	return p.Times
}

func (p *UserTimesUpdateRequestStruct) GetIsadmin() int32 {
	return p.Isadmin
}

func (p *UserTimesUpdateRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *UserTimesUpdateRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserTimesUpdateRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *UserTimesUpdateRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *UserTimesUpdateRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Logintime = v
	}
	return nil
}

func (p *UserTimesUpdateRequestStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Times = v
	}
	return nil
}

func (p *UserTimesUpdateRequestStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Isadmin = v
	}
	return nil
}

func (p *UserTimesUpdateRequestStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *UserTimesUpdateRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserTimesUpdateRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserTimesUpdateRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err)
	}
	return err
}

func (p *UserTimesUpdateRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err)
	}
	return err
}

func (p *UserTimesUpdateRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("logintime", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:logintime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Logintime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.logintime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:logintime: ", p), err)
	}
	return err
}

func (p *UserTimesUpdateRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("times", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:times: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Times)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.times (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:times: ", p), err)
	}
	return err
}

func (p *UserTimesUpdateRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isadmin", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:isadmin: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Isadmin)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isadmin (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:isadmin: ", p), err)
	}
	return err
}

func (p *UserTimesUpdateRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *UserTimesUpdateRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserTimesUpdateRequestStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
type UserTimesUpdateResponseStruct struct {
	Status int32  `thrift:"status,1" db:"status" json:"status"`
	Msg    string `thrift:"msg,2" db:"msg" json:"msg"`
}

func NewUserTimesUpdateResponseStruct() *UserTimesUpdateResponseStruct {
	return &UserTimesUpdateResponseStruct{}
}

func (p *UserTimesUpdateResponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *UserTimesUpdateResponseStruct) GetMsg() string {
	return p.Msg
}
func (p *UserTimesUpdateResponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserTimesUpdateResponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *UserTimesUpdateResponseStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *UserTimesUpdateResponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserTimesUpdateResponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserTimesUpdateResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *UserTimesUpdateResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *UserTimesUpdateResponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserTimesUpdateResponseStruct(%+v)", *p)
}

// Attributes:
//  - Username
//  - IP
//  - Logintime
//  - Times
//  - Isadmin
//  - ChengHuiTongTraceLog
type UserTimesInsertRequestStruct struct {
	Username             string `thrift:"username,1" db:"username" json:"username"`
	IP                   string `thrift:"ip,2" db:"ip" json:"ip"`
	Logintime            int32  `thrift:"logintime,3" db:"logintime" json:"logintime"`
	Times                int32  `thrift:"times,4" db:"times" json:"times"`
	Isadmin              int32  `thrift:"isadmin,5" db:"isadmin" json:"isadmin"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,6" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewUserTimesInsertRequestStruct() *UserTimesInsertRequestStruct {
//   return &UserTimesInsertRequestStruct{}
// }

func (p *UserTimesInsertRequestStruct) GetUsername() string {
	return p.Username
}

func (p *UserTimesInsertRequestStruct) GetIP() string {
	return p.IP
}

func (p *UserTimesInsertRequestStruct) GetLogintime() int32 {
	return p.Logintime
}

func (p *UserTimesInsertRequestStruct) GetTimes() int32 {
	return p.Times
}

func (p *UserTimesInsertRequestStruct) GetIsadmin() int32 {
	return p.Isadmin
}

func (p *UserTimesInsertRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *UserTimesInsertRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserTimesInsertRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *UserTimesInsertRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *UserTimesInsertRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Logintime = v
	}
	return nil
}

func (p *UserTimesInsertRequestStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Times = v
	}
	return nil
}

func (p *UserTimesInsertRequestStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Isadmin = v
	}
	return nil
}

func (p *UserTimesInsertRequestStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *UserTimesInsertRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserTimesInsertRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserTimesInsertRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:username: ", p), err)
	}
	return err
}

func (p *UserTimesInsertRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err)
	}
	return err
}

func (p *UserTimesInsertRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("logintime", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:logintime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Logintime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.logintime (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:logintime: ", p), err)
	}
	return err
}

func (p *UserTimesInsertRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("times", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:times: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Times)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.times (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:times: ", p), err)
	}
	return err
}

func (p *UserTimesInsertRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isadmin", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:isadmin: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Isadmin)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.isadmin (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:isadmin: ", p), err)
	}
	return err
}

func (p *UserTimesInsertRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *UserTimesInsertRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserTimesInsertRequestStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
type UserTimesInsertResponseStruct struct {
	Status int32  `thrift:"status,1" db:"status" json:"status"`
	Msg    string `thrift:"msg,2" db:"msg" json:"msg"`
}

func NewUserTimesInsertResponseStruct() *UserTimesInsertResponseStruct {
	return &UserTimesInsertResponseStruct{}
}

func (p *UserTimesInsertResponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *UserTimesInsertResponseStruct) GetMsg() string {
	return p.Msg
}
func (p *UserTimesInsertResponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserTimesInsertResponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *UserTimesInsertResponseStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *UserTimesInsertResponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserTimesInsertResponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserTimesInsertResponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *UserTimesInsertResponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *UserTimesInsertResponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserTimesInsertResponseStruct(%+v)", *p)
}

type UserTimesThriftService interface {
	// Parameters:
	//  - RequestObj
	GetUserTimesDetails(requestObj *UserTimesDetailsRequestStruct) (r *UserTimesDetailsResponseStruct, err error)
	// Parameters:
	//  - RequestObj
	UpdateUserTimes(requestObj *UserTimesUpdateRequestStruct) (r *UserTimesUpdateResponseStruct, err error)
	// Parameters:
	//  - RequestObj
	InsertUserTimes(requestObj *UserTimesInsertRequestStruct) (r *UserTimesInsertResponseStruct, err error)
}

type UserTimesThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewUserTimesThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *UserTimesThriftServiceClient {
	return &UserTimesThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewUserTimesThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *UserTimesThriftServiceClient {
	return &UserTimesThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RequestObj
func (p *UserTimesThriftServiceClient) GetUserTimesDetails(requestObj *UserTimesDetailsRequestStruct) (r *UserTimesDetailsResponseStruct, err error) {
	if err = p.sendGetUserTimesDetails(requestObj); err != nil {
		return
	}
	return p.recvGetUserTimesDetails()
}

func (p *UserTimesThriftServiceClient) sendGetUserTimesDetails(requestObj *UserTimesDetailsRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserTimesDetails", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserTimesThriftServiceGetUserTimesDetailsArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserTimesThriftServiceClient) recvGetUserTimesDetails() (value *UserTimesDetailsResponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserTimesDetails" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserTimesDetails failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserTimesDetails failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserTimesDetails failed: invalid message type")
		return
	}
	result := UserTimesThriftServiceGetUserTimesDetailsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RequestObj
func (p *UserTimesThriftServiceClient) UpdateUserTimes(requestObj *UserTimesUpdateRequestStruct) (r *UserTimesUpdateResponseStruct, err error) {
	if err = p.sendUpdateUserTimes(requestObj); err != nil {
		return
	}
	return p.recvUpdateUserTimes()
}

func (p *UserTimesThriftServiceClient) sendUpdateUserTimes(requestObj *UserTimesUpdateRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateUserTimes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserTimesThriftServiceUpdateUserTimesArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserTimesThriftServiceClient) recvUpdateUserTimes() (value *UserTimesUpdateResponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateUserTimes" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateUserTimes failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateUserTimes failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateUserTimes failed: invalid message type")
		return
	}
	result := UserTimesThriftServiceUpdateUserTimesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - RequestObj
func (p *UserTimesThriftServiceClient) InsertUserTimes(requestObj *UserTimesInsertRequestStruct) (r *UserTimesInsertResponseStruct, err error) {
	if err = p.sendInsertUserTimes(requestObj); err != nil {
		return
	}
	return p.recvInsertUserTimes()
}

func (p *UserTimesThriftServiceClient) sendInsertUserTimes(requestObj *UserTimesInsertRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("insertUserTimes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UserTimesThriftServiceInsertUserTimesArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *UserTimesThriftServiceClient) recvInsertUserTimes() (value *UserTimesInsertResponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "insertUserTimes" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "insertUserTimes failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "insertUserTimes failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "insertUserTimes failed: invalid message type")
		return
	}
	result := UserTimesThriftServiceInsertUserTimesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type UserTimesThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      UserTimesThriftService
}

func (p *UserTimesThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *UserTimesThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *UserTimesThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewUserTimesThriftServiceProcessor(handler UserTimesThriftService) *UserTimesThriftServiceProcessor {

	self6 := &UserTimesThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self6.processorMap["getUserTimesDetails"] = &userTimesThriftServiceProcessorGetUserTimesDetails{handler: handler}
	self6.processorMap["updateUserTimes"] = &userTimesThriftServiceProcessorUpdateUserTimes{handler: handler}
	self6.processorMap["insertUserTimes"] = &userTimesThriftServiceProcessorInsertUserTimes{handler: handler}
	return self6
}

func (p *UserTimesThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x7.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x7

}

type userTimesThriftServiceProcessorGetUserTimesDetails struct {
	handler UserTimesThriftService
}

func (p *userTimesThriftServiceProcessorGetUserTimesDetails) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserTimesThriftServiceGetUserTimesDetailsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserTimesDetails", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserTimesThriftServiceGetUserTimesDetailsResult{}
	var retval *UserTimesDetailsResponseStruct
	var err2 error
	if retval, err2 = p.handler.GetUserTimesDetails(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserTimesDetails: "+err2.Error())
		oprot.WriteMessageBegin("getUserTimesDetails", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getUserTimesDetails", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userTimesThriftServiceProcessorUpdateUserTimes struct {
	handler UserTimesThriftService
}

func (p *userTimesThriftServiceProcessorUpdateUserTimes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserTimesThriftServiceUpdateUserTimesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateUserTimes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserTimesThriftServiceUpdateUserTimesResult{}
	var retval *UserTimesUpdateResponseStruct
	var err2 error
	if retval, err2 = p.handler.UpdateUserTimes(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateUserTimes: "+err2.Error())
		oprot.WriteMessageBegin("updateUserTimes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateUserTimes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type userTimesThriftServiceProcessorInsertUserTimes struct {
	handler UserTimesThriftService
}

func (p *userTimesThriftServiceProcessorInsertUserTimes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UserTimesThriftServiceInsertUserTimesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("insertUserTimes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UserTimesThriftServiceInsertUserTimesResult{}
	var retval *UserTimesInsertResponseStruct
	var err2 error
	if retval, err2 = p.handler.InsertUserTimes(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing insertUserTimes: "+err2.Error())
		oprot.WriteMessageBegin("insertUserTimes", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("insertUserTimes", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type UserTimesThriftServiceGetUserTimesDetailsArgs struct {
	RequestObj *UserTimesDetailsRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewUserTimesThriftServiceGetUserTimesDetailsArgs() *UserTimesThriftServiceGetUserTimesDetailsArgs {
	return &UserTimesThriftServiceGetUserTimesDetailsArgs{}
}

var UserTimesThriftServiceGetUserTimesDetailsArgs_RequestObj_DEFAULT *UserTimesDetailsRequestStruct

func (p *UserTimesThriftServiceGetUserTimesDetailsArgs) GetRequestObj() *UserTimesDetailsRequestStruct {
	if !p.IsSetRequestObj() {
		return UserTimesThriftServiceGetUserTimesDetailsArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *UserTimesThriftServiceGetUserTimesDetailsArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *UserTimesThriftServiceGetUserTimesDetailsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserTimesThriftServiceGetUserTimesDetailsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &UserTimesDetailsRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *UserTimesThriftServiceGetUserTimesDetailsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserTimesDetails_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserTimesThriftServiceGetUserTimesDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *UserTimesThriftServiceGetUserTimesDetailsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserTimesThriftServiceGetUserTimesDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserTimesThriftServiceGetUserTimesDetailsResult struct {
	Success *UserTimesDetailsResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserTimesThriftServiceGetUserTimesDetailsResult() *UserTimesThriftServiceGetUserTimesDetailsResult {
	return &UserTimesThriftServiceGetUserTimesDetailsResult{}
}

var UserTimesThriftServiceGetUserTimesDetailsResult_Success_DEFAULT *UserTimesDetailsResponseStruct

func (p *UserTimesThriftServiceGetUserTimesDetailsResult) GetSuccess() *UserTimesDetailsResponseStruct {
	if !p.IsSetSuccess() {
		return UserTimesThriftServiceGetUserTimesDetailsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserTimesThriftServiceGetUserTimesDetailsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserTimesThriftServiceGetUserTimesDetailsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserTimesThriftServiceGetUserTimesDetailsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserTimesDetailsResponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserTimesThriftServiceGetUserTimesDetailsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserTimesDetails_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserTimesThriftServiceGetUserTimesDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserTimesThriftServiceGetUserTimesDetailsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserTimesThriftServiceGetUserTimesDetailsResult(%+v)", *p)
}

// Attributes:
//  - RequestObj
type UserTimesThriftServiceUpdateUserTimesArgs struct {
	RequestObj *UserTimesUpdateRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewUserTimesThriftServiceUpdateUserTimesArgs() *UserTimesThriftServiceUpdateUserTimesArgs {
	return &UserTimesThriftServiceUpdateUserTimesArgs{}
}

var UserTimesThriftServiceUpdateUserTimesArgs_RequestObj_DEFAULT *UserTimesUpdateRequestStruct

func (p *UserTimesThriftServiceUpdateUserTimesArgs) GetRequestObj() *UserTimesUpdateRequestStruct {
	if !p.IsSetRequestObj() {
		return UserTimesThriftServiceUpdateUserTimesArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *UserTimesThriftServiceUpdateUserTimesArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *UserTimesThriftServiceUpdateUserTimesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserTimesThriftServiceUpdateUserTimesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &UserTimesUpdateRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *UserTimesThriftServiceUpdateUserTimesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateUserTimes_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserTimesThriftServiceUpdateUserTimesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *UserTimesThriftServiceUpdateUserTimesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserTimesThriftServiceUpdateUserTimesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserTimesThriftServiceUpdateUserTimesResult struct {
	Success *UserTimesUpdateResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserTimesThriftServiceUpdateUserTimesResult() *UserTimesThriftServiceUpdateUserTimesResult {
	return &UserTimesThriftServiceUpdateUserTimesResult{}
}

var UserTimesThriftServiceUpdateUserTimesResult_Success_DEFAULT *UserTimesUpdateResponseStruct

func (p *UserTimesThriftServiceUpdateUserTimesResult) GetSuccess() *UserTimesUpdateResponseStruct {
	if !p.IsSetSuccess() {
		return UserTimesThriftServiceUpdateUserTimesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserTimesThriftServiceUpdateUserTimesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserTimesThriftServiceUpdateUserTimesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserTimesThriftServiceUpdateUserTimesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserTimesUpdateResponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserTimesThriftServiceUpdateUserTimesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateUserTimes_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserTimesThriftServiceUpdateUserTimesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserTimesThriftServiceUpdateUserTimesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserTimesThriftServiceUpdateUserTimesResult(%+v)", *p)
}

// Attributes:
//  - RequestObj
type UserTimesThriftServiceInsertUserTimesArgs struct {
	RequestObj *UserTimesInsertRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewUserTimesThriftServiceInsertUserTimesArgs() *UserTimesThriftServiceInsertUserTimesArgs {
	return &UserTimesThriftServiceInsertUserTimesArgs{}
}

var UserTimesThriftServiceInsertUserTimesArgs_RequestObj_DEFAULT *UserTimesInsertRequestStruct

func (p *UserTimesThriftServiceInsertUserTimesArgs) GetRequestObj() *UserTimesInsertRequestStruct {
	if !p.IsSetRequestObj() {
		return UserTimesThriftServiceInsertUserTimesArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *UserTimesThriftServiceInsertUserTimesArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *UserTimesThriftServiceInsertUserTimesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserTimesThriftServiceInsertUserTimesArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &UserTimesInsertRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *UserTimesThriftServiceInsertUserTimesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("insertUserTimes_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserTimesThriftServiceInsertUserTimesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *UserTimesThriftServiceInsertUserTimesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserTimesThriftServiceInsertUserTimesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type UserTimesThriftServiceInsertUserTimesResult struct {
	Success *UserTimesInsertResponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewUserTimesThriftServiceInsertUserTimesResult() *UserTimesThriftServiceInsertUserTimesResult {
	return &UserTimesThriftServiceInsertUserTimesResult{}
}

var UserTimesThriftServiceInsertUserTimesResult_Success_DEFAULT *UserTimesInsertResponseStruct

func (p *UserTimesThriftServiceInsertUserTimesResult) GetSuccess() *UserTimesInsertResponseStruct {
	if !p.IsSetSuccess() {
		return UserTimesThriftServiceInsertUserTimesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserTimesThriftServiceInsertUserTimesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserTimesThriftServiceInsertUserTimesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UserTimesThriftServiceInsertUserTimesResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &UserTimesInsertResponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *UserTimesThriftServiceInsertUserTimesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("insertUserTimes_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserTimesThriftServiceInsertUserTimesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *UserTimesThriftServiceInsertUserTimesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserTimesThriftServiceInsertUserTimesResult(%+v)", *p)
}
