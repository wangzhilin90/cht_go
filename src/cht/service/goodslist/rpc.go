// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package goodslist

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - Name
//  - Category
//  - IsExport
//  - LimitOffset
//  - LimitNum
//  - ChengHuiTongTraceLog
type GoodsListRequestStruct struct {
	Name                 string `thrift:"name,1" db:"name" json:"name"`
	Category             int32  `thrift:"category,2" db:"category" json:"category"`
	IsExport             int32  `thrift:"is_export,3" db:"is_export" json:"is_export"`
	LimitOffset          int32  `thrift:"limitOffset,4" db:"limitOffset" json:"limitOffset"`
	LimitNum             int32  `thrift:"limitNum,5" db:"limitNum" json:"limitNum"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,6" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewGoodsListRequestStruct() *GoodsListRequestStruct {
//   return &GoodsListRequestStruct{}
// }

func (p *GoodsListRequestStruct) GetName() string {
	return p.Name
}

func (p *GoodsListRequestStruct) GetCategory() int32 {
	return p.Category
}

func (p *GoodsListRequestStruct) GetIsExport() int32 {
	return p.IsExport
}

func (p *GoodsListRequestStruct) GetLimitOffset() int32 {
	return p.LimitOffset
}

func (p *GoodsListRequestStruct) GetLimitNum() int32 {
	return p.LimitNum
}

func (p *GoodsListRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *GoodsListRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GoodsListRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *GoodsListRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Category = v
	}
	return nil
}

func (p *GoodsListRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IsExport = v
	}
	return nil
}

func (p *GoodsListRequestStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.LimitOffset = v
	}
	return nil
}

func (p *GoodsListRequestStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.LimitNum = v
	}
	return nil
}

func (p *GoodsListRequestStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *GoodsListRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GoodsListRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GoodsListRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *GoodsListRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("category", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:category: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Category)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.category (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:category: ", p), err)
	}
	return err
}

func (p *GoodsListRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_export", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_export: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsExport)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_export (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_export: ", p), err)
	}
	return err
}

func (p *GoodsListRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limitOffset", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:limitOffset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitOffset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limitOffset (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:limitOffset: ", p), err)
	}
	return err
}

func (p *GoodsListRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limitNum", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:limitNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limitNum (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:limitNum: ", p), err)
	}
	return err
}

func (p *GoodsListRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *GoodsListRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GoodsListRequestStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - Addtime
//  - ShowTime
//  - CloseTime
//  - IsTimer
//  - Category
//  - RedbagMoney
//  - OriginalPoint
//  - CurrentPoint
//  - TotalNum
//  - SoldNum
//  - SingleNum
//  - Name
//  - Litpic
//  - Content
type GoodsListResultStruct struct {
	ID            int32  `thrift:"id,1" db:"id" json:"id"`
	Addtime       int32  `thrift:"addtime,2" db:"addtime" json:"addtime"`
	ShowTime      int32  `thrift:"show_time,3" db:"show_time" json:"show_time"`
	CloseTime     int32  `thrift:"close_time,4" db:"close_time" json:"close_time"`
	IsTimer       int32  `thrift:"is_timer,5" db:"is_timer" json:"is_timer"`
	Category      int32  `thrift:"category,6" db:"category" json:"category"`
	RedbagMoney   string `thrift:"redbag_money,7" db:"redbag_money" json:"redbag_money"`
	OriginalPoint int32  `thrift:"original_point,8" db:"original_point" json:"original_point"`
	CurrentPoint  int32  `thrift:"current_point,9" db:"current_point" json:"current_point"`
	TotalNum      int32  `thrift:"total_num,10" db:"total_num" json:"total_num"`
	SoldNum       int32  `thrift:"sold_num,11" db:"sold_num" json:"sold_num"`
	SingleNum     int32  `thrift:"single_num,12" db:"single_num" json:"single_num"`
	Name          string `thrift:"name,13" db:"name" json:"name"`
	Litpic        string `thrift:"litpic,14" db:"litpic" json:"litpic"`
	Content       string `thrift:"content,15" db:"content" json:"content"`
}

func NewGoodsListResultStruct() *GoodsListResultStruct {
	return &GoodsListResultStruct{}
}

func (p *GoodsListResultStruct) GetID() int32 {
	return p.ID
}

func (p *GoodsListResultStruct) GetAddtime() int32 {
	return p.Addtime
}

func (p *GoodsListResultStruct) GetShowTime() int32 {
	return p.ShowTime
}

func (p *GoodsListResultStruct) GetCloseTime() int32 {
	return p.CloseTime
}

func (p *GoodsListResultStruct) GetIsTimer() int32 {
	return p.IsTimer
}

func (p *GoodsListResultStruct) GetCategory() int32 {
	return p.Category
}

func (p *GoodsListResultStruct) GetRedbagMoney() string {
	return p.RedbagMoney
}

func (p *GoodsListResultStruct) GetOriginalPoint() int32 {
	return p.OriginalPoint
}

func (p *GoodsListResultStruct) GetCurrentPoint() int32 {
	return p.CurrentPoint
}

func (p *GoodsListResultStruct) GetTotalNum() int32 {
	return p.TotalNum
}

func (p *GoodsListResultStruct) GetSoldNum() int32 {
	return p.SoldNum
}

func (p *GoodsListResultStruct) GetSingleNum() int32 {
	return p.SingleNum
}

func (p *GoodsListResultStruct) GetName() string {
	return p.Name
}

func (p *GoodsListResultStruct) GetLitpic() string {
	return p.Litpic
}

func (p *GoodsListResultStruct) GetContent() string {
	return p.Content
}
func (p *GoodsListResultStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.ReadField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.ReadField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GoodsListResultStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *GoodsListResultStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Addtime = v
	}
	return nil
}

func (p *GoodsListResultStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ShowTime = v
	}
	return nil
}

func (p *GoodsListResultStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.CloseTime = v
	}
	return nil
}

func (p *GoodsListResultStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IsTimer = v
	}
	return nil
}

func (p *GoodsListResultStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Category = v
	}
	return nil
}

func (p *GoodsListResultStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.RedbagMoney = v
	}
	return nil
}

func (p *GoodsListResultStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.OriginalPoint = v
	}
	return nil
}

func (p *GoodsListResultStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.CurrentPoint = v
	}
	return nil
}

func (p *GoodsListResultStruct) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.TotalNum = v
	}
	return nil
}

func (p *GoodsListResultStruct) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.SoldNum = v
	}
	return nil
}

func (p *GoodsListResultStruct) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.SingleNum = v
	}
	return nil
}

func (p *GoodsListResultStruct) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *GoodsListResultStruct) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Litpic = v
	}
	return nil
}

func (p *GoodsListResultStruct) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.Content = v
	}
	return nil
}

func (p *GoodsListResultStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GoodsListResultStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GoodsListResultStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *GoodsListResultStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addtime", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:addtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Addtime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addtime (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:addtime: ", p), err)
	}
	return err
}

func (p *GoodsListResultStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("show_time", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:show_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ShowTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.show_time (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:show_time: ", p), err)
	}
	return err
}

func (p *GoodsListResultStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("close_time", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:close_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CloseTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.close_time (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:close_time: ", p), err)
	}
	return err
}

func (p *GoodsListResultStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_timer", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:is_timer: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsTimer)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_timer (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:is_timer: ", p), err)
	}
	return err
}

func (p *GoodsListResultStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("category", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:category: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Category)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.category (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:category: ", p), err)
	}
	return err
}

func (p *GoodsListResultStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("redbag_money", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:redbag_money: ", p), err)
	}
	if err := oprot.WriteString(string(p.RedbagMoney)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.redbag_money (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:redbag_money: ", p), err)
	}
	return err
}

func (p *GoodsListResultStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("original_point", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:original_point: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.OriginalPoint)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.original_point (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:original_point: ", p), err)
	}
	return err
}

func (p *GoodsListResultStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("current_point", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:current_point: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CurrentPoint)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.current_point (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:current_point: ", p), err)
	}
	return err
}

func (p *GoodsListResultStruct) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_num", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:total_num: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_num (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:total_num: ", p), err)
	}
	return err
}

func (p *GoodsListResultStruct) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sold_num", thrift.I32, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:sold_num: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SoldNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.sold_num (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:sold_num: ", p), err)
	}
	return err
}

func (p *GoodsListResultStruct) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("single_num", thrift.I32, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:single_num: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SingleNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.single_num (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:single_num: ", p), err)
	}
	return err
}

func (p *GoodsListResultStruct) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:name: ", p), err)
	}
	return err
}

func (p *GoodsListResultStruct) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("litpic", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:litpic: ", p), err)
	}
	if err := oprot.WriteString(string(p.Litpic)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.litpic (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:litpic: ", p), err)
	}
	return err
}

func (p *GoodsListResultStruct) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.STRING, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:content: ", p), err)
	}
	if err := oprot.WriteString(string(p.Content)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.content (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:content: ", p), err)
	}
	return err
}

func (p *GoodsListResultStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GoodsListResultStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
//  - GoodsList
//  - TotalNum
type GoodsListReponseStruct struct {
	Status    int32                    `thrift:"status,1" db:"status" json:"status"`
	Msg       string                   `thrift:"msg,2" db:"msg" json:"msg"`
	GoodsList []*GoodsListResultStruct `thrift:"GoodsList,3" db:"GoodsList" json:"GoodsList"`
	TotalNum  int32                    `thrift:"total_num,4" db:"total_num" json:"total_num"`
}

func NewGoodsListReponseStruct() *GoodsListReponseStruct {
	return &GoodsListReponseStruct{}
}

func (p *GoodsListReponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *GoodsListReponseStruct) GetMsg() string {
	return p.Msg
}

func (p *GoodsListReponseStruct) GetGoodsList() []*GoodsListResultStruct {
	return p.GoodsList
}

func (p *GoodsListReponseStruct) GetTotalNum() int32 {
	return p.TotalNum
}
func (p *GoodsListReponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GoodsListReponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *GoodsListReponseStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *GoodsListReponseStruct) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*GoodsListResultStruct, 0, size)
	p.GoodsList = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &GoodsListResultStruct{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.GoodsList = append(p.GoodsList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GoodsListReponseStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TotalNum = v
	}
	return nil
}

func (p *GoodsListReponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GoodsListReponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GoodsListReponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *GoodsListReponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *GoodsListReponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("GoodsList", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:GoodsList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GoodsList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.GoodsList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:GoodsList: ", p), err)
	}
	return err
}

func (p *GoodsListReponseStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_num", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:total_num: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_num (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:total_num: ", p), err)
	}
	return err
}

func (p *GoodsListReponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GoodsListReponseStruct(%+v)", *p)
}

type GoodsListThriftService interface {
	// Parameters:
	//  - RequestObj
	GetGoodsList(requestObj *GoodsListRequestStruct) (r *GoodsListReponseStruct, err error)
}

type GoodsListThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewGoodsListThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *GoodsListThriftServiceClient {
	return &GoodsListThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewGoodsListThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *GoodsListThriftServiceClient {
	return &GoodsListThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RequestObj
func (p *GoodsListThriftServiceClient) GetGoodsList(requestObj *GoodsListRequestStruct) (r *GoodsListReponseStruct, err error) {
	if err = p.sendGetGoodsList(requestObj); err != nil {
		return
	}
	return p.recvGetGoodsList()
}

func (p *GoodsListThriftServiceClient) sendGetGoodsList(requestObj *GoodsListRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getGoodsList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GoodsListThriftServiceGetGoodsListArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *GoodsListThriftServiceClient) recvGetGoodsList() (value *GoodsListReponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getGoodsList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getGoodsList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getGoodsList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error2 error
		error2, err = error1.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error2
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getGoodsList failed: invalid message type")
		return
	}
	result := GoodsListThriftServiceGetGoodsListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type GoodsListThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      GoodsListThriftService
}

func (p *GoodsListThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *GoodsListThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *GoodsListThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewGoodsListThriftServiceProcessor(handler GoodsListThriftService) *GoodsListThriftServiceProcessor {

	self3 := &GoodsListThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self3.processorMap["getGoodsList"] = &goodsListThriftServiceProcessorGetGoodsList{handler: handler}
	return self3
}

func (p *GoodsListThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x4

}

type goodsListThriftServiceProcessorGetGoodsList struct {
	handler GoodsListThriftService
}

func (p *goodsListThriftServiceProcessorGetGoodsList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GoodsListThriftServiceGetGoodsListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getGoodsList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GoodsListThriftServiceGetGoodsListResult{}
	var retval *GoodsListReponseStruct
	var err2 error
	if retval, err2 = p.handler.GetGoodsList(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGoodsList: "+err2.Error())
		oprot.WriteMessageBegin("getGoodsList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getGoodsList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type GoodsListThriftServiceGetGoodsListArgs struct {
	RequestObj *GoodsListRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewGoodsListThriftServiceGetGoodsListArgs() *GoodsListThriftServiceGetGoodsListArgs {
	return &GoodsListThriftServiceGetGoodsListArgs{}
}

var GoodsListThriftServiceGetGoodsListArgs_RequestObj_DEFAULT *GoodsListRequestStruct

func (p *GoodsListThriftServiceGetGoodsListArgs) GetRequestObj() *GoodsListRequestStruct {
	if !p.IsSetRequestObj() {
		return GoodsListThriftServiceGetGoodsListArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *GoodsListThriftServiceGetGoodsListArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *GoodsListThriftServiceGetGoodsListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GoodsListThriftServiceGetGoodsListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &GoodsListRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *GoodsListThriftServiceGetGoodsListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGoodsList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GoodsListThriftServiceGetGoodsListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *GoodsListThriftServiceGetGoodsListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GoodsListThriftServiceGetGoodsListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type GoodsListThriftServiceGetGoodsListResult struct {
	Success *GoodsListReponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewGoodsListThriftServiceGetGoodsListResult() *GoodsListThriftServiceGetGoodsListResult {
	return &GoodsListThriftServiceGetGoodsListResult{}
}

var GoodsListThriftServiceGetGoodsListResult_Success_DEFAULT *GoodsListReponseStruct

func (p *GoodsListThriftServiceGetGoodsListResult) GetSuccess() *GoodsListReponseStruct {
	if !p.IsSetSuccess() {
		return GoodsListThriftServiceGetGoodsListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *GoodsListThriftServiceGetGoodsListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GoodsListThriftServiceGetGoodsListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GoodsListThriftServiceGetGoodsListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &GoodsListReponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *GoodsListThriftServiceGetGoodsListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getGoodsList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GoodsListThriftServiceGetGoodsListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *GoodsListThriftServiceGetGoodsListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GoodsListThriftServiceGetGoodsListResult(%+v)", *p)
}
