// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hsloglist

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - StartTime
//  - EndTime
//  - Type
//  - Type2
//  - Kws
//  - Utype
//  - IsExport
//  - LimitOffset
//  - LimitNum
//  - BorrowID
//  - ChengHuiTongTraceLog
type HsLogListRequestStruct struct {
	StartTime            int32  `thrift:"start_time,1" db:"start_time" json:"start_time"`
	EndTime              int32  `thrift:"end_time,2" db:"end_time" json:"end_time"`
	Type                 int32  `thrift:"type,3" db:"type" json:"type"`
	Type2                int32  `thrift:"type2,4" db:"type2" json:"type2"`
	Kws                  string `thrift:"kws,5" db:"kws" json:"kws"`
	Utype                int32  `thrift:"utype,6" db:"utype" json:"utype"`
	IsExport             int32  `thrift:"is_export,7" db:"is_export" json:"is_export"`
	LimitOffset          int32  `thrift:"limitOffset,8" db:"limitOffset" json:"limitOffset"`
	LimitNum             int32  `thrift:"limitNum,9" db:"limitNum" json:"limitNum"`
	BorrowID             int32  `thrift:"borrow_id,10" db:"borrow_id" json:"borrow_id"`
	ChengHuiTongTraceLog string `thrift:"chengHuiTongTraceLog,11" db:"chengHuiTongTraceLog" json:"chengHuiTongTraceLog"`
}

// func NewHsLogListRequestStruct() *HsLogListRequestStruct {
// 	return &HsLogListRequestStruct{}
// }

func (p *HsLogListRequestStruct) GetStartTime() int32 {
	return p.StartTime
}

func (p *HsLogListRequestStruct) GetEndTime() int32 {
	return p.EndTime
}

func (p *HsLogListRequestStruct) GetType() int32 {
	return p.Type
}

func (p *HsLogListRequestStruct) GetType2() int32 {
	return p.Type2
}

func (p *HsLogListRequestStruct) GetKws() string {
	return p.Kws
}

func (p *HsLogListRequestStruct) GetUtype() int32 {
	return p.Utype
}

func (p *HsLogListRequestStruct) GetIsExport() int32 {
	return p.IsExport
}

func (p *HsLogListRequestStruct) GetLimitOffset() int32 {
	return p.LimitOffset
}

func (p *HsLogListRequestStruct) GetLimitNum() int32 {
	return p.LimitNum
}

func (p *HsLogListRequestStruct) GetBorrowID() int32 {
	return p.BorrowID
}

func (p *HsLogListRequestStruct) GetChengHuiTongTraceLog() string {
	return p.ChengHuiTongTraceLog
}
func (p *HsLogListRequestStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HsLogListRequestStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StartTime = v
	}
	return nil
}

func (p *HsLogListRequestStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EndTime = v
	}
	return nil
}

func (p *HsLogListRequestStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *HsLogListRequestStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Type2 = v
	}
	return nil
}

func (p *HsLogListRequestStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Kws = v
	}
	return nil
}

func (p *HsLogListRequestStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Utype = v
	}
	return nil
}

func (p *HsLogListRequestStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.IsExport = v
	}
	return nil
}

func (p *HsLogListRequestStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.LimitOffset = v
	}
	return nil
}

func (p *HsLogListRequestStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.LimitNum = v
	}
	return nil
}

func (p *HsLogListRequestStruct) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.BorrowID = v
	}
	return nil
}

func (p *HsLogListRequestStruct) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.ChengHuiTongTraceLog = v
	}
	return nil
}

func (p *HsLogListRequestStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HsLogListRequestStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HsLogListRequestStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start_time", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.StartTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.start_time (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start_time: ", p), err)
	}
	return err
}

func (p *HsLogListRequestStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("end_time", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:end_time: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.EndTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.end_time (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:end_time: ", p), err)
	}
	return err
}

func (p *HsLogListRequestStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *HsLogListRequestStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type2", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type2: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type2)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type2 (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type2: ", p), err)
	}
	return err
}

func (p *HsLogListRequestStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("kws", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:kws: ", p), err)
	}
	if err := oprot.WriteString(string(p.Kws)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.kws (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:kws: ", p), err)
	}
	return err
}

func (p *HsLogListRequestStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("utype", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:utype: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Utype)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.utype (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:utype: ", p), err)
	}
	return err
}

func (p *HsLogListRequestStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("is_export", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:is_export: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.IsExport)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.is_export (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:is_export: ", p), err)
	}
	return err
}

func (p *HsLogListRequestStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limitOffset", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:limitOffset: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitOffset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limitOffset (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:limitOffset: ", p), err)
	}
	return err
}

func (p *HsLogListRequestStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limitNum", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:limitNum: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.LimitNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limitNum (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:limitNum: ", p), err)
	}
	return err
}

func (p *HsLogListRequestStruct) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("borrow_id", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:borrow_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.BorrowID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.borrow_id (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:borrow_id: ", p), err)
	}
	return err
}

func (p *HsLogListRequestStruct) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("chengHuiTongTraceLog", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:chengHuiTongTraceLog: ", p), err)
	}
	if err := oprot.WriteString(string(p.ChengHuiTongTraceLog)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.chengHuiTongTraceLog (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:chengHuiTongTraceLog: ", p), err)
	}
	return err
}

func (p *HsLogListRequestStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HsLogListRequestStruct(%+v)", *p)
}

// Attributes:
//  - ID
//  - UserID
//  - Orderno
//  - Type
//  - Money
//  - FreezeMoney
//  - WaitMoney
//  - Addtime
//  - Toid
//  - Remark
//  - Username
//  - Realname
//  - Regtime
type HsLogDetailsStruct struct {
	ID          int32  `thrift:"id,1" db:"id" json:"id"`
	UserID      int32  `thrift:"user_id,2" db:"user_id" json:"user_id"`
	Orderno     string `thrift:"orderno,3" db:"orderno" json:"orderno"`
	Type        int32  `thrift:"type,4" db:"type" json:"type"`
	Money       string `thrift:"money,5" db:"money" json:"money"`
	FreezeMoney string `thrift:"freeze_money,6" db:"freeze_money" json:"freeze_money"`
	WaitMoney   string `thrift:"wait_money,7" db:"wait_money" json:"wait_money"`
	Addtime     int32  `thrift:"addtime,8" db:"addtime" json:"addtime"`
	Toid        int32  `thrift:"toid,9" db:"toid" json:"toid"`
	Remark      string `thrift:"remark,10" db:"remark" json:"remark"`
	Username    string `thrift:"username,11" db:"username" json:"username"`
	Realname    string `thrift:"realname,12" db:"realname" json:"realname"`
	Regtime     int32  `thrift:"regtime,13" db:"regtime" json:"regtime"`
}

func NewHsLogDetailsStruct() *HsLogDetailsStruct {
	return &HsLogDetailsStruct{}
}

func (p *HsLogDetailsStruct) GetID() int32 {
	return p.ID
}

func (p *HsLogDetailsStruct) GetUserID() int32 {
	return p.UserID
}

func (p *HsLogDetailsStruct) GetOrderno() string {
	return p.Orderno
}

func (p *HsLogDetailsStruct) GetType() int32 {
	return p.Type
}

func (p *HsLogDetailsStruct) GetMoney() string {
	return p.Money
}

func (p *HsLogDetailsStruct) GetFreezeMoney() string {
	return p.FreezeMoney
}

func (p *HsLogDetailsStruct) GetWaitMoney() string {
	return p.WaitMoney
}

func (p *HsLogDetailsStruct) GetAddtime() int32 {
	return p.Addtime
}

func (p *HsLogDetailsStruct) GetToid() int32 {
	return p.Toid
}

func (p *HsLogDetailsStruct) GetRemark() string {
	return p.Remark
}

func (p *HsLogDetailsStruct) GetUsername() string {
	return p.Username
}

func (p *HsLogDetailsStruct) GetRealname() string {
	return p.Realname
}

func (p *HsLogDetailsStruct) GetRegtime() int32 {
	return p.Regtime
}
func (p *HsLogDetailsStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HsLogDetailsStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *HsLogDetailsStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *HsLogDetailsStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Orderno = v
	}
	return nil
}

func (p *HsLogDetailsStruct) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *HsLogDetailsStruct) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Money = v
	}
	return nil
}

func (p *HsLogDetailsStruct) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.FreezeMoney = v
	}
	return nil
}

func (p *HsLogDetailsStruct) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.WaitMoney = v
	}
	return nil
}

func (p *HsLogDetailsStruct) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Addtime = v
	}
	return nil
}

func (p *HsLogDetailsStruct) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Toid = v
	}
	return nil
}

func (p *HsLogDetailsStruct) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Remark = v
	}
	return nil
}

func (p *HsLogDetailsStruct) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Username = v
	}
	return nil
}

func (p *HsLogDetailsStruct) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Realname = v
	}
	return nil
}

func (p *HsLogDetailsStruct) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Regtime = v
	}
	return nil
}

func (p *HsLogDetailsStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HsLogDetailsStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HsLogDetailsStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *HsLogDetailsStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user_id", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user_id (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_id: ", p), err)
	}
	return err
}

func (p *HsLogDetailsStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orderno", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:orderno: ", p), err)
	}
	if err := oprot.WriteString(string(p.Orderno)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orderno (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:orderno: ", p), err)
	}
	return err
}

func (p *HsLogDetailsStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err)
	}
	return err
}

func (p *HsLogDetailsStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("money", thrift.STRING, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:money: ", p), err)
	}
	if err := oprot.WriteString(string(p.Money)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.money (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:money: ", p), err)
	}
	return err
}

func (p *HsLogDetailsStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("freeze_money", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:freeze_money: ", p), err)
	}
	if err := oprot.WriteString(string(p.FreezeMoney)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.freeze_money (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:freeze_money: ", p), err)
	}
	return err
}

func (p *HsLogDetailsStruct) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("wait_money", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:wait_money: ", p), err)
	}
	if err := oprot.WriteString(string(p.WaitMoney)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.wait_money (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:wait_money: ", p), err)
	}
	return err
}

func (p *HsLogDetailsStruct) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addtime", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:addtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Addtime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addtime (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:addtime: ", p), err)
	}
	return err
}

func (p *HsLogDetailsStruct) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("toid", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:toid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Toid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.toid (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:toid: ", p), err)
	}
	return err
}

func (p *HsLogDetailsStruct) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("remark", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:remark: ", p), err)
	}
	if err := oprot.WriteString(string(p.Remark)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.remark (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:remark: ", p), err)
	}
	return err
}

func (p *HsLogDetailsStruct) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("username", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:username: ", p), err)
	}
	if err := oprot.WriteString(string(p.Username)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.username (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:username: ", p), err)
	}
	return err
}

func (p *HsLogDetailsStruct) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("realname", thrift.STRING, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:realname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Realname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.realname (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:realname: ", p), err)
	}
	return err
}

func (p *HsLogDetailsStruct) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("regtime", thrift.I32, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:regtime: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Regtime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.regtime (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:regtime: ", p), err)
	}
	return err
}

func (p *HsLogDetailsStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HsLogDetailsStruct(%+v)", *p)
}

// Attributes:
//  - Status
//  - Msg
//  - TotalNum
//  - HslogList
type HsLogListReponseStruct struct {
	Status    int32                 `thrift:"status,1" db:"status" json:"status"`
	Msg       string                `thrift:"msg,2" db:"msg" json:"msg"`
	TotalNum  int32                 `thrift:"total_num,3" db:"total_num" json:"total_num"`
	HslogList []*HsLogDetailsStruct `thrift:"HslogList,4" db:"HslogList" json:"HslogList"`
}

func NewHsLogListReponseStruct() *HsLogListReponseStruct {
	return &HsLogListReponseStruct{}
}

func (p *HsLogListReponseStruct) GetStatus() int32 {
	return p.Status
}

func (p *HsLogListReponseStruct) GetMsg() string {
	return p.Msg
}

func (p *HsLogListReponseStruct) GetTotalNum() int32 {
	return p.TotalNum
}

func (p *HsLogListReponseStruct) GetHslogList() []*HsLogDetailsStruct {
	return p.HslogList
}
func (p *HsLogListReponseStruct) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HsLogListReponseStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = v
	}
	return nil
}

func (p *HsLogListReponseStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *HsLogListReponseStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalNum = v
	}
	return nil
}

func (p *HsLogListReponseStruct) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*HsLogDetailsStruct, 0, size)
	p.HslogList = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &HsLogDetailsStruct{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.HslogList = append(p.HslogList, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *HsLogListReponseStruct) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HsLogListReponseStruct"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HsLogListReponseStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *HsLogListReponseStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err)
	}
	return err
}

func (p *HsLogListReponseStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_num", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:total_num: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_num (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:total_num: ", p), err)
	}
	return err
}

func (p *HsLogListReponseStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("HslogList", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:HslogList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HslogList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.HslogList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:HslogList: ", p), err)
	}
	return err
}

func (p *HsLogListReponseStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HsLogListReponseStruct(%+v)", *p)
}

type HsLogListThriftService interface {
	// Parameters:
	//  - RequestObj
	GetHslogList(requestObj *HsLogListRequestStruct) (r *HsLogListReponseStruct, err error)
}

type HsLogListThriftServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewHsLogListThriftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HsLogListThriftServiceClient {
	return &HsLogListThriftServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewHsLogListThriftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HsLogListThriftServiceClient {
	return &HsLogListThriftServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - RequestObj
func (p *HsLogListThriftServiceClient) GetHslogList(requestObj *HsLogListRequestStruct) (r *HsLogListReponseStruct, err error) {
	if err = p.sendGetHslogList(requestObj); err != nil {
		return
	}
	return p.recvGetHslogList()
}

func (p *HsLogListThriftServiceClient) sendGetHslogList(requestObj *HsLogListRequestStruct) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getHslogList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := HsLogListThriftServiceGetHslogListArgs{
		RequestObj: requestObj,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HsLogListThriftServiceClient) recvGetHslogList() (value *HsLogListReponseStruct, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getHslogList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getHslogList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getHslogList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error2 error
		error2, err = error1.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error2
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getHslogList failed: invalid message type")
		return
	}
	result := HsLogListThriftServiceGetHslogListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type HsLogListThriftServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      HsLogListThriftService
}

func (p *HsLogListThriftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *HsLogListThriftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *HsLogListThriftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewHsLogListThriftServiceProcessor(handler HsLogListThriftService) *HsLogListThriftServiceProcessor {

	self3 := &HsLogListThriftServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self3.processorMap["getHslogList"] = &hsLogListThriftServiceProcessorGetHslogList{handler: handler}
	return self3
}

func (p *HsLogListThriftServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x4

}

type hsLogListThriftServiceProcessorGetHslogList struct {
	handler HsLogListThriftService
}

func (p *hsLogListThriftServiceProcessorGetHslogList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HsLogListThriftServiceGetHslogListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getHslogList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HsLogListThriftServiceGetHslogListResult{}
	var retval *HsLogListReponseStruct
	var err2 error
	if retval, err2 = p.handler.GetHslogList(args.RequestObj); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getHslogList: "+err2.Error())
		oprot.WriteMessageBegin("getHslogList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getHslogList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - RequestObj
type HsLogListThriftServiceGetHslogListArgs struct {
	RequestObj *HsLogListRequestStruct `thrift:"requestObj,1" db:"requestObj" json:"requestObj"`
}

func NewHsLogListThriftServiceGetHslogListArgs() *HsLogListThriftServiceGetHslogListArgs {
	return &HsLogListThriftServiceGetHslogListArgs{}
}

var HsLogListThriftServiceGetHslogListArgs_RequestObj_DEFAULT *HsLogListRequestStruct

func (p *HsLogListThriftServiceGetHslogListArgs) GetRequestObj() *HsLogListRequestStruct {
	if !p.IsSetRequestObj() {
		return HsLogListThriftServiceGetHslogListArgs_RequestObj_DEFAULT
	}
	return p.RequestObj
}
func (p *HsLogListThriftServiceGetHslogListArgs) IsSetRequestObj() bool {
	return p.RequestObj != nil
}

func (p *HsLogListThriftServiceGetHslogListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HsLogListThriftServiceGetHslogListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.RequestObj = &HsLogListRequestStruct{}
	if err := p.RequestObj.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RequestObj), err)
	}
	return nil
}

func (p *HsLogListThriftServiceGetHslogListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getHslogList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HsLogListThriftServiceGetHslogListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestObj", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requestObj: ", p), err)
	}
	if err := p.RequestObj.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RequestObj), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requestObj: ", p), err)
	}
	return err
}

func (p *HsLogListThriftServiceGetHslogListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HsLogListThriftServiceGetHslogListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type HsLogListThriftServiceGetHslogListResult struct {
	Success *HsLogListReponseStruct `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewHsLogListThriftServiceGetHslogListResult() *HsLogListThriftServiceGetHslogListResult {
	return &HsLogListThriftServiceGetHslogListResult{}
}

var HsLogListThriftServiceGetHslogListResult_Success_DEFAULT *HsLogListReponseStruct

func (p *HsLogListThriftServiceGetHslogListResult) GetSuccess() *HsLogListReponseStruct {
	if !p.IsSetSuccess() {
		return HsLogListThriftServiceGetHslogListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *HsLogListThriftServiceGetHslogListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HsLogListThriftServiceGetHslogListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HsLogListThriftServiceGetHslogListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &HsLogListReponseStruct{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *HsLogListThriftServiceGetHslogListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getHslogList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HsLogListThriftServiceGetHslogListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HsLogListThriftServiceGetHslogListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HsLogListThriftServiceGetHslogListResult(%+v)", *p)
}
